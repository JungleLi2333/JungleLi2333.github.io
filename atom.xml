<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>淋中之虹</title>
  
  <subtitle>向来不知道该说些什么</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.junglezero.top/"/>
  <updated>2019-04-09T06:51:54.603Z</updated>
  <id>https://www.junglezero.top/</id>
  
  <author>
    <name>JungleZero</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线程下的单例设计模式</title>
    <link href="https://www.junglezero.top/2019/04/09/%E7%BA%BF%E7%A8%8B%E4%B8%8B%E7%9A%84%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.junglezero.top/2019/04/09/线程下的单例设计模式/</id>
    <published>2019-04-09T02:14:09.000Z</published>
    <updated>2019-04-09T06:51:54.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>1、单例类只能有一个实例。<br>2、单例类必须自己创建自己的唯一实例。<br>3、单例类必须给所有其他对象提供这一实例。<br>单例模式保证了全局对象的唯一性，比如系统启动读取配置文件就需要单例保证配置的一致性。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>饿汉式单例模式：类加载初始化时就创建好一个静态的对象供外部使用，除非系统重启，这个对象不会改变，所以本身就是线程安全的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonObject1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无法进行懒加载：一旦类加载了，就会占用内存空间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonObject1 instance = <span class="keyword">new</span> SingletonObject1();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonObject1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonObject1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>懒汉式单例（延迟加载方式）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonObject2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonObject2 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonObject2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//虽然实现了调用才构造（即懒加载），但是存在线程安全问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonObject2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance)</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonObject2();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SingletonObject2.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>部分加锁的懒汉式单例，实际上最初的想法是在整个方法上加锁，但实际上虽然解决了多个实例对象问题，但是该方式运行效率却很低下，下一个线程想要获取对象，就必须等待上一个线程释放锁之后，才可以继续运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonObject4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonObject4 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonObject4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//---</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//double check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonObject4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">            <span class="comment">//在创建处加锁，防止多个线程的多次创建</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonObject4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == instance)</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonObject4();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SingletonObject4.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类的方法,这种方法巧用类的加载机制，而且也能保证线程安全，在未使用时，不会加载内部类，只有在使用实例时，才会加载内部类，从而初始化实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonObject6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonObject6</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> SingletonObject6 instance = <span class="keyword">new</span> SingletonObject6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonObject6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InstanceHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过内部枚举实现：枚举的构造函数只会调用一次<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonObject7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonObject7</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> SingletonObject7 instance;</span><br><span class="line"></span><br><span class="line">        Singleton() &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonObject7();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SingletonObject7 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonObject7 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从爬楼梯问题所想到的</title>
    <link href="https://www.junglezero.top/2019/04/03/%E6%A5%BC%E6%A2%AF%E9%97%AE%E9%A2%98%E6%89%80%E6%83%B3%E5%88%B0%E7%9A%84/"/>
    <id>https://www.junglezero.top/2019/04/03/楼梯问题所想到的/</id>
    <published>2019-04-03T00:16:16.000Z</published>
    <updated>2019-04-08T11:30:49.188Z</updated>
    
    <content type="html"><![CDATA[<p>一道简单的爬楼梯问题</p><p>You are climbing a stair case. It takes n steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?<br><strong>Note:</strong> Given n will be a positive integer.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure></p><p><strong>Example2</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br></pre></td></tr></table></figure></p><p>这是一道DP入门级别的题目，按照自顶向下（TOP to BOTTOM）的思考方式,要向到第n级台阶的话，只需要第n-1阶走一级或者n-2阶走两级，这时问题就又变成了到n-1阶和n-2阶有多少种方法，因此可以得到dp式子：dp(n)=dp(n-1)+dp(n-2)</p><p>因此，自然而然就写出了以下实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[n] &gt; <span class="number">0</span>) <span class="keyword">return</span> d[n];</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> climbStairs(n - <span class="number">1</span>) + climbStairs(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然而，提交以后就报TLE,细细一想，这种递归方式，虽然写起来简单，而且看上去也很好理解，但是这里有个严重的缺陷：有些计算会重复很多次，比如计算dp(6)，需要算dp(5)和dp(4)，算dp(5)需要算dp(4),dp(3),这个时候，dp(4)就算了两次，求的数越大，重复计算的次数也就愈多</p><p>于是我就想班里的搞竞赛的大佬讨教，大佬首先给出了“记录搜索”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> d[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[n] &gt; <span class="number">0</span>) <span class="keyword">return</span> d[n];</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> d[n] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> d[n] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d[n] = climbStairs(n - <span class="number">1</span>) + climbStairs(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所谓“记录搜索”，就是查表，所谓的表，就是把计算的结果存起来，刚才的问题不就是需要重复计算吗，这样一来就没有重复计算的问题</p><p>后来看讨论区，又有种方法就是自底向上，顺序递推的方式，时间复杂度为O(n)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[n] &gt; <span class="number">0</span>) <span class="keyword">return</span> d[n];</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> N_1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> N_2=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">        ans=N_1+N_2;</span><br><span class="line">        N_1=N_2;</span><br><span class="line">        N_2=ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然而，现在又有一个新的问题，假设需要算1e8的情况，那么即使是O(n),也会超时，这时候就需要一种更快的方式<br>这里就有一种新的处理方式：<strong>矩阵快速幂</strong>（感谢大佬特地跑过来给我讲，要不然都没地方去知道）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一道简单的爬楼梯问题&lt;/p&gt;
&lt;p&gt;You are climbing a stair case. It takes n steps to reach to the top.&lt;/p&gt;
&lt;p&gt;Each time you can either climb 1 or 2 steps
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java多线程学习（4）</title>
    <link href="https://www.junglezero.top/2019/04/02/%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/"/>
    <id>https://www.junglezero.top/2019/04/02/笔记（4）/</id>
    <published>2019-04-02T01:48:00.000Z</published>
    <updated>2019-04-08T13:12:02.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程组（Thread-Group）"><a href="#线程组（Thread-Group）" class="headerlink" title="线程组（Thread Group）"></a>线程组（Thread Group）</h1><blockquote><p><strong>public class ThreadGroup</strong><br>extends Object<br>implements Thread.UncaughtExceptionHandler</p></blockquote><p>A thread group represents a set of threads. In addition, a thread group can also include other thread groups. The thread groups form a tree in which every thread group except the initial thread group has a parent.</p><blockquote></blockquote><p>A thread is allowed to access information about its own thread group, but not to access information about its thread group’s parent thread group or any other thread groups.</p><p>从上面的文档可以得知：<br>线程组也是一个树形<br>ThreadGroup中，也有一系列的生成和销毁方法</p><h1 id="线程池-（ThreadPool）"><a href="#线程池-（ThreadPool）" class="headerlink" title="线程池 （ThreadPool）"></a>线程池 （ThreadPool）</h1><h2 id="自己实现"><a href="#自己实现" class="headerlink" title="自己实现"></a>自己实现</h2><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>任务队列：把等待执行的任务储存起来</li><li>拒绝策略：任务队列应该是有大小的，当有过多的任务申请提交时，应当有拒绝策略，方法有：抛出异常，直接丢弃，进入阻塞状态，放入临时队列</li><li>初始化值：初始时线程池大小（最小）</li><li>运行时：活跃任务多的时候的大小</li><li>最大值：最多任务数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线程组（Thread-Group）&quot;&gt;&lt;a href=&quot;#线程组（Thread-Group）&quot; class=&quot;headerlink&quot; title=&quot;线程组（Thread Group）&quot;&gt;&lt;/a&gt;线程组（Thread Group）&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="java多线程学习笔记" scheme="https://www.junglezero.top/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java多线程" scheme="https://www.junglezero.top/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>最长回文串的几个解法</title>
    <link href="https://www.junglezero.top/2019/04/01/%E5%9B%9E%E6%96%87%E4%B8%B2%E7%9A%84%E5%87%A0%E4%B8%AA%E8%A7%A3%E6%B3%95-1/"/>
    <id>https://www.junglezero.top/2019/04/01/回文串的几个解法-1/</id>
    <published>2019-04-01T15:00:52.000Z</published>
    <updated>2019-04-08T11:31:00.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解法一-动态规划"><a href="#解法一-动态规划" class="headerlink" title="解法一 动态规划"></a>解法一 动态规划</h1><p>应当发现，如果一个字符串是回文串，那么在其两端加上相同的字母也是回文串<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = s.length();</span><br><span class="line">  String res = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">      dp[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; (j - i &lt; <span class="number">3</span> || dp[i + <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">            </span><br><span class="line">      <span class="keyword">if</span> (dp[i][j] &amp;&amp; (res == <span class="keyword">null</span> || j - i + <span class="number">1</span> &gt; res.length())) &#123;</span><br><span class="line">        res = s.substring(i, j + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解法一-动态规划&quot;&gt;&lt;a href=&quot;#解法一-动态规划&quot; class=&quot;headerlink&quot; title=&quot;解法一 动态规划&quot;&gt;&lt;/a&gt;解法一 动态规划&lt;/h1&gt;&lt;p&gt;应当发现，如果一个字符串是回文串，那么在其两端加上相同的字母也是回文串&lt;br&gt;&lt;figure
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java多线程学习（3）</title>
    <link href="https://www.junglezero.top/2019/03/31/a%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%EF%BC%883%EF%BC%89/"/>
    <id>https://www.junglezero.top/2019/03/31/a多线程学习（3）/</id>
    <published>2019-03-31T07:50:00.000Z</published>
    <updated>2019-04-02T01:42:30.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java中线程间的死锁"><a href="#java中线程间的死锁" class="headerlink" title="java中线程间的死锁"></a>java中线程间的死锁</h1><p>实例：<br>服务1<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Service_2 service_2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Service_1</span><span class="params">(Service_2 service_2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service_2 = service_2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">"m1"</span>);</span><br><span class="line">            service_2.s1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">"m2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>服务2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service_2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Service_1 service_1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">"s1=========="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">s2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">"s2=========="</span>);</span><br><span class="line">            service_1.m2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setService_1</span><span class="params">(Service_1 service_1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service_1 = service_1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试主函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Service_2 service_2 = <span class="keyword">new</span> Service_2();</span><br><span class="line">        Service_1 service_1 = <span class="keyword">new</span> Service_1(service_2);</span><br><span class="line">        service_2.setService_1(service_1);</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    service_1.m1();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">                    service_2.s2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><img src="/upload/pasted-269.png" alt="upload successful"></p><p>分析：两个线程已经陷入了死锁（互相等待互相结束）</p><h1 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h1><h2 id="Object-的两个方法"><a href="#Object-的两个方法" class="headerlink" title="Object 的两个方法"></a>Object 的两个方法</h2><h3 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h3><blockquote><p>public final void wait()<br>                throws InterruptedException</p></blockquote><p>Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object. In other words, this method behaves exactly as if it simply performs the call wait(0).</p><blockquote></blockquote><p>The current thread must own this object’s monitor. The thread releases ownership of this monitor and waits until another thread notifies threads waiting on this object’s monitor to wake up either through a call to the notify method or the notifyAll method. The thread then waits until it can re-obtain ownership of the monitor and resumes execution.</p><blockquote></blockquote><p>As in the one argument version, interrupts and spurious wakeups are possible, and this method should always be used in a loop:</p><pre><code>synchronized (obj) {    while (&lt;condition does not hold&gt;)        obj.wait();    ... // Perform action appropriate to condition}</code></pre><blockquote><p>This method should only be called by a thread that is the owner of this object’s monitor. See the notify method for a description of the ways in which a thread can become the owner of a monitor.</p></blockquote><p>从上面的文档可以得知<br>当线程执行wait()时，会把当前的锁释放，然后让出CPU，进入等待状态。<br>当执行notify/notifyAll方法时，会唤醒一个处于等待该 对象锁 的线程，然后继续往下执行，直到执行完退出对象锁锁住的区域（synchronized修饰的代码块）后再释放锁。<br>并且也提供了一种建议的使用方式</p><h4 id="notify-notifyAll"><a href="#notify-notifyAll" class="headerlink" title="notify/notifyAll"></a>notify/notifyAll</h4><blockquote><p>public final void notify()</p></blockquote><p>Wakes up a single thread that is waiting on this object’s monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs at the discretion of the implementation. A thread waits on an object’s monitor by calling one of the wait methods.</p><blockquote></blockquote><p>The awakened thread will not be able to proceed until the current thread relinquishes the lock on this object. The awakened thread will compete in the usual manner with any other threads that might be actively competing to synchronize on this object; for example, the awakened thread enjoys no reliable privilege or disadvantage in being the next thread to lock this object.</p><blockquote></blockquote><p>This method should only be called by a thread that is the owner of this object’s monitor. A thread becomes the owner of the object’s monitor in one of three ways:</p><blockquote></blockquote><pre><code>- By executing a synchronized instance method of that object.- By executing the body of a synchronized statement that synchronizes on the object.- For objects of type Class, by executing a synchronized static method of that class. </code></pre><blockquote></blockquote><p>Only one thread at a time can own an object’s monitor.</p><p>意思很明确：唤醒某个在当前锁下wait的线程，对于notify和notifyAll的区别就是，假设有多个线程正在当前的的锁下wait，notify只会唤醒其中任意一个线程，而notifyAll则会唤醒所有正在wait的线程<br>唤醒之后，会继续接着wait执行（这就是为什么外层要用while循环而不是if）</p><h2 id="生产-消费实例"><a href="#生产-消费实例" class="headerlink" title="生产/消费实例"></a>生产/消费实例</h2><p>生产者消费者是典型的线程通信的例子，只要缓冲区未充满，生产者就会一直进行生产；只要缓冲区不为空，消费者就一直消费<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduceConsumerVersion3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对产品进行编号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//当前缓冲池产品的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//监视器，同步锁</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> Object LOCK = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">//缓冲池的大小</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">int</span> fullsize=<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">            <span class="keyword">while</span> (number==fullsize) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LOCK.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(<span class="string">"P-&gt;"</span> + i);</span><br><span class="line">            number++;</span><br><span class="line">            LOCK.notifyAll();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">            <span class="keyword">while</span> (number==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LOCK.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"C-&gt;"</span> +( i-number+<span class="number">1</span>));</span><br><span class="line">            number--;</span><br><span class="line">            LOCK.notifyAll();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProduceConsumerVersion3 pc = <span class="keyword">new</span> ProduceConsumerVersion3();</span><br><span class="line">        Stream.of(<span class="string">"P1"</span>, <span class="string">"P2"</span>, <span class="string">"P3"</span>).forEach(n -&gt;</span><br><span class="line">                <span class="keyword">new</span> Thread(n) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                            pc.produce();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;.start()</span><br><span class="line">        );</span><br><span class="line">        Stream.of(<span class="string">"C1"</span>, <span class="string">"C2"</span>, <span class="string">"C3"</span>, <span class="string">"C4"</span>).forEach(n -&gt;</span><br><span class="line">                <span class="keyword">new</span> Thread(n) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                            pc.consume();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;.start()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="涉及到限制当前运行线程数量的实例"><a href="#涉及到限制当前运行线程数量的实例" class="headerlink" title="涉及到限制当前运行线程数量的实例"></a>涉及到限制当前运行线程数量的实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CaptureService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">private</span> LinkedList&lt;Control&gt; CONTROLS = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_WORKER = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Thread&gt; worker = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.asList(<span class="string">"M1"</span>, <span class="string">"M2"</span>, <span class="string">"M3"</span>, <span class="string">"M4"</span>, <span class="string">"M5"</span>, <span class="string">"M6"</span>, <span class="string">"M7"</span>, <span class="string">"M8"</span>, <span class="string">"M9"</span>, <span class="string">"M10"</span>).stream()</span><br><span class="line">                .map(CaptureService::createCaptureThread)</span><br><span class="line">                .forEach(t -&gt; &#123;</span><br><span class="line">                    t.start();</span><br><span class="line">                    worker.add(t);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        worker.stream().forEach(t -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Optional.of(<span class="string">"All of capture work finished"</span>).ifPresent(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Thread <span class="title">createCaptureThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Optional.of(<span class="string">"The worker ["</span> + Thread.currentThread().getName() + <span class="string">"] BEGIN capture data."</span>)</span><br><span class="line">                    .ifPresent(System.out::println);</span><br><span class="line">            <span class="keyword">synchronized</span> (CONTROLS) &#123;</span><br><span class="line">                <span class="keyword">while</span> (CONTROLS.size() &gt; MAX_WORKER) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        CONTROLS.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                CONTROLS.addLast(<span class="keyword">new</span> Control());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Optional.of(<span class="string">"The worker ["</span> + Thread.currentThread().getName() + <span class="string">"] is working..."</span>)</span><br><span class="line">                    .ifPresent(System.out::println);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (CONTROLS) &#123;</span><br><span class="line">                Optional.of(<span class="string">"The worker ["</span> + Thread.currentThread().getName() + <span class="string">"] END capture data."</span>)</span><br><span class="line">                        .ifPresent(System.out::println);</span><br><span class="line">                CONTROLS.removeFirst();</span><br><span class="line">                CONTROLS.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设计思路是用一个linkedlist来作为锁，在线程的run方法中，有两个地方需要进行锁操作，一个是开始时判定线程数量需要判断是否进行wait（如果不需要，一个元素加入linkedlist），另一个是当前线程结束需要让出运行（linkedlist删除元素，并唤醒等待的线程）</p><h2 id="sleep和wait的区别"><a href="#sleep和wait的区别" class="headerlink" title="sleep和wait的区别"></a>sleep和wait的区别</h2><ul><li>sleep是Thread的方法，wait是Object的方法</li><li><p>sleep不会放锁，wait会放锁<br>解释：在一个synchronized方法块中，调用sleep的话，一个进程进入该方法的sleep这部分，其他线程是进不来的，而在锁中调用wait的话，其他进程是可以进来的</p></li><li><p>sleep不需要依附于锁，但是wait需要</p></li></ul><p>举例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      m2();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              System.out.println(<span class="string">"The Thread "</span> + Thread.currentThread().getName() + <span class="string">" enter."</span>);</span><br><span class="line">              LOCK.wait();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>会抛异常：java.lang.IllegalMonitorStateException</p><ul><li>sleep不需要唤醒操作，但是wait需要</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java中线程间的死锁&quot;&gt;&lt;a href=&quot;#java中线程间的死锁&quot; class=&quot;headerlink&quot; title=&quot;java中线程间的死锁&quot;&gt;&lt;/a&gt;java中线程间的死锁&lt;/h1&gt;&lt;p&gt;实例：&lt;br&gt;服务1&lt;br&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="java多线程学习" scheme="https://www.junglezero.top/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="java多线程" scheme="https://www.junglezero.top/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程学习（2）</title>
    <link href="https://www.junglezero.top/2019/03/29/ava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/"/>
    <id>https://www.junglezero.top/2019/03/29/ava多线程学习（2）/</id>
    <published>2019-03-29T01:13:00.000Z</published>
    <updated>2019-03-31T05:50:05.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-Thread-中涉及的函数"><a href="#java-Thread-中涉及的函数" class="headerlink" title="java Thread 中涉及的函数"></a>java Thread 中涉及的函数</h1><h2 id="Daemon相关（受保护线程）"><a href="#Daemon相关（受保护线程）" class="headerlink" title="Daemon相关（受保护线程）"></a>Daemon相关（受保护线程）</h2><p>官方文档说明：</p><blockquote><p>public final void setDaemon(boolean on)</p><p>Marks this thread as either a daemon thread or a user thread. The Java Virtual Machine exits when the only threads running are all daemon threads.</p><p>This method must be invoked before the thread is started.</p></blockquote><p>文档中有两个需要注意的地方</p><ul><li>当jvm中只有保护线程在运行时，jvm退出</li><li>不能在一个线程已经启动后再把其标记为受保护线程</li></ul><h3 id="两种线程的说明"><a href="#两种线程的说明" class="headerlink" title="两种线程的说明"></a>两种线程的说明</h3><ul><li><p>用户线程: 用户线程可以简单的理解为用户定义的线程,当然包括main线程</p></li><li><p>daemon线程: daemon线程是为我们创建的用户线程提供服务的线程,比如说jvm的GC等等,这样的线程有一个非常明显的特征: 当用户线程运行结束的时候,daemon线程将会自动退出，由于daemon线程的终止条件是当前是否存在用户线程,所以我们不能指派daemon线程来进行一些业务操作,而只能服务用户线程，daemon线程创建的子线程任然是daemon线程.</p></li></ul><h3 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThread2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Thread innerThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"Do some thing for health check."</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">100_000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            innerThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            innerThread.start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1_000</span>);</span><br><span class="line">                System.out.println(<span class="string">"T thread finish done."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明： 首先创建线程对象t，其次在线程内部创建线程对象innerThread，并且在启动之前将其设置为受保护线程，可以发现，innerThread中是一个死循环，而t只是一个休眠一秒的线程</p><p>运行结果：</p><p><img src="/upload/pasted-263.png" alt="upload successful"><br>这也就说明了当用户线程(t)执行完毕后，它的子受保护线程也会停止</p><h2 id="线程ID"><a href="#线程ID" class="headerlink" title="线程ID"></a>线程ID</h2><p>官方文档说明：</p><blockquote><p><strong>public long getId()</strong></p><p>Returns the identifier of this Thread. The thread ID is a positive long number generated when this thread was created. The thread ID is unique and remains unchanged during its lifetime. When a thread is terminated, this thread ID may be reused.</p><p><strong>Returns</strong>:<br>    this thread’s ID.</p></blockquote><p>几点注意：</p><ul><li>ID是一个正的long形</li><li>ID独一无二且保持不变</li></ul><p>源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextThreadID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ++threadSeqNumber;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>可见ID在实现过程也是逐步累加</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>记住一点，优先级高不一定优先，优先级低不一定落后执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                Optional.of(Thread.currentThread().getName() + <span class="string">"-Index"</span> + i).ifPresent(System.out::println);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                Optional.of(Thread.currentThread().getName() + <span class="string">"-Index"</span> + i).ifPresent(System.out::println);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line"></span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                Optional.of(Thread.currentThread().getName() + <span class="string">"-Index"</span> + i).ifPresent(System.out::println);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t3.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：</p><p><img src="/upload/pasted-265.png" alt="upload successful"></p><h2 id="joint-方法"><a href="#joint-方法" class="headerlink" title="joint 方法"></a>joint 方法</h2><p>官方文档说明：</p><blockquote><p><strong>void     join()</strong><br>Waits for this thread to die.<br><strong>void     join(long millis)</strong><br>Waits at most millis milliseconds for this thread to die.<br><strong>void     join(long millis, int nanos)</strong><br>Waits at most millis milliseconds plus nanos nanoseconds for this thread to die.</p></blockquote><p>理解：应当是让当前线程（父线程）等待此线程（子线程，调用join的线程）结束，当前线程才执行</p><p>实例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadJoin</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            IntStream.range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">                    .forEach(i -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"-&gt;"</span> + i));</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            IntStream.range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">                    .forEach(i -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"-&gt;"</span> + i));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        Optional.of(<span class="string">"All of tasks finish done."</span>).ifPresent(System.out::println);</span><br><span class="line">        IntStream.range(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">                .forEach(i -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"-&gt;"</span> + i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：</p><p><img src="/upload/pasted-267.png" alt="upload successful"></p><p>分析：<br>t1t2两个子线程，在start之后调用join，就使得当前线程（主线程）需要等待两个线程的结束后才能执行</p><p>问题：若当前线程调用join<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().join();</span><br></pre></td></tr></table></figure></p><p>会陷入无限等待状态</p><p>用途：利用join的特性：父线程需要等待子线程结束才可执行，就可以应用到一些有明确先后顺序的线程交互中去</p><h2 id="interrupt方法"><a href="#interrupt方法" class="headerlink" title="interrupt方法"></a>interrupt方法</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><blockquote><p><strong>void     interrupt()</strong><br>Interrupts this thread.<br><strong>static boolean     interrupted()</strong><br>Tests whether the current thread has been interrupted.</p></blockquote><blockquote><p><strong>public void interrupt()</strong></p><p>Interrupts this thread.</p></blockquote><p>Unless the current thread is interrupting itself, which is always permitted, the checkAccess method of this thread is invoked, which may cause a SecurityException to be thrown.</p><blockquote></blockquote><p>If this thread is blocked in an invocation of the wait(), wait(long), or wait(long, int) methods of the Object class, or of the join(), join(long), join(long, int), sleep(long), or sleep(long, int), methods of this class, then its interrupt status will be cleared and it will receive an InterruptedException.</p><blockquote></blockquote><p>If this thread is blocked in an I/O operation upon an InterruptibleChannel then the channel will be closed, the thread’s interrupt status will be set, and the thread will receive a ClosedByInterruptException.</p><blockquote></blockquote><p>If this thread is blocked in a Selector then the thread’s interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector’s wakeup method were invoked.</p><blockquote></blockquote><p>If none of the previous conditions hold then this thread’s interrupt status will be set.</p><blockquote></blockquote><p>Interrupting a thread that is not alive need not have any effect.</p><blockquote></blockquote><p><strong>Throws:</strong><br>    SecurityException - if the current thread cannot modify this thread</p><p>通过文档的介绍知道几点</p><ul><li>运行的权限问题</li><li>对于运行了sleep，wait，join(让父线程进入堵塞状态)等陷入堵塞状态的方法，若调用interrupt，会把当前的“中断标记”清除，然后抛出InterruptedException.</li><li>对于io堵塞的线程，调用interrupt方法会将“中断标记”设为true，并且抛出ClosedByInterruptException</li><li>如果不是处于堵塞状态，调用interrupt会将“中断标记”设为true</li></ul><h3 id="终止某个线程"><a href="#终止某个线程" class="headerlink" title="终止某个线程"></a>终止某个线程</h3><h4 id="设置一个标志位"><a href="#设置一个标志位" class="headerlink" title="设置一个标志位"></a>设置一个标志位</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">ThreadClose</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置的标志位</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> start = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//在run中循环</span></span><br><span class="line">            <span class="keyword">while</span> (start) &#123;</span><br><span class="line">                <span class="comment">//业务逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.start = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">        worker.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        worker.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用interrupt"><a href="#使用interrupt" class="headerlink" title="使用interrupt"></a>使用interrupt</h4><ul><li>用isInterrupt()进行判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCloseGraceful2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!isInterrupted())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//业务逻辑</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//模拟线程因为wait，sleep，join而陷入休眠</span></span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            System.out.println(<span class="string">"输出结果"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Worker worker = <span class="keyword">new</span> Worker();</span><br><span class="line">        worker.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        worker.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在一个问题，当把sleep移出while循环后，在进行interrupt，首先会抛异常，但是while循环不会终止，因为根据官方文档说明的，遇见这种堵塞状态，“终止标记”会被消除（重置为false），因此循环不会退出</p><h4 id="利用deamon线程的特性"><a href="#利用deamon线程的特性" class="headerlink" title="利用deamon线程的特性"></a>利用deamon线程的特性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread executeThread;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> finished = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        executeThread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//在执行线程中设置一个守护线程</span></span><br><span class="line">                Thread runner = <span class="keyword">new</span> Thread(task);</span><br><span class="line">                runner.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                runner.start();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    runner.join();</span><br><span class="line">                    <span class="comment">//当子线程（runner，守护线程执行完毕后）。将结束标记设置为true</span></span><br><span class="line">                    finished = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">//e.printStackTrace();</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        executeThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">long</span> mills)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (!finished) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((System.currentTimeMillis() - currentTime) &gt;= mills) &#123;</span><br><span class="line">                System.out.println(<span class="string">"任务超时，需要结束他!"</span>);</span><br><span class="line">                <span class="comment">//关闭执行线程，则守护线程的子线程就一定关闭了</span></span><br><span class="line">                executeThread.interrupt();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                executeThread.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"执行线程被打断!"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        finished = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>在java中，每一个对象有且仅有一个同步锁。这也意味着，同步锁是依赖于对象而存在。<br>当我们调用某对象的synchronized方法时，就获取了该对象的同步锁。例如，synchronized(obj)就获取了“obj这个对象”的同步锁。<br>不同线程对同步锁的访问是互斥的。也就是说，某时间点，对象的同步锁只能被一个线程获取到！通过同步锁，我们就能在多线程中，实现对“对象/方法”的互斥访问。 例如，现在有两个线程A和线程B，它们都会访问“对象obj的同步锁”。假设，在某一时刻，线程A获取到“obj的同步锁”并在执行一些操作；而此时，线程B也企图获取“obj的同步锁” —— 线程B会获取失败，它必须等待，直到线程A释放了“该对象的同步锁”之后线程B才能获取到“obj的同步锁”从而才可以运行。<br>应当注意：同步锁应当尽量作用在数据出现线程不安全的地方，如果把它作用在run方法，实际上一个多线程的实现就会变成一个单线程</p><h3 id="几种使用方式"><a href="#几种使用方式" class="headerlink" title="几种使用方式"></a>几种使用方式</h3><ol><li><p>锁“this”对象的某部分代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//readonly shared data.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//this</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">ticket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; MAX)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">" 的号码是:"</span> + (index++));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>锁一个obj对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//readonly shared data.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX = <span class="number">500</span>;</span><br><span class="line">    <span class="comment">//添加一个obj对象</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">final</span>  <span class="keyword">static</span>  Object OBJ=<span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//this</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">ticket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对obj进行上锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (OBJ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; MAX)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">" 的号码是:"</span> + (index++));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  以上两种方式效果是一样的，都能够达成同步锁的要求</p><ol start="3"><li>对某个方法上锁<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//readonly shared data.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//this</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将其改为synchronized方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">ticket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; MAX)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">" 的号码是:"</span> + (index++));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="同步锁的使用"><a href="#同步锁的使用" class="headerlink" title="同步锁的使用"></a>同步锁的使用</h3><ul><li>当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的该“synchronized方法”或者“synchronized代码块”的访问将被阻塞。</li><li>当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程仍然可以访问“该对象”的非同步代码块。</li><li>当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的其他的“synchronized方法”或者“synchronized代码块”的访问将被阻塞。</li></ul><h4 id="演示1："><a href="#演示1：" class="headerlink" title="演示1："></a>演示1：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>); <span class="comment">// 休眠100ms</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" loop "</span> + i);  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Runnable demo = <span class="keyword">new</span> MyRunable();     <span class="comment">// 新建“Runnable对象”</span></span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(demo, <span class="string">"t1"</span>);  <span class="comment">// 新建“线程t1”, t1是基于demo这个Runnable对象</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(demo, <span class="string">"t2"</span>);  <span class="comment">// 新建“线程t2”, t2是基于demo这个Runnable对象</span></span><br><span class="line">        t1.start();                          <span class="comment">// 启动“线程t1”</span></span><br><span class="line">        t2.start();                          <span class="comment">// 启动“线程t2” </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t1 loop 0</span><br><span class="line">t1 loop 1</span><br><span class="line">t1 loop 2</span><br><span class="line">t1 loop 3</span><br><span class="line">t1 loop 4</span><br><span class="line">t2 loop 0</span><br><span class="line">t2 loop 1</span><br><span class="line">t2 loop 2</span><br><span class="line">t2 loop 3</span><br><span class="line">t2 loop 4</span><br></pre></td></tr></table></figure></p><p>分析：<br>在run方法中设置了针对Runable对象的“同步锁”，一旦t1开始执行run方法，t2若要执行，就会进入阻塞状态，需要等到t1执行完毕才会执行</p><h4 id="演示2"><a href="#演示2" class="headerlink" title="演示2"></a>演示2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 含有synchronized同步块的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>); <span class="comment">// 休眠100ms</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" synMethod loop "</span> + i);  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非同步的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nonSynMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" nonSynMethod loop "</span> + i);  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">final</span> Count count = <span class="keyword">new</span> Count();</span><br><span class="line">        <span class="comment">// 新建t1, t1会调用“count对象”的synMethod()方法</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        count.synMethod();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建t2, t2会调用“count对象”的nonSynMethod()方法</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        count.nonSynMethod();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="string">"t2"</span>);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.start();  <span class="comment">// 启动t1</span></span><br><span class="line">        t2.start();  <span class="comment">// 启动t2</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t1 synMethod loop 0</span><br><span class="line">t2 nonSynMethod loop 0</span><br><span class="line">t1 synMethod loop 1</span><br><span class="line">t2 nonSynMethod loop 1</span><br><span class="line">t1 synMethod loop 2</span><br><span class="line">t2 nonSynMethod loop 2</span><br><span class="line">t1 synMethod loop 3</span><br><span class="line">t2 nonSynMethod loop 3</span><br><span class="line">t1 synMethod loop 4</span><br><span class="line">t2 nonSynMethod loop 4</span><br></pre></td></tr></table></figure></p><p>结果分析：<br>主线程中新建了两个子线程t1和t2。t1会调用count对象的synMethod()方法，该方法内含有同步块；而t2则会调用count对象的nonSynMethod()方法，该方法不是同步方法。t1运行时，虽然调用synchronized(this)获取“count的同步锁”；但是并没有造成t2的阻塞，因为t2没有用到“count”同步锁。</p><h4 id="演示3"><a href="#演示3" class="headerlink" title="演示3"></a>演示3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 含有synchronized同步块的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>); <span class="comment">// 休眠100ms</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" synMethod loop "</span> + i);  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也包含synchronized同步块的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nonSynMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" nonSynMethod loop "</span> + i);  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">final</span> Count count = <span class="keyword">new</span> Count();</span><br><span class="line">        <span class="comment">// 新建t1, t1会调用“count对象”的synMethod()方法</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        count.synMethod();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建t2, t2会调用“count对象”的nonSynMethod()方法</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        count.nonSynMethod();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="string">"t2"</span>);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.start();  <span class="comment">// 启动t1</span></span><br><span class="line">        t2.start();  <span class="comment">// 启动t2</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t1 synMethod loop 0</span><br><span class="line">t1 synMethod loop 1</span><br><span class="line">t1 synMethod loop 2</span><br><span class="line">t1 synMethod loop 3</span><br><span class="line">t1 synMethod loop 4</span><br><span class="line">t2 nonSynMethod loop 0</span><br><span class="line">t2 nonSynMethod loop 1</span><br><span class="line">t2 nonSynMethod loop 2</span><br><span class="line">t2 nonSynMethod loop 3</span><br><span class="line">t2 nonSynMethod loop 4</span><br></pre></td></tr></table></figure></p><p>分析：<br>主线程中新建了两个子线程t1和t2。t1和t2运行时都调用synchronized(this)，这个this是Count对象(count)，而t1和t2共用count。因此，在t1运行时，t2会被阻塞，等待t1运行释放“count对象的同步锁”，t2才能运行。</p><h4 id="一个特例：static方法的锁"><a href="#一个特例：static方法的锁" class="headerlink" title="一个特例：static方法的锁"></a>一个特例：static方法的锁</h4><p>众所周知，static方法是基于一个类使用的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SychronizedStatic</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态且上锁方法m1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"进入加锁static方法的是 "</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1_000L</span>);</span><br><span class="line">                System.out.println(<span class="string">"静态方法m1暂停一秒"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上锁方法m2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"m2 "</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10_000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SychronizedStaticTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="string">"T1"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                SychronizedStatic s1=<span class="keyword">new</span> SychronizedStatic();</span><br><span class="line">                s1.m1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="string">"T2"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                SychronizedStatic s2=<span class="keyword">new</span> SychronizedStatic();</span><br><span class="line">                s2.m1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="string">"T3"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                SychronizedStatic s3=<span class="keyword">new</span> SychronizedStatic();</span><br><span class="line">                s3.m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>进入加锁static方法的是 T1<br>m2 T3<br>静态方法m1暂停一秒<br>静态方法m1暂停一秒<br>静态方法m1暂停一秒<br>静态方法m1暂停一秒<br>静态方法m1暂停一秒<br>进入加锁static方法的是 T2<br>静态方法m1暂停一秒<br>静态方法m1暂停一秒<br>静态方法m1暂停一秒<br>静态方法m1暂停一秒<br>静态方法m1暂停一秒</p></blockquote><p>结果分析：<br>t1,t2和t3的比较说明，对于t1,t2来说，他们的方法锁的是“类”（SychronizedStatic.class），而t3的方法锁的是实例“s3”;因此并没有锁在一起可以同时运行；对于t1,t2，虽然调用m1时，用的是不同的实例，但是m1是static方法，且锁的是“类”,故T1调用时，t2会发生堵塞</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-Thread-中涉及的函数&quot;&gt;&lt;a href=&quot;#java-Thread-中涉及的函数&quot; class=&quot;headerlink&quot; title=&quot;java Thread 中涉及的函数&quot;&gt;&lt;/a&gt;java Thread 中涉及的函数&lt;/h1&gt;&lt;h2 id=&quot;D
      
    
    </summary>
    
      <category term="java多线程学习笔记" scheme="https://www.junglezero.top/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java多线程" scheme="https://www.junglezero.top/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程学习（1）</title>
    <link href="https://www.junglezero.top/2019/03/27/va%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
    <id>https://www.junglezero.top/2019/03/27/va多线程学习（1）/</id>
    <published>2019-03-27T10:42:00.000Z</published>
    <updated>2019-03-31T13:09:48.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程相关概念复习（操作系统）"><a href="#线程相关概念复习（操作系统）" class="headerlink" title="线程相关概念复习（操作系统）"></a>线程相关概念复习（操作系统）</h1><h2 id="并发和并行的区别"><a href="#并发和并行的区别" class="headerlink" title="并发和并行的区别"></a>并发和并行的区别</h2><p>并行：两个或多个事件，在同一时刻发生<br>并发：两个或者多个事件在同一时间间隔发生<br>比如在一个单处理机系统中，每一时刻只能有一个程序运行，在一秒的时间内，0~15ms运行A,15~30ms运行B.30~45ms运行C,45~60ms运行D，就可以说ABCD是并发的</p><h2 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h2><p>为了多个程序能并发执行，以提高资源利用率和系统吞吐量，操作系统引入了进程的概念<br>进程，是指系统中能独立运行并作为资源分配的基本单位，是由一组机器指令，数据和堆栈组成，是一个能独立运行的实体</p><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><p><img src="/upload/pasted-259.png" alt="upload successful"></p><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><p>为了减少程序在并发执行时所付出的时空开销，使os具有更好的并发性，引入了线程的概念<br>在引入线程的os中，已经把线程作为调度和分派的基本单位，因而线程是能独立运行的基本单位；不仅进程可以并发执行，一个进程中的多个线程也可以并发执行，不同进程中的线程也能并发执行，线程并不拥有系统资源，而是仅维持一点自身必须的资源</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p><img src="/upload/pasted-260.png" alt="upload successful"></p><ol><li><strong>新建状态(New)</strong>         : 线程对象被创建后，就进入了新建状态。例如，Thread thread = new Thread()。</li><li><strong>就绪状态(Runnable)</strong>: 也被称为“可执行状态”。线程对象被创建后，其它线程调用了该对象的start()方法，从而来启动该线程。例如，thread.start()。处于就绪状态的线程，随时可能被CPU调度执行。</li><li><strong>运行状态(Running)</strong> : 线程获取CPU权限进行执行。需要注意的是，线程只能从就绪状态进入到运行状态。</li><li><strong>阻塞状态(Blocked)</strong>  : 阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<ul><li>等待阻塞 – 通过调用线程的wait()方法，让线程等待某工作的完成。</li><li>同步阻塞 – 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态。</li><li>其他阻塞 – 通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</li></ul></li><li><strong>死亡状态(Dead)</strong>    : 线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li></ol><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p><img src="/upload/pasted-268.png" alt="upload successful"><br>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程</p><h1 id="java线程"><a href="#java线程" class="headerlink" title="java线程"></a>java线程</h1><h2 id="简单认识java线程"><a href="#简单认识java线程" class="headerlink" title="简单认识java线程"></a>简单认识java线程</h2><p>java官方文档中，一段对于Thread api的描述</p><blockquote><p>A thread is a thread of execution in a program. The Java Virtual Machine allows an application to have multiple threads of execution running concurrently.</p><p>Every thread has a priority. Threads with higher priority are executed in preference to threads with lower priority. Each thread may or may not also be marked as a daemon. When code running in some thread creates a new Thread object, the new thread has its priority initially set equal to the priority of the creating thread, and is a daemon thread if and only if the creating thread is a daemon.</p><p>When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named main of some designated class). </p></blockquote><p>从上面的概念中可以知道，java支持多线程，且线程有优先级的概念，以及受保护线程和main线程的概念<br>一段简单的入门程序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryConcurrency</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(<span class="string">"READ-Thread"</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                println(Thread.currentThread().getName());<span class="comment">//main</span></span><br><span class="line">                readFromDataBase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//内部匿名类</span></span><br><span class="line">     <span class="keyword">new</span> Thread(<span class="string">"WRITE-Thread"</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                writeDataToFile();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFromDataBase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//read data from database and handle it.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            println(<span class="string">"Begin read data from db."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">30L</span>);</span><br><span class="line">            println(<span class="string">"Read data done and start handle it."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"The data handle finish and successfully."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeDataToFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            println(<span class="string">"Begin write data to file."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span> * <span class="number">20L</span>);</span><br><span class="line">            println(<span class="string">"Write data done and start handle it."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"The data handle finish and successfully."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从这个例子中，可以学习几点</p><ul><li>java可以通过继承Thread并重写run方法来支持线程的运行</li><li>创建线程对象后，需要运行（start()）才能使线程跑起来</li></ul><h2 id="start-方法"><a href="#start-方法" class="headerlink" title="start()方法"></a>start()方法</h2><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>来自官方文档的说明</p><blockquote><p>Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.</p><p>The result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method).</p><p>It is never legal to start a thread more than once. In particular, a thread may not be restarted once it has completed execution.</p></blockquote><p>从这段说明中，可以获得以下信息</p><ul><li>start()方法的作用是使当前线程开始执行，此时jvm会调用该线程下的run()方法</li><li>执行之后，会有两个线程进入并发的执行状态：调用start()方法的线程（当前线程），执行下属run()方法的线程（新线程）</li><li>一个线程要是start（）两次是会抛异常的</li></ul><p>关于当前线程和新线程的问题<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(<span class="string">"READ-Thread"</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//获取当前线程的名字</span></span><br><span class="line">                println(Thread.currentThread().getName());</span><br><span class="line">                readFromDataBase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        t.start();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这个结果输出的是“READ-Thread”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(<span class="string">"READ-Thread"</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//获取当前线程的名字</span></span><br><span class="line">                println(Thread.currentThread().getName());</span><br><span class="line">                readFromDataBase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//与上一个例子的不同之处</span></span><br><span class="line">        t.run();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个输出的是main</p><p>由此可以得出结论：创建一个新线程后，只有执行start()方法，才算是执行了这个新线程</p><h3 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This method is not invoked for the main method thread or "system"</span></span><br><span class="line"><span class="comment">         * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">         * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * A zero status value corresponds to state "NEW".</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">         * so that it can be added to the group's list of threads</span></span><br><span class="line"><span class="comment">         * and the group's unstarted count can be decremented. */</span></span><br><span class="line">        group.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start0();</span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                  it will be passed up the call stack */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If this thread was constructed using a separate</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;Runnable&lt;/code&gt; object's &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class="line"><span class="comment">     * otherwise, this method does nothing and returns.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #start()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #stop()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从源码可以看出，start()方法内部首先验证当前调用的线程是否已经执行，如果已经执行，则抛出异常，然后就去执行本地方法start0()，在start0()中，会调用run()方法</p><h3 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h3><p>对于start()和run()方法的这种设计，我们学习到一种“模板”的思想，即start()方法实际上就是已经定好的模板，而对于我们自己使用的情况下，我们覆盖run()方法实现自己的业务逻辑</p><h2 id="java线程实现的两种方式"><a href="#java线程实现的两种方式" class="headerlink" title="java线程实现的两种方式"></a>java线程实现的两种方式</h2><p>众所周知的两种方式：<br>实现Runable 接口<br>继承Thread 类</p><p>下面模拟一个银行叫号系统进行说明</p><h3 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h3><p>首先写一个窗口的线程实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketWindow</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TicketWindow</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index &lt;= MAX) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"柜台："</span> + name + <span class="string">"当前的号码是:"</span> + (index++));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主函数，在主函数中，开辟三个线程进行叫号的模拟<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        TicketWindow ticketWindow1 = <span class="keyword">new</span> TicketWindow(<span class="string">"一号柜台"</span>);</span><br><span class="line">        ticketWindow1.start();</span><br><span class="line"></span><br><span class="line">        TicketWindow ticketWindow2 = <span class="keyword">new</span> TicketWindow(<span class="string">"二号柜台"</span>);</span><br><span class="line">        ticketWindow2.start();</span><br><span class="line"></span><br><span class="line">        TicketWindow ticketWindow3 = <span class="keyword">new</span> TicketWindow(<span class="string">"三号柜台"</span>);</span><br><span class="line">        ticketWindow3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><p><img src="/upload/pasted-261.png" alt="upload successful"></p><p>一些思考 </p><ol><li><p>多个线程共享一个变量、<br>从这里可以看出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>关键是在static关键字上，使用static关键字定义的变量。static可以修饰变量和方法，也有static静态代码块。被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它<strong>不依赖类特定的实例</strong>，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它的类的对象时，不生成static变量的副本，而是类的所有实例共享同一个static变量。<br>假设没有static，那么作为一个普通的成员变量，伴随着每次新的实例的产生，会在堆上分配空间，即此时这个变量是和对象实例绑定的</p></li><li><p>输出是乱序的</p></li><li><p>用static设置静态变量有一个问题，该变量会伴随着jvm的整个过程，生命周期过长</p></li></ol><h3 id="实现Runable接口"><a href="#实现Runable接口" class="headerlink" title="实现Runable接口"></a>实现Runable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketWindowRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (index &lt;= MAX) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">" 的号码是:"</span> + (index++));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankVersion2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只需一个业务实例对象</span></span><br><span class="line">    <span class="keyword">final</span> TicketWindowRunnable ticketWindow = <span class="keyword">new</span> TicketWindowRunnable();</span><br><span class="line"></span><br><span class="line">        Thread windowThread1 = <span class="keyword">new</span> Thread(ticketWindow, <span class="string">"一号窗口"</span>);</span><br><span class="line">        Thread windowThread2 = <span class="keyword">new</span> Thread(ticketWindow, <span class="string">"二号窗口"</span>);</span><br><span class="line">        Thread windowThread3 = <span class="keyword">new</span> Thread(ticketWindow, <span class="string">"三号窗口"</span>);</span><br><span class="line">        windowThread1.start();</span><br><span class="line">        windowThread2.start();</span><br><span class="line">        windowThread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果</p><p><img src="/upload/pasted-262.png" alt="upload successful"></p><p>利用这种实现方式，可以将线程的逻辑执行单元从控制中抽离出来（应用了策略模式）<br>然而这里存在一个线程安全的问题</p><h2 id="Thread的构造方法"><a href="#Thread的构造方法" class="headerlink" title="Thread的构造方法"></a>Thread的构造方法</h2><h3 id="Thread构造方法及其重载方法的参数"><a href="#Thread构造方法及其重载方法的参数" class="headerlink" title="Thread构造方法及其重载方法的参数"></a>Thread构造方法及其重载方法的参数</h3><p>源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment"> * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> (null, null, gname)&#125;, where &#123;<span class="doctag">@code</span> gname&#125; is a newly generated</span></span><br><span class="line"><span class="comment"> * name. Automatically generated names are of the form</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> "Thread-"+&#125;&lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is an integer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* For autonumbering anonymous threads. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> threadInitNumber;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">nextThreadNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> threadInitNumber++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes a Thread with the current AccessControlContext.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #init(ThreadGroup,Runnable,String,long,AccessControlContext,boolean)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">long</span> stackSize)</span> </span>&#123;</span><br><span class="line">    init(g, target, name, stackSize, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes a Thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> g the Thread group</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target the object whose run() method gets called</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name the name of the new Thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stackSize the desired stack size for the new thread, or</span></span><br><span class="line"><span class="comment"> *        zero to indicate that this parameter is to be ignored.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> acc the AccessControlContext to inherit, or</span></span><br><span class="line"><span class="comment"> *            AccessController.getContext() if null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inheritThreadLocals if &#123;<span class="doctag">@code</span> true&#125;, inherit initial values for</span></span><br><span class="line"><span class="comment"> *            inheritable thread-locals from the constructing thread</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">long</span> stackSize, AccessControlContext acc,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">boolean</span> inheritThreadLocals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"name cannot be null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">    Thread parent = currentThread();</span><br><span class="line">    SecurityManager security = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/* Determine if it's an applet or not */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If there is a security manager, ask the security manager</span></span><br><span class="line"><span class="comment">           what to do. */</span></span><br><span class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">            g = security.getThreadGroup();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If the security doesn't have a strong opinion of the matter</span></span><br><span class="line"><span class="comment">           use the parent thread group. */</span></span><br><span class="line">        <span class="keyword">if</span> (g == <span class="keyword">null</span>) &#123;</span><br><span class="line">            g = parent.getThreadGroup();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* checkAccess regardless of whether or not threadgroup is</span></span><br><span class="line"><span class="comment">       explicitly passed in. */</span></span><br><span class="line">    g.checkAccess();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Do we have the required permissions?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isCCLOverridden(getClass())) &#123;</span><br><span class="line">            security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g.addUnstarted();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.group = g;</span><br><span class="line">    <span class="keyword">this</span>.daemon = parent.isDaemon();</span><br><span class="line">    <span class="keyword">this</span>.priority = parent.getPriority();</span><br><span class="line">    <span class="keyword">if</span> (security == <span class="keyword">null</span> || isCCLOverridden(parent.getClass()))</span><br><span class="line">        <span class="keyword">this</span>.contextClassLoader = parent.getContextClassLoader();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">this</span>.contextClassLoader = parent.contextClassLoader;</span><br><span class="line">    <span class="keyword">this</span>.inheritedAccessControlContext =</span><br><span class="line">            acc != <span class="keyword">null</span> ? acc : AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">    setPriority(priority);</span><br><span class="line">    <span class="keyword">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">this</span>.inheritableThreadLocals =</span><br><span class="line">            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class="line">    <span class="comment">/* Stash the specified stack size in case the VM cares */</span></span><br><span class="line">    <span class="keyword">this</span>.stackSize = stackSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set thread ID */</span></span><br><span class="line">    tid = nextThreadID();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可传递的参数：</p><ul><li>name：线程名称，若没有传递参数，关于线程对象自动生成名称，以Thread-开头，从0 开始计数（静态变量threadInitNumber）</li><li>Runable实例：可以参照上面的实现部分理解（如果在构造Thread时没有传递Runable或者没有重写run方法。该Thread将不会执行任何东西（一个Thread若没传入Runable参数，则会设置为null），如果传递了Runable实例（如上面的例子所示）或者重写了run方法，则执行对应的新逻辑单元）</li><li><p>线程组 ThreadGroup(通过看源码可以得出，若传入ThreadGroup为空，就会为新键进程附上parent的线程组，而parent指的就是“当前线程”,当前进程和新线程的理解，另外，可以通过线程组获取当前的线程运行数量）</p></li><li><p>int stacksize：即为线程开辟的 虚拟机栈（JVM概念） 的大小（构造Thread时传入的该值定义着虚拟机栈的大小，如果未指定，则默认为0，0表示会忽略该参数，由jvm自己去设定）（假设调用的是一个没有结束的递归函数，则会不断在虚拟机栈中压入栈帧，最终导致stackoverflow）</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线程相关概念复习（操作系统）&quot;&gt;&lt;a href=&quot;#线程相关概念复习（操作系统）&quot; class=&quot;headerlink&quot; title=&quot;线程相关概念复习（操作系统）&quot;&gt;&lt;/a&gt;线程相关概念复习（操作系统）&lt;/h1&gt;&lt;h2 id=&quot;并发和并行的区别&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Java多线程学习笔记" scheme="https://www.junglezero.top/categories/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java多线程" scheme="https://www.junglezero.top/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>jvm学习（类的加载机制）</title>
    <link href="https://www.junglezero.top/2019/03/26/m%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%89/"/>
    <id>https://www.junglezero.top/2019/03/26/m学习（类的加载机制）/</id>
    <published>2019-03-26T05:32:00.000Z</published>
    <updated>2019-03-27T04:00:18.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><h2 id="一般概念"><a href="#一般概念" class="headerlink" title="一般概念"></a>一般概念</h2><p>虚拟机把描述类的数据从文件加载到内存，并对数据进行解析，校验和初始化，最终形成可以被虚拟机使用的java类型，这就是虚拟机类的加载的一般过程</p><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p><img src="/upload/pasted-253.png" alt="upload successful"></p><h3 id="加载（Loading）"><a href="#加载（Loading）" class="headerlink" title="加载（Loading）"></a>加载（Loading）</h3><p>类加载阶段就是由类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例,这个Class对象在日后就会作为方法区中该类的各种数据的访问入口。<br>加载的方式非常广泛，只要有满足二进制字节流，都可以执行类加载</p><p>多种加载源：</p><ul><li>文件<ul><li>class文件</li><li>jar文件</li></ul></li><li>网络传输</li><li>计算生成一个二进制流  <ul><li>$proxy</li></ul></li><li>数据库</li></ul><p><img src="/upload/pasted-254.png" alt="upload successful"></p><h3 id="连接（Linking）"><a href="#连接（Linking）" class="headerlink" title="连接（Linking）"></a>连接（Linking）</h3><p>1.验证过程<br>这一阶段的目的是确保.class文文件的字节流中包含的信息符合虚拟机规范且不会影响虚拟机的自身安全<br><img src="/upload/pasted-255.png" alt="upload successful"></p><p>2.准备过程<br>为类中的所有静态变量(static)分配内存空间，并为其设置一个初始值（默认值）（由于还没有产生对象，实例变量不在此操作范围内）<br>被final修饰的静态变量，会直接赋予原值；类字段的字段属性表中存在ConstantValue属性，则在准备阶段，其值就是ConstantValue的值</p><p>3.解析过程<br>解析过程是虚拟机将常量池内的符号引用替换为直接引用的过程</p><ul><li><p>符号引用（Symbolic References）：<br>符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能够无歧义的定位到目标即可。例如，在Class文件中它以CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等类型的常量出现。符号引用与虚拟机的内存布局无关，引用的目标并不一定加载到内存中。在Java中，一个java类将会编译成一个class文件。在编译时，java类并不知道所引用的类的实际地址，因此只能使用符号引用来代替。比如org.simple.People类引用了org.simple.Language类，在编译时People类并不知道Language类的实际内存地址，因此只能使用符号org.simple.Language（假设是这个，当然实际中是由类似于CONSTANT_Class_info的常量来表示的）来表示Language类的地址。各种虚拟机实现的内存布局可能有所不同，但是它们能接受的符号引用都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</p></li><li><p>直接引用：<br>直接引用可以是<br>（1）直接指向目标的指针（比如，指向“类型”【Class对象】、类变量、类方法的直接引用可能是指向方法区的指针）<br>（2）相对偏移量（比如，指向实例变量、实例方法的直接引用都是偏移量）<br>（3）一个能间接定位到目标的句柄<br>直接引用是和虚拟机的布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经被加载入内存中了。</p></li><li><p>解析内容</p><ul><li>类和接口的解析</li><li>字段的解析</li><li>类方法的解析</li><li>接口方法的解析</li></ul></li></ul><h3 id="初始化（Initialzation）"><a href="#初始化（Initialzation）" class="headerlink" title="初始化（Initialzation）"></a>初始化（Initialzation）</h3><p>即执行类构造器”clinit”()方法的过程。类加载过程最后一步，前面的过程完全由虚拟机主导和控制（除了通过自定义加载器参与外），初始化阶段才真正开始执行类中定义的Java代码（或者说是字节码）</p><h4 id="类构造器”clinit”-方法"><a href="#类构造器”clinit”-方法" class="headerlink" title="类构造器”clinit”()方法"></a>类构造器”clinit”()方法</h4><ul><li>“clinit”()方法是由编译器自动收集类中所有类变量的赋值动作和静态语句块（Static｛｝块）中的的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在静态语句块可以赋值，但是不能访问。</li></ul><p>例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span>&#123;</span><br><span class="line">     i=<span class="number">0</span>;</span><br><span class="line">     System.out.println(i); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个例子中，“i=0”处不会报错，而输出语句地方会报错</p><ul><li>“clinit”()方法对于类和接口不是必需的，如果没有static修饰的方法、代码块、变量。编译器可以不为其生成”clinit”方法</li><li>无需显式的调用父类构造器，虚拟机会保证在子类”clinit”()方法执行前，父类的”clinit”方法已经执行完， 虚拟机中第一个执行”clinit”()方法的肯定是java.lang.Object，父类中定义的静态语句块先于子类的变量赋值操作<br>例子：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Partent</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        a=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        System.out.println(Sub.b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为2</p><ul><li>如果多个线程同时初始化一个类，只有一个线程执行这个类的“cinit”方法，其他线程需要等待其执行完毕，如果方法执行时间过长，就会造成线程堵塞</li></ul><p>例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>  <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"init"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        ExecutorService threadPool= Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"start。。。。。。"</span>);</span><br><span class="line">                    Hello h=<span class="keyword">new</span> Hello();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"end。。。。。。"</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行以后，会发现会输出“start。。。。。。”,当一个完成“init”后，才会进行初始化</p><h4 id="初始化的条件"><a href="#初始化的条件" class="headerlink" title="初始化的条件"></a>初始化的条件</h4><ul><li>在执行下列需要引用类或接口的 Java 虚拟机指令时： new， getstatic， putstatic或 invokestatic。这些指令通过字段或方法引用来直接或间接地引用其它类。执行上面所述的 new 指令，在类或接口没有被初始化过时就初始化它。执行上面的 getstatic，putstatic 或 invokestatic 指令时，那些解析好的字段或方法中的类或接口如果还没有被初始化那就初始化它。</li><li><p>在初次调用 java.lang.invoke.MethodHandle 实例时，它的执行结果为通过 Java虚拟机解析出类型是 2（REF_getStatic）、 4（REF_putStatic）或者 6（REF_invokeStatic）的方法句柄。</p></li><li><p>在调用 JDK 核心类库中的反射方法时，例如， Class 类或 java.lang.reflect 包。</p></li><li>在对于类的某个子类的初始化时。</li><li>在它被选定为 Java 虚拟机启动时的初始类时<h4 id="不初始化的几个例子"><a href="#不初始化的几个例子" class="headerlink" title="不初始化的几个例子"></a>不初始化的几个例子</h4></li><li>通过子类引用父类的静态字段</li><li>通过数组定义来引用类</li><li>调用类的常量</li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>根据一个类的全限定名来读取此类二进制字节流到jvm内部，然后转换为一个与目标类对应的java.lang.Class对象实例.<br>Java 虚拟机支持两种类加载器： Java 虚拟机提供的引导类加载器（Bootstrap Class Loader）和用户自定义类加载器（User-Defined Class Loader）。每个用户自定义的类加载器应该是抽象类 ClassLoader 的某个子类的实例。应用程序使用用户自定义类加载器是为了便于扩展 Java 虚拟机的功能，支持动态加载并创建类。当然，它也可以从用户自定义的数据来源来获取类的二进制表示并创建类。例如，用户自定义类加载器可以通过网络下载、动态产生或是从一个加密文件中提取类的信息</p><ul><li><p>启动类加载器（Bootstrap ClassLoader）：由C++语言实现（针对HotSpot）,负责将存放在&lt;JAVA_HOME&gt;\lib目录或-Xbootclasspath参数指定的路径中的类库加载到内存中。</p></li><li><p>其他类加载器：由Java语言实现，继承自抽象类ClassLoader。<br>如：<br>扩展类加载器（Extension ClassLoader）：负责加载&lt;JAVA_HOME&gt;\lib\ext目录或java.ext.dirs系统变量指定的路径中的所有类库。<br>应用程序类加载器（Application ClassLoader）。负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。</p></li></ul><p>一个自定义类的加载器的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        ClassLoader mycl=<span class="keyword">new</span> ClassLoader() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                <span class="comment">//获取类的简单名称</span></span><br><span class="line">                String className=name.substring(name.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>)+<span class="string">".class"</span>;</span><br><span class="line">                <span class="comment">//获取类的流</span></span><br><span class="line">                InputStream ins=getClass().getResourceAsStream(className);</span><br><span class="line">                <span class="keyword">if</span>(ins==<span class="keyword">null</span>)&#123;<span class="comment">//如果当前包下没有，则由父类进行加载</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] buff=<span class="keyword">new</span> <span class="keyword">byte</span>[ins.available()];</span><br><span class="line">                    ins.read();</span><br><span class="line">                    <span class="comment">//实例化与当前类对应的class对象</span></span><br><span class="line">                    <span class="keyword">return</span> defineClass(name,buff,<span class="number">0</span>,buff.length);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   <span class="keyword">throw</span>  <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p><img src="/upload/pasted-257.png" alt="upload successful"></p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。</p><p>双亲委派模型的工作过程是：</p><ul><li><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成。</p></li><li><p>每一个层次的类加载器都是如此。因此，所有的加载请求最终都应该传送到顶层的启动类加载器中。</p></li><li><p>只有当父加载器反馈自己无法完成这个加载请求时（搜索范围中没有找到所需的类），子加载器才会尝试自己去加载。</p></li></ul><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>在JVM中，判断一个对象是否是某个类型时，如果该对象的实际类型与待比较的类型的类加载器不同，那么会返回false。<br>比如<br>  ClassLoader1、ClassLoader2都加载java.lang.String类，对应Class1、Class2对象。那么Class1对象不属于ClassLoad2对象加载的java.lang.String类型。</p><p><strong>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在虚拟机中的唯一性</strong>，每一个类加载器，都拥有一个独立的类名称空间。因此，使用双亲委派模型来组织类加载器之间的关系，有一个显而易见的好处：类随着它的类加载器一起具备了一种带有优先级的层次关系。</p><p>例如类java.lang.Object，它由启动类加载器加载。双亲委派模型保证任何类加载器收到的对java.lang.Object的加载请求，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。</p><p>相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为java.lang.Object的类，并用自定义的类加载器加载，那系统中将会出现多个不同的Object类，Java类型体系中最基础的行为也就无法保证，应用程序也将会变得一片混乱。</p><h4 id="自定义类加载器的完整-实现"><a href="#自定义类加载器的完整-实现" class="headerlink" title="自定义类加载器的完整 实现"></a>自定义类加载器的完整 实现</h4><p>关于自定义类加载器的几个函数</p><p>1.loadClass()<br>默认实现:<br>根据全限定名创建该类的class对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>loadClass(String name, boolean resolve)<br>基本过程</p><ul><li>1.首先，检查一下指定名称的类是否已经加载过，如果加载过了，就不需要再加载，直接返回。</li><li><p>2.如果此类没有加载过，那么，再判断一下是否有父加载器；如果有父加载器，则由父加载器加载（即调用parent.loadClass(name, false);）.或者是调用bootstrap类加载器来加载。</p></li><li><p>3.如果父加载器及bootstrap类加载器都没有找到指定的类，那么调用当前类加载器的findClass方法来完成类加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>2 findClass()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，抽象类ClassLoader的findClass函数默认是抛出异常的。而前面我们知道，loadClass在父加载器无法加载类的时候，就会调用我们自定义的类加载器中的findeClass函数，因此我们必须要在loadClass这个函数里面实现将一个指定类名称转换为Class对象.</p><p>如果是是读取一个指定的名称的类为字节数组的话，这很好办。但是如何将字节数组转为Class对象呢？很简单，Java提供了defineClass方法，通过这个方法，就可以把一个字节数组转为Class对象</p><p>3 defineClass()<br>将一个字节数组转为Class对象，这个字节数组是class文件读取后最终的字节数组。如，假设class文件是加密过的，则需要解密后作为形参传入defineClass函数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span><br><span class="line">        <span class="keyword">throws</span> ClassFormatError  &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, b, off, len, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整函数调用过程</p><p><img src="/upload/pasted-258.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类加载机制&quot;&gt;&lt;a href=&quot;#类加载机制&quot; class=&quot;headerlink&quot; title=&quot;类加载机制&quot;&gt;&lt;/a&gt;类加载机制&lt;/h1&gt;&lt;h2 id=&quot;一般概念&quot;&gt;&lt;a href=&quot;#一般概念&quot; class=&quot;headerlink&quot; title=&quot;一般概念&quot;
      
    
    </summary>
    
      <category term="jvm学习笔记" scheme="https://www.junglezero.top/categories/jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jvm类的加载机制" scheme="https://www.junglezero.top/tags/jvm%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>jvm学习笔记（字节码文件）</title>
    <link href="https://www.junglezero.top/2019/03/24/jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%EF%BC%89/"/>
    <id>https://www.junglezero.top/2019/03/24/jvm学习笔记（字节码文件）/</id>
    <published>2019-03-24T00:55:00.000Z</published>
    <updated>2019-03-26T03:28:37.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字节码文件（ByteCode）"><a href="#字节码文件（ByteCode）" class="headerlink" title="字节码文件（ByteCode）"></a>字节码文件（ByteCode）</h1><h2 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h2><p>字节码文件（.class）实际上就是java源码文件（.java）经过编译而形成的 ，可以被虚拟机所理解的文件。字节码文件结构比较特殊，内部不包含任何的分段符，字节顺序和数量都是严格规定的，所有16位，32位，64位长度的数据都将构成2个，4个，8个8字节单位来表示，多字节数据项按照big-endian顺序（高位字节的地址在低位，低位字节的地址在最高位）</p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p><img src="/upload/pasted-243.png" alt="upload successful"><br>在该结构体中，只有两种数据结构，分别是无符号数和表，其中无符号数属于字节码的基本类型，u1,u2分别表说一个字节和两个字节无符号类型，表是由多个无符号是或者其他表作为数据项的复合数据结构，所有表都是用“_info”进行结尾</p><h3 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h3><p>用来标识文件为一个字节码文件，是固定的，为“0xCAFEBABE”，并不是采用文件后缀名标识字节码文件，因为文件后缀可以手动修改</p><h3 id="minor-version-和-major-version"><a href="#minor-version-和-major-version" class="headerlink" title="minor_version 和 major_version"></a>minor_version 和 major_version</h3><p>紧接着魔数的四个字节是class文件的此版本号和主版本号。一般来说，高版本可以向下兼容低版本，而当低版本jvm处理高版本的字节码文件时，就会抛出“java.lang.UnsupportedClassVersionError”异常</p><h3 id="constant-pool-count-常量池计数器-和constant-pool-常量池"><a href="#constant-pool-count-常量池计数器-和constant-pool-常量池" class="headerlink" title="constant_pool_count(常量池计数器)和constant_pool(常量池)"></a>constant_pool_count(常量池计数器)和constant_pool(常量池)</h3><p>常量池是字节码文件中非常重要的，也是字节码文件中与其他项关联的最多和占用字节码空间最大的数据项，常量池中主要存放字面量（Literal），包含文字字符串，final常量值，和符号引用（Symbolic）包含类和接口的全限定名（Full Qualified Name）,字段的名称和描述符（Descriptor）以及方法的名称和描述符，访问是通过索引进行访问<br>常量池计数器是记录常量池中到底有多少数据常量，从1开始计数，但是0也是使用的，为了满足后续其他项在不引用常量池中的任何常量项时，默认可以把常量池中的访问索引设为0</p><p><img src="/upload/pasted-244.png" alt="upload successful"></p><p><img src="/upload/pasted-245.png" alt="upload successful"></p><p><img src="/upload/pasted-246.png" alt="upload successful"><br>可以通过命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -verbose xxx.class</span><br></pre></td></tr></table></figure></p><p>查看常量池中的信息</p><h3 id="access-flags-访问标志"><a href="#access-flags-访问标志" class="headerlink" title="access_flags(访问标志)"></a>access_flags(访问标志)</h3><p><img src="/upload/pasted-247.png" alt="upload successful"><br>这一位一般是表中一个或者几个的组合</p><h3 id="this-class-类索引-和super-class-超类索引"><a href="#this-class-类索引-和super-class-超类索引" class="headerlink" title="this_class(类索引)和super_class(超类索引)"></a>this_class(类索引)和super_class(超类索引)</h3><p> 分别保存了类和超类的全限定名</p><p><img src="/upload/pasted-248.png" alt="upload successful"><br>如果一个类并没有显式的继承其他类，则它的直接超类就是Object，此时父类的索引值就是0，这时就没有引用常量池中的常量</p><h3 id="interfaces-count-接口计数器-和interfaces（接口表）"><a href="#interfaces-count-接口计数器-和interfaces（接口表）" class="headerlink" title="interfaces_count(接口计数器)和interfaces（接口表）"></a>interfaces_count(接口计数器)和interfaces（接口表）</h3><p>interfaces_count 指的是当前类实现的接口数目<br>interfaces[] 是包含interfaces_count个接口的全局限定名的索引的数组</p><h3 id="fields-count（字段计数器）-和fields（字段表）"><a href="#fields-count（字段计数器）-和fields（字段表）" class="headerlink" title="fields_count（字段计数器） 和fields（字段表）"></a>fields_count（字段计数器） 和fields（字段表）</h3><p>字段表计数器用来表示一个字节码文件中field_info的个数，是一个类中类变量和实例变量的总和，字段表是一个数组集合，字段表中的每一个成员必须是field_info数据项，用来表示一个字段的完整信息，包括字段的标识符，访问修饰符（public private protected），类变量还是实例变量（static），是否为常量（final），字段表中，只含有当前类的字段，并不含有超类的字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">field_info &#123;</span><br><span class="line">   u2 access_flags;</span><br><span class="line">   u2 name_index;</span><br><span class="line">   u2 descriptor_index;</span><br><span class="line">   u2 attributes_count;</span><br><span class="line">   attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="methods-count-方法计数器-和methods-方法表"><a href="#methods-count-方法计数器-和methods-方法表" class="headerlink" title="methods_count(方法计数器)和methods(方法表)"></a>methods_count(方法计数器)和methods(方法表)</h3><p>methods_count是该类或者接口显示定义的方法的数量。<br>method[]是包含方法信息的一个详细列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">method_info &#123;</span><br><span class="line">   u2 access_flags;</span><br><span class="line">   u2 name_index;</span><br><span class="line">   u2 descriptor_index;</span><br><span class="line">   u2 attributes_count;</span><br><span class="line">   attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="attrubutes-count和attributes"><a href="#attrubutes-count和attributes" class="headerlink" title="attrubutes_count和attributes"></a>attrubutes_count和attributes</h3><p>class文件的最后一部分是属性，它描述了该类或者接口所定义的一些属性信息。attributes_count指的是attributes列表中包含的attribute_info的数量。<br>属性可以出现在class文件的很多地方，而不只是出现在attributes列表里。如果是attributes表里的属性，那么它就是对整个class文件所对应的类或者接口的描述；如果出现在fileds的某一项里，那么它就是对该字段额外信息的描述；如果出现在methods的某一项里，那么它就是对该方法额外信息的描述。</p><p><img src="/upload/pasted-251.png" alt="upload successful"><br>必须要被虚拟机所识别的三个属性<br>Code：<br>Code 属性是一个变长属性，位于 method_info结构的属性表。一个 Code 属性<br>只为唯一一个方法、实例类初始化方法或类初始化方法保存 Java 虚拟机指令及相关辅<br>助信息。 所有 Java 虚拟机实现都必须能够识别 Code 属性。如果方法被声明为 native 或者<br>abstract 类型，那么对应的 method_info 结构不能有明确的 Code 属性，其它情况下，<br>method_info 有必须有明确的 Code 属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Code_attribute &#123;</span><br><span class="line">   u2 attribute_name_index;//必须是对常量池的有效索引， 常量池在该索引处的项</span><br><span class="line">必须是 CONSTANT_Utf8_info结构，表示字符串“Code”。</span><br><span class="line">   u4 attribute_length;//表示当前属性的长度，不包括开始的 6 个字节</span><br><span class="line">   u2 max_stack;//给出了当前方法的操作数栈在运行执行的任何时间点的最大深度</span><br><span class="line">   u2 max_locals;//给出了分配在当前方法引用的局部变量表中的局部变量个数，包括</span><br><span class="line">调用此方法时用于传递参数的局部变量</span><br><span class="line">   u4 code_length;//给出了当前方法的 code[]数组的字节数①， code_length 的值必须</span><br><span class="line">大于 0，即 code[]数组不能为空。</span><br><span class="line">   u1 code[code_length]; //code[]数组给出了实现当前方法的 Java 虚拟机字节码。</span><br><span class="line">code[]数组以按字节寻址的方式读入机器内存，如果 code[]数组的第一个字节是按以</span><br><span class="line">4 字节边界对齐的话，那么 tableswitch 和 lookupswitch 指令中所有涉及到的 32</span><br><span class="line">位偏移量也都是按 4 字节长度对齐的（关于 code[]数组边界对齐对字节码的影响， 请参</span><br><span class="line">考相关的指令描述）。</span><br><span class="line">   u2 exception_table_length;//给出了 exception_table[]数组的成员个数量。</span><br><span class="line">  &#123;    u2 start_pc;</span><br><span class="line">       u2 end_pc;</span><br><span class="line">       u2 handler_pc;</span><br><span class="line">       u2 catch_type;</span><br><span class="line">  &#125; exception_table[exception_table_length];//数组的每个成员表示 code[]数组中的一个异常处理器</span><br><span class="line">（Exception Handler）。 exception_table[]数组中， 异常处理器顺序是有意义的</span><br><span class="line">  u2 attributes_count;</span><br><span class="line">  attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ConstantValue<br>Execptions</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字节码文件（ByteCode）&quot;&gt;&lt;a href=&quot;#字节码文件（ByteCode）&quot; class=&quot;headerlink&quot; title=&quot;字节码文件（ByteCode）&quot;&gt;&lt;/a&gt;字节码文件（ByteCode）&lt;/h1&gt;&lt;h2 id=&quot;基本理解&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="jvm学习笔记" scheme="https://www.junglezero.top/categories/jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jvm内存相关" scheme="https://www.junglezero.top/tags/jvm%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>jvm学习笔记（垃圾回收）</title>
    <link href="https://www.junglezero.top/2019/03/21/m%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%89/"/>
    <id>https://www.junglezero.top/2019/03/21/m学习笔记（垃圾回收）/</id>
    <published>2019-03-21T03:22:00.000Z</published>
    <updated>2019-03-24T08:37:22.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h2 id="GC的评估"><a href="#GC的评估" class="headerlink" title="GC的评估"></a>GC的评估</h2><ul><li>吞吐量：程序的运行时间/（程序的运行时间+内存的回收时间）</li><li>垃圾回收开销：吞吐量的补数，垃圾收集时间和总时间的比例</li><li>暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间</li><li>收集频率：相对于应用程序的执行，收集操作的发生频率</li><li>堆空间：java堆区所占的内存大小</li><li>快速：一个对象从诞生到被回收所经历的时间</li></ul><h2 id="如何判定垃圾对象"><a href="#如何判定垃圾对象" class="headerlink" title="如何判定垃圾对象"></a>如何判定垃圾对象</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>在对象中添加一个引用计数器，当有地方引用这个对象时，引用计数器的数值+1，引用失效时，计数器的值-1<br>虽然效率很高，但是存在较大弊端，如果有两个潜在垃圾相互引用，那么他们的计数器不为1，不会被标记为垃圾 </p><h3 id="可达分析法（根搜索法）"><a href="#可达分析法（根搜索法）" class="headerlink" title="可达分析法（根搜索法）"></a>可达分析法（根搜索法）</h3><p><img src="/upload/pasted-215.png" alt="upload successful"><br>以根对象集合为起始点，按照从上到下的方式搜索被根对象集合所连接的目标对象是否可达（根搜索后，内存中存活的对象都会和根对象集合直接或者间接的连接着），若不可达，则意味着目标对象已经死亡，会被标记为垃圾对象<br>跟对象集合中包括：</p><ul><li>Java栈中对象的引用</li><li>本地方法栈中的对象引用</li><li>运行常量池中的对象引用</li><li>方法区中类静态属性的对象引用</li><li>与一个类对象的唯一数据类型的Class对象</li></ul><h2 id="回收方式"><a href="#回收方式" class="headerlink" title="回收方式"></a>回收方式</h2><h3 id="回收策略"><a href="#回收策略" class="headerlink" title="回收策略"></a>回收策略</h3><h4 id="标记-清除算法（Mark-Sweep）"><a href="#标记-清除算法（Mark-Sweep）" class="headerlink" title="标记-清除算法（Mark-Sweep）"></a>标记-清除算法（Mark-Sweep）</h4><p>是基础的垃圾收集算法，过程正如名字所说的两个过程，但是其效率低下，而且会产生不连续的内存块</p><h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><h5 id="堆的具体分区"><a href="#堆的具体分区" class="headerlink" title="堆的具体分区"></a>堆的具体分区</h5><p><img src="/upload/pasted-218.png" alt="upload successful"></p><h5 id="复制算法过程"><a href="#复制算法过程" class="headerlink" title="复制算法过程"></a>复制算法过程</h5><p>当执行一次Minor GC（新生代的垃圾回收），Eden中存活的对象会被复制到To空间，并且之前已经经历过一次Minor GC并在Form空间中存活下来的对象如果还存活的话会被复制到To空间中<br><img src="/upload/pasted-216.png" alt="upload successful"><br>Minor GC执行完毕后Eden空间和From空间会被清空，存活下来的对象已经全部复制到了To中,接下来From空间和To空间会交换位置，复制算法的本质就是保证From和To有一块空间是空的<br><img src="/upload/pasted-217.png" alt="upload successful"><br>Minor GC却不适用于老年代的垃圾回收，因为老年代的对象生命周期都很长</p><h4 id="标记整理算法（标记-压缩算存法）"><a href="#标记整理算法（标记-压缩算存法）" class="headerlink" title="标记整理算法（标记-压缩算存法）"></a>标记整理算法（标记-压缩算存法）</h4><p>当成功标记出内存的垃圾对象后，该算法会将所有活对象移动到一个规整且连续的空间中去，然后执行Full GC（老年代回收算法，Major GC）回收无用对象所占的内存，当成功执行压缩后，已用的内存和未用的内存会各占一边，彼此维护着一个标记指针，当新对象分配空间时，则可以通过指针碰撞方式（Bump the Pointer）</p><h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>根据分代的概念，依照每个代的特点，选择合适的收集算法，比如为新生代选择算法就要以速度为先，因为新生代中所存储的瞬时对象生命周期都非常短，且内存空间较小，则使用复制算法；而老年代中对象的生命周期都较长，而且老年代所占的堆内存也较大，因此老年代中的垃圾回收并不频繁，但是执行消费的时间却很长，所以选择标记压缩算法<br>新生代GC(Minor GC) 指发生在新生代的垃圾收集动作，因为java对象大多具备朝生夕灭的特性，所以MinorGC非常频繁<br>老年代GC(Full GC，Major GC) 指发生在老年代的GC，FullGC一般比MinorGC慢上十倍</p><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><p><img src="/upload/pasted-219.png" alt="upload successful"></p><h4 id="串行回收与并行回收"><a href="#串行回收与并行回收" class="headerlink" title="串行回收与并行回收"></a>串行回收与并行回收</h4><p>串行回收是，当多个CPU可以执行垃圾回收操作时，也只能有一个CPU执行垃圾回收操作，在执行垃圾回收时，工作线程需要全部暂停，垃圾收集完成后才可继续<br>并行回收是指多个cpu可以同时进行垃圾回收，提升了程序的吞吐量<br><img src="/upload/pasted-220.png" alt="upload successful"></p><h4 id="并发和“Stop-the-World”"><a href="#并发和“Stop-the-World”" class="headerlink" title="并发和“Stop the World”"></a>并发和“Stop the World”</h4><p>“Stop the World”指的是垃圾回收进行时，会暂停所有进行中的线程<br>并发回收只不过是减少了“Stop the World”的时间</p><h4 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h4><ul><li>最基本的垃圾收集器</li><li>作用在新生代中，采用复制算法，串行回收（单线程）和“Stop the World”机制进行回收</li><li>在老年代提供Serial Old收集器，采用标记压缩算法，串行回收（单线程）和“Stop the World”机制进行回收</li><li>适合单个CPU的宿主环境</li></ul><h4 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h4><ul><li>适合在并行的条件的垃圾收集器</li><li>算法和机制与Serial相同</li><li>适合多个cpu的环境</li></ul><h4 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h4><ul><li>采用复制算法，并行回收和“stop the world”机制</li><li>可以控制程序的吞吐量（-XX GCTimeRatio）,提高吞吐量，可以降低内存回收的执行频率，但是会增加每次执行的时间</li><li>老年代采用Parallel old收集器，采用标记压缩，并行收集</li><li>Parallel 和Parallel Old适合Server下的内存回收</li></ul><h4 id="CMS（Concurrent-Mark-Sweep）"><a href="#CMS（Concurrent-Mark-Sweep）" class="headerlink" title="CMS（Concurrent-Mark-Sweep）"></a>CMS（Concurrent-Mark-Sweep）</h4><p>特点</p><ul><li>+为并发而生</li><li>+低延迟（每次执行时间较短）</li><li>-占用cpu内存较大</li><li>-会出现浮动垃圾</li><li>-产生内存碎片</li></ul><p><img src="/upload/pasted-226.png" alt="upload successful"><br>过程：</p><ul><li>初始标记（Initial-Mark）：程序中所有工作进程会暂停，并根据根搜素法标记对不可达对象进行标记，标记完毕后恢复暂停进程</li><li>并发标记（Concurrent-Marking）：将之前不可达对象标记为垃圾对象</li><li>再次标记（Remark）：并发标记并不能保证所有垃圾对象都已经被标记，因此该过程将进入“stop the world”再次进行标记</li><li>并发清除（Concurrent-Sweep）：清除标记垃圾对象</li></ul><h4 id="G1（Garbage-First）"><a href="#G1（Garbage-First）" class="headerlink" title="G1（Garbage First）"></a>G1（Garbage First）</h4><p>特点：</p><ul><li><p>并行于并发：G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短stop-The-World停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。</p></li><li><p>分代收集：分代概念在G1中依然得以保留。虽然G1可以不需要其它收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。也就是说G1可以自己管理新生代和老年代了。</p></li><li><p>空间整合：由于G1使用了独立区域（Region）概念，将java堆区划分为2048块大小相同的独立Region块,这样 可以更好的提升GC的回收效率和缩短线程暂停时间以换取更大的程序吞吐量，因而能更好的控制暂停时间G1从整体来看是基于“标记-整理”算法实现收集，从局部（两个Region）上来看是基于“复制”算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片。</p></li><li><p>可预测的停顿：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用这明确指定一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p></li></ul><p><img src="/upload/pasted-227.png" alt="upload successful"></p><ul><li>为了避免全堆扫描，G1使用了Remembered Set来管理相关的对象引用信息。当进行内存回收时，在GC根节点的枚举范围中加入Remembered Set即可保证不对全堆扫描也不会有遗漏了。</li></ul><p>过程：</p><p><img src="/upload/pasted-228.png" alt="upload successful"></p><ul><li><p>初始标记（Initial Making）：标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可以用的Region中创建新对象，这个阶段需要停顿线程，但耗时很短</p></li><li><p>并发标记（Concurrent Marking）：并发标记阶段是从GC Roots开始对堆中对象进行可达性分析，找出存活对象，这一阶段耗时较长但能与用户线程并发运行。而最终标记阶段需要吧Remembered Set Logs的数据合并到Remembered Set中，这阶段需要停顿线程，但可并行执行</p></li><li><p>最终标记（Final Marking）：最后筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这一过程同样是需要停顿线程</p></li><li><p>筛选回收（Live Data Counting and Evacuation）</p></li></ul><p>GC模式</p><ul><li>youngGC:发生在年轻代的GC算法，一般对象（除了巨型对象）都是在eden region中分配内存，当所有eden region被耗尽无法申请内存时，就会触发一次young gc，这种触发机制和之前的young gc差不多，执行完一次young gc，活跃对象会被拷贝到survivor region或者晋升到old region中，空闲的region会被放入空闲列表中，等待下次被使用。</li><li>mixGC:就是上面的标准过程</li><li>FullGC:如果对象内存分配速度过快，mixed gc来不及回收，导致老年代被填满，就会触发一次full gc，G1的full gc算法就是单线程执行的serial old gc，会导致异常长时间的暂停时间，需要进行不断的调优，尽可能的避免full gc.</li></ul><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><ul><li>新对象优先在Eden区分配 ：新对象都会在Eden区进行分配，若Eden区已满，则会执行Minor GC</li><li>大对象直接进入老年代：大对象指的是需要占用大量内存的java对象，典型的是大字符串，可以通过“-XX:PretenureSizeTHreshold”设置保存在老年区的大小，应当尽量避免大对象的出现</li><li>长期存活的对象会进入老年代：虚拟机实际上为每个对象设置了一个Age计数器，如果对象在Eden出生且经过第一次垃圾回收仍存活的话，并且能被Survivor容纳的话，就会进入Survivor，将对象年龄设为1，对象在Survivor存活过一次垃圾回收，年龄就+1，年龄增加到一定程度时，就会进入老年区,可以通过“-XX:MaxTeburingThreshold”设置老年区年龄</li><li>动态对象的年龄判定：如果在Survivor中相同年龄对象大小总和大于survivor空间的一半，年龄大于或者等于该年龄的对象直接进入老年代</li><li>空间分配担保：当新生代的大部分对象都存活时，就需要老年代进行担保，把survivor无法容纳的对象直接分入老年代</li><li>逃逸分析和栈上分配：逃逸分析（Escape Analysis）是jvm在执行性能优化之前的一种分析技术，它的具体目标是分析出对象的作用域，当一个对象被定义在方法体内部之后，它的受访权限仅限于方法体内，一旦被外部成员引用后，这个对象就发生了逃逸，反之，如果方法体内的对象并没有被外部成员引用，jvm就会为其在栈帧中分配空间</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;垃圾回收&quot;&gt;&lt;a href=&quot;#垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收&quot;&gt;&lt;/a&gt;垃圾回收&lt;/h1&gt;&lt;h2 id=&quot;GC的评估&quot;&gt;&lt;a href=&quot;#GC的评估&quot; class=&quot;headerlink&quot; title=&quot;GC的评估&quot;&gt;
      
    
    </summary>
    
      <category term="jvm学习笔记" scheme="https://www.junglezero.top/categories/jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="垃圾回收" scheme="https://www.junglezero.top/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>jvm学习笔记（内存）</title>
    <link href="https://www.junglezero.top/2019/03/20/vm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%86%85%E5%AD%98%EF%BC%89/"/>
    <id>https://www.junglezero.top/2019/03/20/vm学习笔记（内存）/</id>
    <published>2019-03-20T07:13:00.000Z</published>
    <updated>2019-03-21T03:19:39.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM的内存管理"><a href="#JVM的内存管理" class="headerlink" title="JVM的内存管理"></a>JVM的内存管理</h1><h2 id="基本五大区"><a href="#基本五大区" class="headerlink" title="基本五大区"></a>基本五大区</h2><p><img src="/upload/pasted-209.png" alt="upload successful"></p><h3 id="线程共享区和线程独占区"><a href="#线程共享区和线程独占区" class="headerlink" title="线程共享区和线程独占区"></a>线程共享区和线程独占区</h3><p>线程，是操作系统中能够进行调度的最小单位，线程共享区是指所有线程共同使用的区域，线程独占区是指每个线程单独创建和使用的内存区域</p><h3 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h3><p>是内存中一块较小空间，可以理解为是记录当前线程所执行的字节码的<strong>行号</strong>指示器，如果线程执行的是一个java方法，计数器记录的是正在执行的虚拟机指令码的<strong>地址</strong>； 如果是Native方法，计数器为空（undefined），程序计数器是唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域</p><h3 id="Java虚拟机栈（Java-Virtual-Machine-Stacks）"><a href="#Java虚拟机栈（Java-Virtual-Machine-Stacks）" class="headerlink" title="Java虚拟机栈（Java Virtual Machine Stacks）"></a>Java虚拟机栈（Java Virtual Machine Stacks）</h3><p>虚拟机栈描述的是java方法执行的内存模型<br>栈帧（Stack Frame）：每个方法在执行完成时，都会创建一个栈帧，伴随着方法从创建到执行的完成，用于储存局部变量表【存放编译器可知道的各种基本类型，引用类型，returnAddress（一条字节码指令的地址）类型，在编译器完成分配，在方法运行期间大小不会改变】，操作数栈，动态链接，方法出口等<br>【结合栈的先进先出特性理解】<br>异常状况：线程请求的栈的深度大于虚拟机所允许的最大深度，则发生StackOverflowError【一个没有结束的递归函数】】如果虚拟机栈可以动态扩展，而扩展到无法申请到足够内存时，抛出OutOfMemoryError</p><h3 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h3><p>和虚拟机栈类似，区别是虚拟机栈为虚拟机执行java方法而服务，本地方法栈则为使用到的Native方法服务，在hot spot 中，两者是一体的</p><h3 id="java堆（Java-Heap）"><a href="#java堆（Java-Heap）" class="headerlink" title="java堆（Java Heap）"></a>java堆（Java Heap）</h3><p>用来存储对象的<strong>实例</strong>，是java虚拟机所管理的最大的内存区域</p><ul><li>大部分对象实例在此分配内存</li><li>垃圾收集器管理的主要区域</li><li>内存不够时，会抛出OutOfMemoryError异常</li><li>可以通过-Xmx和-XMS控制动态控制<h3 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h3>用以储存已被虚拟机加载的<strong>类信息【版本，字段，方法，接口】，常量，静态变量</strong>，即时编译器编译后的代码等数据<br>称作“永久代”（Permanent Generation）:在hot spot中GC分代收集扩展到了方法区，或者说使用了永久代而已，两者并不等价<br>会抛出OutOfMemoryError</li></ul><h2 id="重点区域"><a href="#重点区域" class="headerlink" title="重点区域"></a>重点区域</h2><h3 id="运行时常量池（Runtime-Constant-Pool）"><a href="#运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="运行时常量池（Runtime Constant Pool）"></a>运行时常量池（Runtime Constant Pool）</h3><p>位于方法区，用来存放编译期生成的各种字面量和符号引用<br>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1=&quot;abc&quot;;</span><br><span class="line">String s2=&quot;abc&quot;;</span><br><span class="line">System.out.println(s1==s2)</span><br></pre></td></tr></table></figure></p><p>要按照上面的说法，虚拟机在创建s1时，会先将在虚拟机栈中的局部变量表中创建引用s1，然后再在堆中创建实例“abc”，同理s2也是，这样来看，判定s1==s2的话，由于string是引用类型，因此会比较两个的地址，则创建的两个实例虽然内容相同，但是地址是不同的，所以应当是false，但是实际操作中，却是true。答案就在于“abc”属于可以在编译器直接翻译出的字面量，会存在运行常量池中，而在运行常量池中，实际上维持的是一个Stingtable（对于string来说），而其底层是HashSet(无序性，不重复性的集合)，因此，两个引用实际上指向的是同一个“abc”，故地址相同，判定为true<br>而对于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s3=new String(&quot;abc&quot;)；</span><br><span class="line">System.out.println(s1==s3)</span><br></pre></td></tr></table></figure></p><p>其结果为false<br>关键在于关键字“new”,通过这种方式，就需要按照上面说的那样，引用在栈，实例在堆，因此地址是不相等<br>但是如果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(s1==s3.intern())</span><br></pre></td></tr></table></figure></p><p>结果为true，这是因为运行时常量池的另一个特性：动态性，它可以在运行期把常量放入常量池中，而intern()主要做的事情就是对于一个string，它会查看在栈（局部常量表）中查找是否有值相等的值，若没有，则创建并返回其在栈中的地址，若有则直接返回栈中地址</p><h3 id="直接内存（Direct-Memory）"><a href="#直接内存（Direct-Memory）" class="headerlink" title="直接内存（Direct Memory）"></a>直接内存（Direct Memory）</h3><p>实际上它不属于虚拟机运行时数据的一部分，也不是java虚拟机规范中定义的内存区域，但是还是用的到，既然是内存，会受到本机总内存影响，也会抛出OutOfMemoryError</p><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p><img src="/upload/pasted-211.png" alt="upload successful"></p><h3 id="分配内存过程"><a href="#分配内存过程" class="headerlink" title="分配内存过程"></a>分配内存过程</h3><p>对象所需的内存大小在类加载完成后就已经完全确定<br>指针碰撞（Bump the Pointer）： 如果在堆中内存时绝对齐整的，所用的内存在一边，空闲的内存在另一边，中间有一个指针作为分界，分配内存实际上就是指针向空闲内存区域移动与对象大小相等的一个空间<br>空闲列表（Free List）：在堆内存中，更多时候是不规整的，虚拟机可以维护一个列表进行记录，记录那些内存块是可用的，分配内存时，从；列表中找出一块可用区域即可<br>采取何种方式取决于堆内存是否规整，而堆内存是否规整又取决于垃圾收集器是否有压缩整理功能</p><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>在分配时，由于多线，可能会引发线程安全问题<br>解决方法：</p><ul><li>线程同步，但是效率太低</li><li>本地线程分配缓冲（Thread Local Allocation Buffer）,即每个线程在java堆中预先分配一小块内存，若预分配的TALB满了，则采用同步策略</li></ul><h3 id="初始化对象"><a href="#初始化对象" class="headerlink" title="初始化对象"></a>初始化对象</h3><h3 id="对象的结构"><a href="#对象的结构" class="headerlink" title="对象的结构"></a>对象的结构</h3><p><img src="/upload/pasted-212.png" alt="upload successful"></p><ul><li>对象头（Header）<ul><li>自身运行时的数据（Mark Word）<ul><li>哈希值</li><li>GC分代年龄</li><li>锁状态标志</li><li>线程持有锁</li><li>偏向线程ID</li><li>偏向时间戳</li></ul></li><li>类型指针</li></ul></li><li>instance data:对象的有效信息</li><li>padding：填充作用,因为要求对象的内存大小要是8的整数倍</li></ul><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>这个过程指的是从reference到堆上实例的过程<br>句柄访问：<br>在java堆中划分出一块内存来作为句柄池，reference储存的对象就是句柄地址，而句柄中包含了对象实例数据和类型数据的地址<br>这种方法的好处是reference储存的是稳定的句柄地址，对象发生移动时，只会改变句柄中实例数据指针，不会改变reference<br><img src="/upload/pasted-213.png" alt="upload successful"></p><p>直接指针访问：<br>reference储存的直接是对象的地址<br>这种方法的好处是速度较快，因为节省了一次指针定位，hotspot中采用的是这种方式<br><img src="/upload/pasted-214.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM的内存管理&quot;&gt;&lt;a href=&quot;#JVM的内存管理&quot; class=&quot;headerlink&quot; title=&quot;JVM的内存管理&quot;&gt;&lt;/a&gt;JVM的内存管理&lt;/h1&gt;&lt;h2 id=&quot;基本五大区&quot;&gt;&lt;a href=&quot;#基本五大区&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="jvm学习笔记" scheme="https://www.junglezero.top/categories/jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jvm内存相关" scheme="https://www.junglezero.top/tags/jvm%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>jvm学习笔记（入门）</title>
    <link href="https://www.junglezero.top/2019/03/20/jvm%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://www.junglezero.top/2019/03/20/jvm学习总结/</id>
    <published>2019-03-20T01:04:00.000Z</published>
    <updated>2019-03-20T14:24:31.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门概念"><a href="#入门概念" class="headerlink" title="入门概念"></a>入门概念</h1><h2 id="字节码（ByteCode）"><a href="#字节码（ByteCode）" class="headerlink" title="字节码（ByteCode）"></a>字节码（ByteCode）</h2><p>java的跨平台特性（Write Once，Run Anywhere）的根本原因就是字节码，字节码是java源代码编译以后的结果，对于不同的平台，jvm的内部实现机制可能有所不同，但是编译出的字节码却是相同的<br>大部分情况下，字节码都是储存在本地的.class文件，每一个字节码对应着全局唯一一个类或者接口的定义信息<br>扩大来说，任何编程语言只要编译结果满足并包含java虚拟机的内部指令，符号表以及其他辅助信息，这就是个有效的字节码文件，就能够被虚拟机所识别并装载运行</p><h2 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h2><p>即java应用编程接口，是预先定义好的接口，目的是让人用来进行开发，而又无需访问或者理解其内部源码（虽然为了我们自己的进步还是要去看源码）</p><h2 id="java虚拟机（JVM，java-Virtual-Machine）"><a href="#java虚拟机（JVM，java-Virtual-Machine）" class="headerlink" title="java虚拟机（JVM，java Virtual Machine）"></a>java虚拟机（JVM，java Virtual Machine）</h2><p>这是java技术的核心所在，因为所有的java程序都运行在java虚拟机内部，之所以说是虚拟机，是因为它是一组规范所定义的抽象计算机，jvm的主要任务是将字节码装载到内部，编译为对应平台的机器指令</p><p><img src="/upload/pasted-208.png" alt="upload successful"></p><h2 id="Java相对于其他几种语言的优势"><a href="#Java相对于其他几种语言的优势" class="headerlink" title="Java相对于其他几种语言的优势"></a>Java相对于其他几种语言的优势</h2><ul><li>1 体系结构独立</li><li>2 安全性优越</li><li>3 多线程</li><li>4 分布式</li><li>5 丰富的第三方开源组件</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;入门概念&quot;&gt;&lt;a href=&quot;#入门概念&quot; class=&quot;headerlink&quot; title=&quot;入门概念&quot;&gt;&lt;/a&gt;入门概念&lt;/h1&gt;&lt;h2 id=&quot;字节码（ByteCode）&quot;&gt;&lt;a href=&quot;#字节码（ByteCode）&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="jvm学习笔记" scheme="https://www.junglezero.top/categories/jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jvm基础" scheme="https://www.junglezero.top/tags/jvm%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>绘卷水浒传 20周年企划 第五章 翻译</title>
    <link href="https://www.junglezero.top/2019/03/18/%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0-20%E5%91%A8%E5%B9%B4%E4%BC%81%E5%88%92-%E7%AC%AC%E4%BA%94%E7%AB%A0-%E7%BF%BB%E8%AF%91/"/>
    <id>https://www.junglezero.top/2019/03/18/卷水浒传-20周年企划-第五章-翻译/</id>
    <published>2019-03-18T15:01:00.000Z</published>
    <updated>2019-03-24T15:21:25.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第五章-龙门决战"><a href="#第五章-龙门决战" class="headerlink" title="第五章 龙门决战"></a>第五章 龙门决战</h1><p>天刚微微亮<br>山间灰蒙蒙的，在漫天飞舞的朝霭中，史进他们被敌人包围着。<br>看着般若雷迸溅出的血花，官兵们战战兢兢的后退了<br>“是援军——敌援到了！”<br>金山大师的脸上，没有慈悲，没有愤怒，而是无念无想——那双眼睛没有犹豫和后悔，只有如利刃般的光辉<br>官军一撤退，包围史进的圈子松散了，石秀他们也向着包围圈涌去，一下子，官军就崩溃了，陈达，杨春，僧兵们也跟了上来，张开弓，并排着长枪组成枪阵，团结一致向前突破着<br>增援过来的是一百多武僧，是棍棒和拳法的高手<br>“保护金山大师！”<br>金山大师前进着，史进，石秀左右守护，人们源源不断的。但是，从街道的远处传来了马蹄声和轰鸣的呐喊声。官军的增援也到了，每次剧烈的震荡，都是不下千人的军队在行进着<br>石秀盯着天上的星辰<br>“就要死在这里了吗？”</p><p>金山大师带头向敌人中心猛冲着，蜂拥而来的敌人就像怒涛一般，般若雷拨开箭矢，迸溅出火花，每次金棒一闪，就会倒下一片士兵<br>“这个罗刹，会下地狱的”<br>官军将领破口大骂，那个声音，回响在黎明的山间<br>“这个罗刹，会下地狱的”<br>对于回声，有了回应的话<br>“你在说洒家吗？”<br>与此同时，在官军的后方，一群人发出呐喊，他们突然向前方的官军发起攻击，无论是史进他们还是官军自己都以为他们是援军，他们也是官军的打扮，那群呐喊的人中，站着个巨汉，悠然的站着，一把扔掉了士兵的头盔，史进眼前一亮<br>“鲁智深！”</p><p><img src="/upload/pasted-205.png" alt="upload successful"><br>“来迟了！”<br>伴随着这一声，六十二斤的镔铁禅杖也卷起疾风的舞动起来，鲁智深趁机在懵逼中的官军中开辟一条道路，其他人也卸下官兵的伪装，出现了一伙“丐帮”军团，大多是乞丐，以洛阳，东京的乞丐为主力还有其他反对废佛的壮士，共计三千多人<br>“什么情况？”<br>伏兵的指挥官发出悲鸣，突然想起来了，先前林灵素亲兵中的一个小头目，组织起来一批无赖和乞丐，对他们予以重金赏赐，由于待遇很好，很快就聚集了不少人，真不愧是自傲的道士——得意忘形的太早了<br>丐帮军团恢复了原有的半裸状态，将官军冲散<br>“拿你们钱就是为了吃口饭罢了，现在咱们要消灭敌人”<br>冲在最前面的鲁智深，犹如砍瓜切菜一般挥舞着禅杖，在官军篝火的映照之下，他犹如罗汉一般<br>在这群人中，也有“活闪婆”王定六的身影，此外，还有登州莱山的“解家双雄”——“双头蛇”解珍和“双尾蝎”解宝</p><p><img src="/upload/pasted-206.png" alt="upload successful"></p><p><img src="/upload/pasted-207.png" alt="upload successful"><br>解珍解宝两兄弟位居梁山泊第34,35位，见者必死的双头蛇和拥有两条毒尾的蝎子便是这兄弟二人，他们纵横于山间之中，用猎叉和弓捕获猎物，是纯粹的猎人<br>官军陷入大乱，由于自己的内部出现敌人，他们的阵型被瓦解，四处乱窜。<br>金山大师自己也在战斗着，看见了鲁智深，鲁智深也看见了金山大师。在敌我厮杀激烈的山腰，上山的人和下山的人碰撞着，一片混乱，不久就散开了<br>金山大师和鲁智深，终于在后参道口相遇了，二人罗汉般的身姿，确实像是守护嵩山的仁王</p><hr><p>响起了胜利的呐喊，不是“万岁”而是“阿弥陀佛”<br>由于史进等人的奋进和鲁智深的援军突然杀入，官军撤退了，本以为设伏打击没有防备的僧众，不想却以自己受到袭击的方式结尾，官军暂时无法重整态势<br>官军撤出后参道后，在南方的街道布阵<br>史进等人也和“丐帮军”一同撤退到了“佛掌角”，在解氏兄弟的指挥下，后参道口处封锁道路的木材被移除了，兄弟二人为了查看是否还有其他的道路官军可用来侵入，马上消失在山中<br>史进也得到了暂时的休整，为与鲁智深再会而感到高兴<br>“得救了，智深师傅，你们怎么会在这里？”<br>王定六也混在乞丐当中<br>“骨头都要断了”<br>为了联合解氏兄弟，鲁智深，并安排各个丐帮的壮士混入道士军，“活闪婆”王定六已经快跑不动了<br>“吴军师简直不是人”<br>王定六一边和鲁智深同行，一边又要和丐帮和梁山泊取得联系，梁山泊也通知了鲁智深前往少林寺，预料到少林寺将会成为主战场的吴用，也派遣了精通山岳的解氏兄弟【注：两个人最后都死在了悬崖边上，一个生生掉下去摔死的，一个活活被乱箭钉在了悬崖上，绘卷水浒传的方腊篇也有两人死时的插画】，当然，吴用也预测到了能够动用的援军<br>“能见面，还是多亏了军师，是吧，和尚”<br>鲁智深一脸不悦，把腰间的酒葫芦扔给史进<br>“明明就是冲着洒家来了，哪里那么多废话”<br>“哼”<br>鲁智深的腰间总是备着酒葫芦。“荤酒勿入山门”——就是为了防备这个的，鲁智深自己也喝了起来，润湿了干渴的喉咙，他并没有看向史进，而是看向了金山大师<br>金山大师似乎认为突然出现的“丐帮军”是某个寺庙来的援军，在向和尚外貌的鲁智深行过礼后，就着手指挥着手下受轻伤的僧人进行救助工作，而且还派出侦察和监视的人，丝毫没有因为官军的撤退而疏忽大意<br>石秀也和陈达，杨春负责起周围的境界，他们举着火把，巡视着后参道附近，突然发现草丛在动，石秀拿着刀冲了过来，此时，听见了熟悉的声音<br>“等一下，是我”<br>“‘张神剑’，你还活着？”<br>从草丛中爬出来的，正是去探索桀街道的雇佣兵队长“张神剑”<br>“下面全是士兵，他们已经陆陆续续的在集结了”<br>回少林寺侦察的莫志，不久也返回了“佛掌角”<br>“林灵素的本部队正在从北麓登上来，我们没有回头路了”<br>接到报告的金山大师坐在大岩石上，沉默不语<br>他们已经被包围在了这“佛掌角”，“张神剑”是军人出身，很了解官军的作风<br>“等早晨一到，他们就会从山上杀过来，或者在林子中放火，即使想去龙门，也不能走正道了，还有别的路吗？”<br>“张神剑”问金山大师。向西延伸的山脊被树木覆盖，浮在微明天空上的山脊陡峭地耸立着。<br>“道路——”<br>金山大师正要说时，有声音从黑暗中传来<br>“——没有”<br>在火炬的光芒下，是身着虎皮的解宝，背后站着手持叉子的解珍<br>“没有别的路”<br>兄弟二人出生于登州莱山，是和山中的野兽相伴成长的，自己也犹如野兽一般，走过了无数的险路<br>他们说道<br>“即使没有人造的路，山也有它的出路”<br>兄弟二人鼓起气来，从胸腔中发出了犹如野兽般的咆哮，对于这个连周围空气都能震动的“葛氏禁气啸”，嵩山群峰的野兽们也开始回应，整个嵩山上下，咆哮声接连不断，此起彼伏<br>深山之中，是人们所不了解的野兽之道<br>哥哥解珍向薛永打听，因为薛永出生于河南，熟悉周边环境<br>“薛永兄弟，龙门就是在这里往西的方向吗？”<br>薛永点点头<br>解珍仰望消失在曙光中的星星，指着一座山峰。<br>“那边是西边”<br>并没有出路<br>但是。莱山的解氏兄弟却在天空，在山间，读着前进的“道”</p><hr><p>只点着一只火把<br>金山大师闭上眼睛，感觉到野兽的咆哮渐渐消失了，在渐渐恢复的寂静中，他睁开眼睛，眼前正站着鲁智深<br>金山大师低声沉吟着什么<br>在火把的光芒中，鲁智深的脸闪闪发光。虽然擦了脸颊的血迹，但灰色僧袍还是红黑潮湿的。<br>（是毘沙门天【多闻天王，为佛教护法之大神，是四天尊王之一，熟悉日本战国的朋友应该知道，就是上杉谦信经常cos的】，还是罗刹？）<br>从天而降的神明，到底是出于何种目的——那是金山大师眼前刹那间的幻像【侧面证明了就阴阳学而言，金山大师还是和智真长老有差距的】<br>“你是哪个寺庙的僧人？”<br>“洒家便是在五台山出家，智真长老的弟子——‘花和尚’鲁智深”</p><p><img src="/upload/pasted-210.png" alt="upload successful"><br>“智真的……”<br>“正是”<br>鲁智深把手伸进怀中，摸出一颗念珠<br>“这是智真长老的念珠，这上面画着的，就是达摩吧”<br>鲁智深简单的说明了在东京的斗法状况，金山大师摸索着念珠，端详了一会<br>“这念珠，是本僧与智真进行宗论时，最终没有胜负，相互交换的”<br>智真长老和金山大师的宗论，是关于“智”与“武”的，佛说着慈悲，可身边的护法却手持利剑，智与武真的能共存吗，谁又能更胜一筹，真正带来和平的，又是哪个呢？<br>金山提倡的是修行本身就是战胜烦恼的过程，而智真则认为一切不昧，烦恼，已经烦恼了<br>然后，两人各自完成了自己的修行，做出了自己的选择<br>金山踏上了苦行恶行的武道，智真选择的是只管打坐冥想的智道<br>但是，在没有岔路的道路上，在天地间无边无际的荒野上，昂首前进的人，现在正站在金山的面前<br>“鲁智深啊——”<br>金山大师双手合十<br>“无道，亦无止境——你是唯一踏上旅途的人吧”<br>“什么东西啊，洒家也不晓得”<br>鲁智深擦了擦被酒弄湿的胡子，然后，像孩子一样笑了<br>“洒家就是找你的”<br>金山大师也豁然的笑了<br>“那么，金山大师啊，今后怎么办啊”<br>武僧们，受伤的尼姑们，佛教信徒们以及丐帮的兄弟们，都在看着二人，金山大师看了看手中的念珠，站在大家面前。那颗心自然已经做出了决定<br>“出发吧”<br>这样说道<br>鲁智深手中握着装满酒的葫芦，眼睛盯着大师<br>“佛法本为苦难烦恼之人而生，如果这泱泱大国的人无忧无虑的追名逐利，无忧无虑的贪图享乐。佛法已经没有必要了，吾等会毁灭，但是，吾等不能白白的死去，点燃最后的灯火，向西进发吧”<br>金山大师抬起头，指着已经被黎明染了色的西峰，那是没有出路的嵩山群峰，而龙门就在那西面，而更遥远的西面是天竺，最后的西方净土<br>“好吧！”<br>一线阳光照在了鲁智深的脸上<br>“地狱之道上，就由洒家当先锋吧”</p><hr><p>天一亮起来，战场上的惨状也就看的一清二楚了，清爽的晨光中，四处遍布尸体，是死去的僧侣，官军，尼姑，以及雇佣军<br>银树咬着嘴唇，呆呆的望着眼前的情景，有死不瞑目的尸体，也有像睡着一般宁静的尸体<br>周围的血迹，染湿了银树的鞋子，一群乌鸦犹如乌云一般开始覆盖朝阳<br>薛永的脸上也沾满了血<br>银树拿出自己的手巾为他擦去血迹，指尖犹如寒冰一样冰凉<br>“这世上，惨不忍睹的事……还真是多啊”<br>“好的是事情也很多啊”<br>“——是啊”<br>薛永和银树一起，为受伤的彭尼贴上膏药，薛家的膏药止血镇痛的效果很好，彭尼微微睁开眼睛，旋即又闭上了<br>李忠正在砍伐周围的树木制作担架，用来运送伤者，龙门之旅，是一场死亡之行。尽管如此，所有人呢都认为这也比被官军杀死好，薛永正在给伤员贴上自家的膏药，石秀站了起来<br>“薛永，你和那孩子赶紧先跑吧”<br>“石秀大哥？”<br>“两个人去什么地方都好，千万不要再去龙门送死了”<br>人群在解氏兄弟的带领下开始行动起来，向西，越过险峻的山峰<br>银树为一个老僧贴上最后一贴膏药后，站了起来，问石秀<br>“那你打算怎么办？”<br>“这种事情，我总能应付的”<br>“史进也要去吗？”<br>“他的师父好像在龙门，不去打声招呼的话，作为弟子就有些过分了”<br>银树朝着远处的天空望去，天空晴朗，朝阳耀眼<br>“——这样啊”<br>银树却笑了。插在头发上的野花，在晨风中散落。<br><img src="/upload/pasted-222.png" alt="upload successful"><br>“那我就去东京吧”</p><hr><p>“金山大师，我要去东京了”<br>银树告诉走在前面的金山大师<br>“我要去见我的父亲，我有好多事要告诉他，这种事情不能再发生下去了，人自己的信仰，不该由人自己所决定吗，我无法忍受大家就像不存在一样被抹杀，被淡忘”<br>银树正气凛然，声音中充满的强烈的决心<br>“所以我要去东京”<br>薛永很了解银树。史进说道<br>“公主殿下，报仇的事只能放一下了”<br>银树点了点头<br>“那种事，已经无关紧要了”<br>金山大师默默听银树说完，把手伸到怀里，拿出一颗念珠<br>这是金山大师和智真长老当前交换，然后智真长老有托付给鲁智深，鲁智深又返还给金山大师的念珠，上面刻着达摩祖师，连念珠也已经被血染红了，大师用粗大的手指擦去念珠上的血迹，把它放在银树的手中<br>“……人的生命，就犹如这念珠一样，人与人相识相遇，就好像一个个念珠串联起来的串，连续不断，公主啊，你的生命”<br>金山大师双手握着银树的手和念珠<br>“不要忘了自己也是这串念珠中的一颗啊”<br>随着手掌的温暖，银树也明白了，大师是想告诉自己“活下去”，不论发生什么都要坚持活下去<br>银树一直想问<br>“天有三日，满月辉耀”<br>能够知道当初“不祥预言”的机会也就只有现在了<br>“大师”<br>本打算要问，但是银树取而代之的是微笑，她紧紧的握住念珠<br>“向父亲请愿停止废佛后，我一定会回来的”<br>史进猛地推了薛永一把<br>“你也跟她一起去吧”<br>薛永正在犹豫，史进把头转到了后面的伤者方向，彭尼正要挣扎的站起来，被李忠阻止了<br>“你难道打算让彭尼去吗？薛永，除了你以外，谁还能拼命的保护银树呢？”<br>“但是，我”<br>“去吧”<br>史进把棒子扔到薛永手中</p><hr><p>在朝霞之中，薛永和银树下山到了南边的山脚，位于官军的北面，他们避开街道，沿着险峻的山腰顺着谷川而下，薛永走在前面，拨开杂草，为银树开路，两个人的身影很快就消失在山间了<br>“是个会照顾人的男人啊”<br>李忠发出不知是叹息还是哈欠的气息，伸了伸懒腰<br>“年轻还真好啊”<br>清晨的空气在这种时候让人觉得很清爽<br>“其他受伤的人……”<br>“活着的人没人比你伤的更加严重了”<br>李忠吩咐手下把彭尼抬上担架<br>解珍解宝走在前面，爬到山尖上，走了一会就回头举着叉子挥动几下，发出可以通行的信号<br>大家默默的跟着，背着朝阳前进，有背负着伤员的，有扶着拐杖的，大家互相搀扶，朝着西边的山脊一点点前进着<br>时迁和王定六正在四处侦察<br>他们是“传令”，无论周遭发生什么事情，他们都要第一时间把情况通报给梁山泊，赶得上赶不上从来不是问题<br>“你要去哪啊”<br>“不用你管”<br>“我可比你快啊”<br>时迁把肩上的老鼠放在怀中<br>“我身材瘦小，行动起来会更加方便”<br>这样说着，时迁一个人消失在覆盖山峦的草丛中。<br>史进向薛永他们离去的南方一眼后，也准备开始上路了<br><img src="/upload/pasted-223.png" alt="upload successful"><br>“向龙门出发！”</p><hr><p>林灵素到达少林寺时，太阳已经升了起来<br>本来想活捉金山大师， 品尝胜利的滋味，可此时的嵩山却空空如也<br>林灵素本来打算等待节度使的军队到达后发起总攻，但是，由于僧侣们已经准备开始逃脱了，急忙派遣了伏兵，正面的本队也发起了进攻，杀过来时，最后院中不过三个人，连一只狗都没有留下<br>（没关系，关键还是金山）<br>金山大师是“谋反”的主谋，只要讨伐了金山大师，“镇压谋反”就算大功告成了<br>林灵素走进已经烧毁的达摩堂，去检查金山大师的首级，林灵素知道金山大师什么样子<br>“这不是金山大师！”<br>林灵素一脚踢开被搬过来的天穹和尚的头，骨碌骨碌的滚着，碰到了达摩像的脚停了下来，空洞的眼神，正在向着林灵素笑着<br>林灵素相当着急，明天，郭道士已经受命在东京做法发生“奇迹”，与此同时，“林元帅成功讨伐逆贼的”的奏折，将会呈到御前<br>“赶快找到金山！”<br>林灵素命令手下的道士<br>“不论死活，抓住赏金百两”<br>道士们立刻兴奋起来，争先恐后的行动着，达摩堂的门一晃，猫儿从缝隙中无声的滑了进来<br>“节度使的军队呢？”<br>林灵素一脸不悦，却也没有招呼别人<br>“他们马上会出战的”<br>猫儿观察仔细的眼睛，在达摩堂中闪闪发光<br>“这是贵妃大人的忠告：‘不要催促，要下命令’。因为你是陛下任命的元帅，如果他们不服从命令的话，他们就是造反”<br>“那慕容贵妃现在何处”<br>“我的任务完成了，我要出发了，有更重要的事情，荣德公主已经向东京进发了”<br>“公主？”<br>猫儿急切的点了点头<br>慕容贵妃是到最后都能精明盘算的人，为了应对这种不测之事，派出了自己心腹猫儿<br>“公主想要向他父亲控诉你的恶行，而且她也知道贵妃还在四处活动”<br>“这可就不好了”<br>“公主正在一路向东，只有一个护卫，应该很好杀掉”<br>“你是不是也知道金山大师的去向啊？”<br>“我去调查一下，知道了就告诉你”<br>猫儿心不在焉<br>（我的任务是加重骚乱，引发战争）<br>战事拖长，战争形势扩大，如果节度使们不出兵，就无法完成慕容贵妃的野心<br>林灵素用怀疑的目光凝视着猫儿的脸。<br>“慕容贵妃的真正目的是什么？”<br>猫儿咂了咂嘴。<br>“磨磨蹭蹭的，会来不及的”<br>与贵妃相似的狂妄的口吻触动了林灵素的肝火<br>“你曾经是那人的弟子，那个契丹人……是叫狐狸还是狗来着？”</p><p><img src="/upload/pasted-221.png" alt="upload successful"><br>“白骨猫”【这个人是绘卷水浒自创人物，是个忍者类型的，也是喜欢四处搞事】<br>“对了，那人可是个高手，飞刀，投毒，化妆都样样精通，当年不就是她，化妆成侍女‘月仙’，让王皇后吃下毒月饼，你怎么不化妆成个尼姑把公主杀掉呢？”<br>“师父是师父，我不像她那样，但是问题不大，赶紧派人追公主吧”<br>扔下这句话，猫儿又从达摩堂无声地滑了出来。<br>她躲在院子中的松树梢上观察着【也不知是个什么操作……】不一会就有五十人的队伍出发，看到这个，猫儿离家少林寺，躲着士兵的监视，就这样悠闲的下了山<br>（可怜的金奴公主）<br>猫儿手中握着一个红衣布娃娃<br>猫儿也从师父“白骨猫”那里学来了化妆术，小时候曾化妆成小宦官潜入后宫，向慕容贵妃递送情报的也是猫儿<br>她还记得陪她一起玩耍的金奴<br>猫儿偷了玩偶，金奴还护着她<br>（我不能违抗贵妃大人……但是我绝不会杀你的）<br>猫儿深信不疑，这至少是一种“友情”<br>（再见了，金奴公主）<br>猫儿拿着娃娃走在耀眼的阳光下。然后，忽然觉得听到风的声音，想回头看向后面。<br>她的瞳孔，突然扩大了，下一个瞬间，猫儿的头就被砍下了，像皮球一样滚在地上<br>手中握着的玩偶，不可思议的睁开眼睛，映照着晚夏的蓝天<br>“你已经杀掉那个女孩了吗？”<br>林灵素看着手持沾满鲜血的弯刀的怪道士，皱起了眉头<br>“贵妃的目的还不知道，所以还不到杀她的时候啊”<br>“知道秘密的人越少越好”<br>兜帽下的怪道士似乎在嘲笑林灵素的懦弱<br>林灵素也没在说什么了<br>追兵应该已经追上金奴公主了吧<br>“通真达灵元妙先生”林灵素也在一点点的接近成功</p><hr><p>薛永和银树在山脚的农家下借了匹马，取道向东<br>金山大师告诉他们家中种麻的人家寄存着少林寺的马<br>从简陋的马厩中牵出一匹马，是一匹漂亮的白马，用来运送经典，牵引高僧的马车，负责照料的独眼老农说出了它的名字<br>“帕鲁亚提，梵语的意思是‘示现’，你们叫它示现就好了”<br>“示现”是一匹很静的马，但脚力非凡，由于只有一匹马，薛永把银树放在马鞍前，即使载着两人，速度也一点不慢</p><p><img src="/upload/pasted-224.png" alt="upload successful"><br>两个人共骑一匹马在路上奔驰，既不是士兵，也不是僧侣，没有被人追查盘问的担心，在旁人看来，只不过是私奔的年轻情侣罢了<br>从西京洛阳到东京开封，距离四百多里，其间道路平整，骑快马的话半日就能到<br>太白也紧紧跟在后面，突然叫了起来，薛永回头一看，后面尘土飞扬，沙尘越来越近。不一会就能看见人影了，是追兵到了<br>“抓住那个女孩！”<br>“追兵？怎么会有追兵？”<br>箭从他们身边飞过，薛永鞭策马，但已经开始疲惫的“示现”反而越来越慢<br>（这样下去，会被追上的）<br>薛永让银树握住缰绳<br>“练过骑马吗？”<br>“在宫中稍微练过”<br>“太好了”<br>薛永拿起挂着马鞍上的棍子，从开始减速的马上跳了下来，银树马上就知道什么情况了，自己也想从马上跳下来<br>“薛永，我也要战斗”<br>“你赶快沿着路跑吧”<br>前进吧——薛永用棒子狠狠的打了示现的屁股</p><p>银树回头一看，薛永拿着棍子，站在道路中间<br>向要经过的追兵发起攻击，用棍子把敌人从马上打下来，士兵们拔出剑，包围了薛永<br>（薛永！薛永！）<br>“示现”急速的奔跑着，和那个名字正相反，薛永的身姿消失在后面<br>（千万不要死了）<br>银树挥泪向前，风呼啸而过</p><p><img src="/upload/pasted-225.png" alt="upload successful"><br>（谁都不能再死掉了）<br>银树紧握着缰绳，泪珠在风中消散<br>视野逐渐模糊，也看不清楚前方，道路也渐渐扭曲，“示现”正在狂奔<br>奔向让人生厌的东京<br>前往令人绝望的皇宫<br>回到对人无情的父亲身边</p><hr><p>伊水河畔传来轻轻的诵经声<br>这是抚慰受伤的心灵，安抚逝去的灵魂的声音<br>龙门的僧侣，无论是谁都很安定，他们在这里做着最后的法事，即身成佛。必然能在天界轮回。<br>从长安大慈恩寺来的高僧正在木台上说道，周围聚集着从迫害中逃出的信徒们<br>“人最大的罪过就是杀生，而杀生中，杀人是最沉重的罪，这是为什么呢？因为灵魂寄宿在肉体上，是比深海底的神龟每百年上浮一次，被洞中漂浮的木板敲中头部更加难得的奇迹，那么为什么‘贵为人’呢，这是因为人能听取教化，有所领悟，能从轮回当中解脱”<br>夏末的河畔，吹过凉爽的风<br>那里已经是净土<br>死去的心也已经平静下来<br>绝望似乎是甜美的，就这么什么也不做，只是等待着结束而已——临终时，会有乘着五色云彩的佛来迎接他们<br>人们正在默默的诵经<br>鼻腔猛地被浓烈的血味刺激到了<br>抬头一看，也不知哪里来的僧侣，正沿着河岸，朝着石窟进发，一开始看到一个人，接着又看着几个人结伴而来，大家互相搀扶着前进<br>仿佛混淆与亡者之间，疲惫不堪的人们正在游荡，有僧人，有老者，有乞丐，也有武者<br>龙门的人们都忘了诵经，注视着他们的身影</p><hr><p>这一天，梦魇笼罩在皇帝的寝宫中<br>徽宗皇帝被噩梦吓醒，出了一身冷汗。宦官们为擦干身体，换上衣服后，外戚王都尉来了<br>王皇后的哥哥王晋卿是个有才之人，从年轻时代就受皇帝亲信，连寝宫也允许出入<br>“听闻陛下身体不适就赶过来了……陛下身体如何？”<br>在昏暗的烛光中，王都尉正对着龙塌上的皇上低语着什么<br>“不过是一场梦罢了”<br>“嗯……虽然记不清楚但是总感觉看见了冲天的火光”<br>“难道是天神？”<br>王都尉大吃一惊，沉默不语<br>“怎么了”<br>“没什么，不是大事”<br>“你说实话”<br>王都尉带来的小侍从在房间的角落点起了香，甜甜的香味让人昏昏欲睡，皇帝心里却产生了莫名其妙的骚动，根本就无法入睡<br>最近，无论宫中的宴席，还是东京名媛李师师，他都没有去碰，控制着自己的“悠闲自在”，忧虑的事情是在太多了<br>“太子也因废佛而悲伤，卧病在床，大臣中的反对者也很多，宿元景太尉等人，甚至还写了厚厚的奏疏来揭发道士们的恶行，虽然撤销了蔡京但是听说政事也因此拖沓，可是朝令夕改不好吧”<br>“古人云，君子豹变【比喻润饰事业、文字或迁善去恶，出处：《周易·革》】”<br>皇帝含着侍从献上的甜蜜药水，叹了口气<br>“为什么智真会反对？不就是林灵素创造的奇迹镇住了怪相吗，不过是佛道合一，把称呼改变一下而已……这种事真的怨气很大吗？”<br>“陛下能否见上智真长老一面？”<br>“朕吗？”<br>“如果陛下被说服的话，请一定……”<br>王都尉的声音飘飘悠悠，好像很远，又好像很近<br>并且，从很远的地方，传来了如天人般美丽的声音<br>“智真长老到了”</p><p><img src="/upload/pasted-229.png" alt="upload successful"><br>门一开，一只狮子跳了进来，皇帝惊呼一声，吓得后退，咆哮的狮子的鬃毛正在燃烧，其上站立着文殊菩萨，左持莲华，右持利剑，眼睛流露着笑意【文殊菩萨：惊不惊喜，意不意外？（误）】，皇帝却因为极度的恐慌而晕倒了</p><p>醒来时，皇帝已经躺在了床上，有阳光从窗户中射进来，也不知是早晨还是傍晚，不久，郑皇后就来了，这是在王皇后去世后新册封的一个皇后，没能生子，但为人贤良<br>皇帝拉着郑皇后的手<br>“王都尉不在这里吗？”<br>“没有，陛下又做了什么梦吧”<br>问了宦官，也说没人来过<br>“陛下一直在歇息，从未有人打扰”<br>皇后说，来的时候看见了不可思议的景象<br>“在走廊中，看见了一个高个子白衣老者，只是背影，未能看清面孔，简直像天上的云朵，一转眼就消失了”<br>宫中还有那样的老人吗——郑皇后默默的低下了头</p><hr><p>要抵抗到最后<br>怀着这样的决心，逃离少林寺的人们终于到了龙门，他们在解氏兄弟的带领下，傍晚时躲在剑山周边，他们就这样走在人生最艰难的路上，一路疲惫不堪，倒下的人也很多<br>尽管如此，仰望着夕阳下石窟的脸，也是感到很安心和喜悦</p><p><img src="/upload/pasted-230.png" alt="upload successful"><br>龙门石窟是在伊水两岸耸立的岩山上建造的巨大的石窟寺院。<br>开凿于北魏时期，在佛教兴盛的唐朝又建造了很多石窟，大大小小的佛像坐落在岩洞里，墙面画着五彩缤纷的极乐图<br>这人间的极乐世界，不久就会成为大宋佛法断绝之地<br>率领这群殉教者的金山大师，衣服上的血迹已经干涸，手中的般若雷掷地有声，虽然般若雷已经打翻了数十个敌人，但是棒上并没有沾染血迹，正在夕阳下闪闪发光<br>石秀在旁守护着金山大师，史进在队伍尾断后<br>队尾是伤者，由于负伤，移动缓慢，李忠背着彭尼，彭尼看上去十分痛苦，但也不曾落泪<br>他们翻山越岭，道路渐渐平缓，能看见山脚的平原了，斜坡上已经有了秋天的花，史进摘了几朵悬崖边上的红花，塞给彭尼<br>“……故乡的山上也开着这样的花”<br>虽然是件不值一提的小事，但是彭尼还是很高兴<br>“以前，我喜欢把花插在头发上”<br>“要不要高歌一曲？”<br>已经可以远远看到镶嵌着银边的伊水了<br>龙门周围还没有官兵的身影<br>但是这也只是时间问题了吧</p><p>龙门的石窟寺院中已经来了数百名僧侣，与法难做斗争的人在少林寺，而想要守护经典的人则聚集在龙门<br>现在一汇合，已经有三千多人了<br>这可给隐居于此的僧侣带来不少麻烦<br>他们已经放弃了抵抗，为了成为即身佛而坚持绝食和诵经，已经有人饿死了，被安葬在伊水河畔<br>虽然食物储备很少，但是先下山的乞丐也不知在哪里搞来了食物，除了原有的锅外还用上了青铜香炉，煮着杂粮和豆子混合的粥，巨大的石佛脚下，冒起了热腾腾的气<br>“释迦牟尼之所以敢于舍弃自身，是为了抚慰饥饿的老虎，他的自我牺牲并不是为了拯救迷途的鹿——而是为了成全自己”【没找到这个典故】<br>金山大师给绝食的僧人送上了粥<br>史进等人在大石窟前的车座上，用金盆代锅煮着杂烩粥，乞丐们还不知从哪里搞来了肉和鸡蛋<br>石秀在贡物盘子里盛满了粥，递给鲁智深<br>“最后一餐，爽吃一顿吧”<br>石秀又用勺子在锅底捞出一大块肉，放在史进的盘子里<br>陈达他们默默的吃着，佛像正代替柴火在篝火中燃烧着<br>李忠看着火焰<br>“胜算几成？”<br>杨春回答道<br>“谁还在乎这个”<br>再来一盘——陈达向锅伸出了手<br>鲁智深一边喝着仅剩的一点酒，一边眺望着金色的伊水，沐浴着夕阳，犹如流淌的黄金一般<br>河滩上有人行进着，有僧侣，有信徒<br>金山大师也站在卢遮那佛【龙门最大的佛像】面前，看着它<br>他们是为了死而聚集在此地<br>（不，是为了活下去）<br>直到最后，为了更好的活着，抛弃过去，抛弃未来，只是为了活在当下<br>（如果强大……）<br>大师这样想着<br>大师深信“强大可以战胜一切烦恼”，大师不禁想起了曾经和自己交过手的对手，许多已经不记得面孔了<br>本打算为了追求什么，守护什么而战斗，但现在手里却什么也没有。<br>大师的手静静地胸口上<br>鲁智深手持空葫芦，慢慢的站在大师的旁边<br>“没有酒吗？”<br>金山大师在黄昏中回首，笑了。<br>“有酒的话，会很开心吧。”<br>夕阳无限好</p><p><img src="/upload/pasted-231.png" alt="upload successful"><br>在这无限风光的夕阳之下，自己好像活过来一般，无论是严厉的修行，戒律，冥想，坐禅，都没有真正的解答他的疑惑<br>石窟中，人们为遇难者简单的举行了法事，将剩下的香全部烧掉，香气正在静静的流淌<br>（无论是多么强大，多么有智慧，大概都会输给“非道”吧）<br>这是正是生命的教诲<br>（但是）<br>人——只有“生存”下去，才能被真正救赎吧</p><hr><p>节度使“老风流”王焕正在思考<br>“和尚和道士在打架？这种事在另一个世界也可以做”<br>漂亮的侍女们围着王焕，有用扇子扇风的，有倒茶的，还有剥水果的，心情愉悦<br>“白马寺已经被破坏，少林寺也已经一片火海”<br>“啊，那还真是可怕啊”<br>听到“月李”说的话，“百合”微微皱眉<br>王家上下，从王焕到侍女，大多都信奉佛教，虽然也不是全信，但也是有事没事去寺庙烧上一炷香<br>“已经没有放生的机会了吗”<br>“海棠”也同情这些佛教徒，王焕问身边的部下<br>“太原的徐京怎么说？”<br>“他只是报病‘因病不能上阵’，可是接连不断的传令催促上阵，谁又能违抗敕令呢？”<br>“徐京也是个义侠心很强的男人，一定很为难吧。山西边境上又有契丹人转来转去，徐京管辖内又有个叫田虎的山贼在胡闹。近日，有谣言说要那家伙称王。这时，肯定不想随便离开任地吧。为了道士争夺权力”<br>“芍药”一边为王焕揉肩一边这样想着，青年时，王焕因风流而闻名，他是绝对不会管这种无聊的事的<br>而且，僧侣们败局已定，这是显而易见的<br>王焕手中拿着一个漂亮的梳子，是一个早年间流行的梳子<br>“好，就这么决定了”<br>王焕紧紧的攥住梳子，“牡丹”问道<br>“要去哪里？”<br><img src="/upload/pasted-232.png" alt="upload successful"><br>“当然是龙门了，要着手准备出发了”<br>侍女们熟练的为王焕换上甲胄，“水仙”和“茶花”两人带来了王焕平时爱用的长枪<br>准备完毕后，王焕捋着胡子，大步迈出宅邸<br>侍女耳边响起了王焕豪迈的声音<br>“我就是老将王焕，你们这些人觉悟吧”<br>侍女们都在歪着头，想着同样的问题<br>“老爷要做哪一边的援军呢？”</p><hr><p>银树继续奔驰在通向东京的大道上<br>太阳渐渐倾斜了，已经是下午了，街道上热闹非凡，好像什么事情也没发生一样，人们来来往往<br>人们惊讶的看着拼命抱住马的少女<br>银树所在的尼姑寺当然没有马，但是银树的骑术却很厉害<br>在宫中和哥哥练习骑马的日子好像复苏过来，哥哥因为害怕骑马吓哭了【这里好像是指的宋钦宗吧】，金奴却满不在乎的在御苑中骑着马跑来跑去<br>金奴公主真的是既聪明又勇敢<br>（一定要找到父亲，揭露慕容贵妃的阴谋，阻止官军）<br>银树第一次不是为了亡母而是为了现世的人们生存而奔走<br>白马“示现”马不停蹄，途中，在一个农家得到了水和饲料，就这么一口气跑完了四百里的路</p><p><img src="/upload/pasted-233.png" alt="upload successful"><br>夕阳下，已经可以看见东京开封的城墙了，城门开着。银树从新郑门进入，一面问路，一边跨过州桥，取道大相国寺朝着宫城走去，由于当初出奔时是在深夜，所以这也是她第一次看到东京的街道，绚丽多姿，人山人海，看起来很愉快，似乎从未想象过这个世界上的某个角落会发生战斗。<br>宫城位于开封城的北方，被称为龙台的高台。<br>银树疲劳得几乎要昏过去，竭尽全力走到了宫城。墙壁和瓦片的模样，隐约地存在于记忆中。银树找到门跑了过来。可是，有卫兵，当然，她被拦了下来<br>“我是永德公主，我要见我父亲”<br>她在马上向卫兵通报<br>从马上告诉他们，卫兵们吓得目瞪口呆，但是不一会就回过神来<br>“美丽的公主殿下呀，您找哪位父亲啊？”<br>“这还用说，当然是当今圣上了，赶快开门”<br>卫兵们笑了起来<br>“怎么会有你这么个不整洁的公主啊，太可怜了，脑子出了些问题啊”<br>银树就这样被人泼了盆冷水，赶出了宫门<br>路人也在笑话银树，她就这么默默的走在街道上，头发凌乱，衣服上也沾满灰尘，连个耳环也没有，马具是村民的简陋货，现在这个样子，真的也比乞丐强不到哪里去<br>银树离开宫门，又向人问路，从城内向西走。那是大臣们的宅邸并排的一角，以其中最奢华的住宅之一为目标。可是守门人挡住了他<br>“你个要饭的，滚一边去”<br>看门人还想揍银树<br>“赶紧的，闪一边去”<br>银树又被赶了出来，这时，门开了，出来一只华丽的队伍，打扮豪华的人们骑着漂亮的马出来了，这只队伍中心，有她的舅父——“王都尉”王晋卿<br>王晋卿是亡故的王皇后的兄长，也是皇帝很宠幸的，他有众多护卫，周围又围上来看热闹的<br>银树倒在路上，本想大叫，不想却被看门人用棍子压在地上<br>队伍陆陆续续的穿过东京的街道，王晋卿正直了身子，驱马前进，有一瞬间，目光转向了倒在地上的少女，就这样从她身边经过</p><p><img src="/upload/pasted-234.png" alt="upload successful"><br>(是乞丐吗？)<br>他曾命令对于后门的乞丐，不论谁都要施舍些东西，这个女孩大概还不知道这个规定吧<br>队伍一离开，看门人也放开了银树<br>“赶紧到后门要饭去吧”<br>银树摇摇晃晃的站了起来，她已经走投无路了，连舅父也忘了她。实际上这十年间也没有见过面，也没有写过信，不过是以管家的名义，每个季节在送东西也就仅此而已，明明知道自己在尼姑庵中，却对法难无动于衷<br>十年的时光，足以让人忘记一个不幸的侄女<br>银树感觉到了无力，现在公主已经没有家人了东京百万人，而爱金奴的只有一个<br>（母亲……）<br>刚要哭起来的银树，突然抬起头，像是在寻找着什么，从府邸的围墙的对面，散发出令人怀念的香味。七里香——银木犀的香气。<br>银树咬紧牙关，再次站了起来，队伍已经离开好远了<br>人们都在议论<br>“王都尉要去艮狱了。今天，林教主预言会发生奇迹”<br>“听说皇帝也会御驾前往”</p><hr><p>艮狱是位于宫城东北的大庭园<br>皇帝按照道士的预言建造了园子。园林方圆六里。内部设置了假山、树林、湖沼等。用从全国寄来的奇石和珍奇的植物装饰，又放养稀有动物，使之成为地上的乐园，花石纲的灾难，可以说就是为了营造这个庭院而发生的<br>平时是皇族和贵族官僚的场所，节日有时也对平民开放。<br>今天，皇帝为了让民众看到“天仙的奇迹”，特意开了门<br>在园内的寿山，郭京已经率领众道士等待皇帝的到来<br>今天，在皇帝面前，寿山前的巨大太湖石会粉碎，从中出现青华帝君的玉像，为了表现空中飘动的五色云彩，已经准备了上了色的米粉和仙鹤，正在皇帝为眼前的景象感到震惊时，会有“使者”呈上关于林灵素“谋反已被镇压”的捷报<br>（玉像的脸和林教主一模一样，肯定没问题的）<br>而且，玉像做成了中空的，里面有镜子和蜡烛，双眼看上去应该闪闪发光，郭道士也很擅长这种“表演”<br>（还是要向林教主学习啊）<br>虽然不知道林灵素何时才能取得“实质的胜利”，但是前前后后有这么多把戏，总能说明些问题的<br>（陛下还没到吗？）<br>御门突然变得热闹起来</p><p>皇帝从宫城出，乘着轿子直奔艮狱，宠臣王都尉和护卫金吾部队在旁护送着，带领护卫部队的是金吾将军曹晟，也是皇帝亲信的年轻将校，他的祖父是被誉为“宋良将第一”的曹彬，是一名仁将，拔下城池，却不曾杀过一人，在军中颇有威望，因家族的熏陶，曹晟也是名门子弟中少有的有骨气的年轻人，所率领的部队也都是精悍的年轻人，在他们的护卫下，皇帝的轿子缓缓的向寿山进发<br>道路已经提前清扫干净，周围摆上了兰花，又有孔雀正在啄食。确实是神仙世界的情调，但是，轿中的皇帝脸色并不好<br>跟随的王都尉，为了排遣皇帝的心情而搭话<br>“到底是什么奇迹呢？要是让智真长老也来看看，说不定能改变他的心意呢”<br>“长老已经停止饮食数日，一心念着文殊菩萨，已经到了无法站立的地步”<br>“那么，不远了……”<br>即使皇帝亲自劝说，智真长老也拒绝改宗，他憔悴的样子给了天生感性的皇帝以强烈的冲击<br>自打那天起，皇帝就一直为噩梦所困扰<br>智真长老的背后，冲天的文殊菩萨站了起来，目光炯炯如雷，就这么注视着皇帝<br>（朕，究竟错了什么？）<br>但是今天，如果能看到“奇迹”的话，说不定能解开自己心中疑惑</p><p>队伍正在行进着<br>银树在草丛中爬着，无论如何也要接近皇帝的轿子<br>（即使被杀也无妨）<br>周遭的树枝正刺着银树<br>她突然从草丛中跳出，推开护卫，向轿子飞奔而去<br>“请马上停止废佛，救救大家！”</p><p><img src="/upload/pasted-235.png" alt="upload successful"><br>周围护卫马上反应过来，抓住了银树，把她按在地上，情况突然有变，曹晟拔出剑来，守卫们把银树压在一旁，给轿子开路<br>“陛下，请继续上路吧”<br>皇帝拨开珠帘，露出脸来<br>“什么情况，那女孩是什么人”<br>“也不知是哪里疯掉的乞丐……”<br>皇帝瞥见了正在被按倒在地的女儿的脸，王都尉也觉得很可疑，轿子就这样从银树身边经过<br>银树想放声大喊，但是喉咙犹如堵住了一般发不出声音，银树哭了起来，一边哭一边哇哇的叫着<br>轿子渐行渐远<br>突然停了下来<br>皇帝从轿子中惊奇的看着银树</p><p><img src="/upload/pasted-236.png" alt="upload successful"><br>“是金奴吗？！”</p><p><img src="/upload/pasted-237.png" alt="upload successful"><br>最吃惊的还是银树——金奴自己<br>感到冷寂的十年时光一瞬间散开了，后宫中母亲微笑的脸，父亲抚摸头发的手<br>晴朗的天空，回响着一个声音<br>“……父皇！”<br>皇帝用龙袍擦干女儿脸上的泪水，露出了和去世皇后一模一样的脸<br>皇帝怀抱着抽泣的女儿，望着天空<br>“‘奇迹’说的就是这个吧”</p><hr><p>傍晚时候，东京的郭道士赶紧派人向林灵素汇报了情况<br>结果就是，皇帝并没有看见林灵素精心安排的“奇迹”，却把十年未见的女儿带回了宫中，之后的情况也不清楚了<br>但是知道的情况就是，王都尉，宿元景等“反废佛派”的大臣被召见，因反对废佛而被罢免的蔡京也被招了回来<br>（“法难”就这样结束了吗？）<br>郭道士望着夕阳<br>（不，他们已经来不及了）<br>最后的战斗恐怕已经开始了，或者说已经结束了<br>人少的僧侣们是不可能取胜的<br>（和尚们被全灭，结果还是“废佛”）</p><p><img src="/upload/pasted-238.png" alt="upload successful"><br>与此同时，夕阳也将伊水染成了金色，由于夏季河枯，水量少，它反射着太阳的光辉，显得更加美丽<br>但是，这一带的空气却被杀伐的战尘包围着<br>龙门的僧侣们吃完最后一餐没过多久，林灵素就率领着官军陆续抵达伊水河畔<br>官军在广阔的南岸布阵，龙门石窟建在伊水两岸，卢遮那佛所在的北岸聚集着主要的石窟。僧侣们固守的也是这个北岸。<br>最后的僧侣向龙门进发的消息很早就到了林灵素耳朵里，他在等着全部的僧侣聚集到龙门，如果“叛军”人数较少的话，即使全歼，也没什么意思<br>林灵素打算渡过伊水，直攻北岸<br>龙门石窟是著名的佛教圣地。作为佛法灭亡的舞台是无可挑剔的。而且，战后，作为“林灵素奇迹的圣地”，应该也会名留青史吧。<br>“那些节度使，已经指望不上了”<br>林灵素很得意，除了一万五千个官军之外，还聚集手下亲信的道士，组成了名为“六甲神兵”的亲卫队，其中人戒着道袍，以铜剑为兵器，为了防止有奸细混入，这里只有有道观度牒身份明确的道士<br>“这也是一万五千人”<br>林灵素在手下的道士面前。骄傲的宣言道<br>“明天，就是大宋佛教存在的最后一天了”<br>也是自己成为这个国家的“神”的日子</p><hr><p>夜无声无息的深了下来<br>夜空的星星，不知是为战争的气息而战栗，还是感到人们的不安，总是不停地闪烁着。<br>星空之下，史进正掰着手指头盘算着<br>“敌人是三万，我们是三千……不”<br>在昏暗的灯光照耀下的石窟中<br>“能够上阵的也就两千”<br>石秀啃着作为供品留下来的水果。李忠向史进也扔了个果子。<br>“和尚们也未必都能战斗，也有很多伤员啊”<br>“我要战斗”<br>莫志断然的说道<br>“吐蕃的法僧，拉金帕尔马德鲁杰，用弓箭杀死了坚持废佛的王，挽救了佛法。他没有受到佛罚。而被誉为圣人。我也会战斗的”<br>灯油快烧完了，火苗飘忽不定的摇摆着，在这缥缈的灯火下，佛像的表情看上去很不可思议<br>此后，以金山大师为中心，召开了短暂的军师会议，分发了全部的兵器，战斗准备完毕后，史进最后去看望了彭尼<br>星空之下，石窟终于迎来了短暂的休息时间<br>彭尼和其他伤员一起被运进岩山上方的石窟。僧尼们用途中得到的一点草药，尽可能的治疗<br>史进单膝跪在躺倒在地的彭尼身边<br>彭尼很平静，不过脸却因为失血而显得很苍白，石窟墙壁上画着的阿弥陀如来，供奉着红色的曼珠沙华。<br>彭尼注意到史进过来了，缓缓睁开眼睛<br>“真不好意思，这次不能战斗了”<br>史进扶起彭尼的身体</p><p><img src="/upload/pasted-239.png" alt="upload successful"><br>“你要是个男人的话，我们说不定会成为拜把子兄弟”<br>“我也这么觉得”<br>“还讨厌男人吗？”<br>彭尼仰望史进的脸，微微一笑。<br>“我本是樵夫的女儿。十三岁的时候，在山上，杀死了袭击父亲的猛虎，作为孝女受到了表扬……村里也立起了牌坊，知府就像列女传上所记载的那样，在朝廷上奏，但是，结果就是有个混蛋当官的要求‘把那孝女收做妾’罢了”<br>“所以就当了尼姑？”<br>彭尼把眼光转向了红花，花瓣被夜露打湿了<br>“救赎的是今生，还是来世？”<br>“的确啊，但是我只能帮助活着的人”<br>在没有颜色的石窟中，只有花朵娇艳的红色。两个人默默地凝视着花朵。<br>彭尼闭上眼睛喃喃道<br>“希望金奴公主能够幸福”<br>“原来如此，希望你也一样”<br>彭尼好像睡着一般，周围的尼姑们也开始默默的诵经祈祷<br>史进一出石窟，星光炯然。<br>也不知哪里的石窟传来了雕刻的声音，史进还没有找到王进，但是，他能感觉的到，师父就在身边<br>夜尽天明，最后的战斗就要开始了</p><hr><p>紫气东来，天已经亮了</p><p><img src="/upload/pasted-240.png" alt="upload successful"><br>黎明，本是一天中最具有生机的时候，也是充满喜悦的时候<br>太阳毫不吝啬的将阳光倾洒在伊水两岸的每一个身上，南岸的官军正在埋锅造饭，北岸的僧侣开始了诵经<br>不久，官军陆续抵达，填满了南岸的河岸，僧侣们诵经的声音在平静的波纹间静静的流淌着<br>庄严肃穆的诵经对于林灵素来说，是刺耳的杂音<br>“看来这些谋反的和尚已经有所觉悟了，赶快送他们上西天吧”<br>官军方面也很清楚自己是三万对阵和尚们的三千，他们悠然的向着河岸行进着，伊水由于夏季干枯，水量减少，很多地方水不是很深<br>“一口气跨过去！”<br>部队行进呐喊的声音一下子就把诵经的声音抹杀掉了<br>先锋是五千洛阳军队，后面跟着一万禁军<br>林灵素心情平静，虽说是“初阵”，尽管不知行军打仗的策略，但是手下有众多将军帐前听令，又有一万五千的“六甲神兵”护卫<br>这将是通向荣光的黎明<br>（东京，也事先准备了“奇迹”）<br>昨日，在东京的皇帝眼前，出现了和林灵素一模一样的“青华帝君”，同时也有“谋反已经被镇压”的捷报，相信不久，赞誉“通真达灵元妙先生”的特使就要到了<br>（在敕使到达之前，必须结束这场战争。）<br>林灵素站在本阵的高台上，向前挥动着手中的拂尘</p><p><img src="/upload/pasted-241.png" alt="upload successful"><br>（占领石窟，竖起太极旗帜，拆了那卢遮那佛）</p><h1 id="下集预告"><a href="#下集预告" class="headerlink" title="下集预告"></a>下集预告</h1><p>第六章 月下天堂 预告</p><p><img src="/upload/pasted-242.png" alt="upload successful"><br>佛教最后的堡垒——龙门，此地将为最后的灭佛战场，官军三万对阵僧众三千<br>“末世降临了吗？”<br>龙门石窟前喊声震天<br>“九纹龙”史进，“花和尚”鲁智深等梁山众好汉战斗在最前线<br>准备趁乱夺取少林秘经《精武大宝经典》的“一块云”满天星也在盘算着<br>皇帝会听取“荣德公主”银树赌上性命的请求吗？<br>最后王进和史进师徒两个能否重逢？<br>以废佛为开端，道教和佛教的最终对决，最终取胜的，到底是——<br>《绘卷水浒传》20周年纪念企划，下回完结</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第五章-龙门决战&quot;&gt;&lt;a href=&quot;#第五章-龙门决战&quot; class=&quot;headerlink&quot; title=&quot;第五章 龙门决战&quot;&gt;&lt;/a&gt;第五章 龙门决战&lt;/h1&gt;&lt;p&gt;天刚微微亮&lt;br&gt;山间灰蒙蒙的，在漫天飞舞的朝霭中，史进他们被敌人包围着。&lt;br&gt;看着般若雷
      
    
    </summary>
    
      <category term="绘卷水浒传" scheme="https://www.junglezero.top/categories/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0/"/>
    
    
      <category term="绘卷水浒传 二十周年番外" scheme="https://www.junglezero.top/tags/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0-%E4%BA%8C%E5%8D%81%E5%91%A8%E5%B9%B4%E7%95%AA%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>绘卷水浒传 第一回 王进 翻译</title>
    <link href="https://www.junglezero.top/2019/03/12/%E6%B0%B4%E6%B5%92%E4%BC%A0-%E7%AC%AC%E4%B8%80%E5%9B%9E-%E7%8E%8B%E8%BF%9B-%E7%BF%BB%E8%AF%91/"/>
    <id>https://www.junglezero.top/2019/03/12/水浒传-第一回-王进-翻译/</id>
    <published>2019-03-12T10:49:00.000Z</published>
    <updated>2019-03-18T08:42:24.691Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#FF0000">原文作者 森下翠和插画作者 正子公也 版权所有<br><br>个人翻译<br><br>仅供个人娱乐及同好者欣赏<br></font><br><br><br><a href="http://suikoden.com/" target="_blank" rel="noopener">原文地址</a></p><hr><p><img src="/upload/pasted-136.png" alt="upload successful"></p><h1 id="第一回-王进"><a href="#第一回-王进" class="headerlink" title="第一回 王进"></a>第一回 王进</h1><p>茫茫黄沙间，走来一人<br>但见此人一身灰尘，头发凌乱，腰间挂着一柄长剑，如此而已，并无其他零碎，不时的看向远方，便低头接着赶路<br>太阳正当空<br>远处的树林传来蝉鸣<br>突然，这人停了下来</p><p><img src="/upload/pasted-137.png" alt="upload successful"><br>一个，两个……数到第十个人时，他下意识的拔出腰间的剑</p><p><img src="/upload/pasted-138.png" alt="upload successful"><br>“王进！”<br>干涸的大地上卷起的杀气，好像遮住了太阳一般<br>“觉悟吧！！”</p><p><img src="/upload/pasted-139.png" alt="upload successful"><br>飞扬的尘土中杀将出几人，片刻时间，此人已经干净利落的右出一刀，劈开一个敌人，尸体落在沙尘中，蝉鸣戛然而止<br>此人轻轻的垂下沾满鲜血的剑，伫立在杀气腾腾的包围圈中<br>这群刺客，大概有十四五个人，他们就围着此人，心里算着距离。尽管都有些身手，但也没有人贸然行动，盛夏的烈阳照在他们头上<br>此人的脸上滚过一滴汗珠<br>“就这么一个禁军教头……”<br>在要沸腾的空气中，此人——王进眯着眼睛<br>“到底值多少钱？”<br>剑开始动了，刺客们也行动起来，王进一弯身子，躲过了头上闪过的白刃，又反手出剑杀死了他，剑落下时一个拖刀又杀一人，他精准的砍向要害，招招毙命。面对更多的敌人，也是一击制敌，一点不拖泥带水。这是他长时间逃亡时学会的招式，不断的有剑刃逼近，暗出，还击，弹起，王进犹如死神附体般且战且停，不断的杀死着敌人</p><p><img src="/upload/pasted-140.png" alt="upload successful"><br>就这么战斗着，越发觉得手上的剑变得越来越重，顺手杀死背后袭来的敌人<br>就这样，也不知杀了多杀人，也不知还要杀多少人才能结束<br>这次战斗时间很长，以前从未有过<br>他的嗓子犹如着火一般，气喘吁吁着<br>一人一边叫喊着一边拿着长枪突杀过来，王进好像无法躲避一般，就在即将被刺中的一刹那出剑，砍向这人的腹部，由于这人反应迅速，本来要砍向鸠尾，却只砍到了肋骨，王进迅速扫到他，顺势骑在他身上，用身体的重量结果了他<br>颈椎破碎的声音，在远方微妙的回荡着<br>男人痉挛，停下了动作<br>王进用剑支撑着强站起身来<br>太阳愈发耀眼<br>尽管如此，热气消散后，背上却用一种毛骨悚然的冷颤<br>周围已经陈列着超过十具尸体<br>本以为终于结束了，却突然从角落里感到了什么，又重新拿起剑<br>只剩下一人了，似乎是这群刺客的领头人歪着脸笑了起来，他在远处望着手下们的死去，看着王进一点点体力不支<br>王进慢慢的转动脖子，低头看了眼手中的剑，剑上已经满是鲜血。他就这么站着，也没什么反应<br>（——终于要结束了吗？）<br>已经三年了，他已经逃亡了三年了<br>终于，走到这里，在这片无名的荒野丧命<br>赢了的，究竟是自己，还是“那个男人”——<br>刺客面无表情的握着剑<br>闪耀的太阳，太阳下反射阳光的刀刃，渗入王进的视野<br>突然听到起风了，风中夹杂着什么声音<br>好像有什么人呼唤着王进</p><p><img src="/upload/pasted-141.png" alt="upload successful"><br>应该还能打<br>他是这么想的<br>风在清吟着，王进只觉得自己轻飘飘的，好像长了翅膀飞起来一样<br>王进本想站起身来，看看谁在唤他<br>可身体却重重的摔在了黄土上</p><hr><p>浓雾之中，王进强站起身子<br>眼前白茫茫的犹如流水一般<br>本来想隔着雾看看远处，忽然听到什么细碎的声响，也不知从哪里滚过一个小东西</p><p><img src="/upload/pasted-154.png" alt="upload successful"><br>低头一看，那是个花绣球<br>王进伸出手，打算捡起那个滚到脚边的球<br>但是手无法动弹<br>雾气越来越深<br>不安感像波浪般涌来<br>不久昏暗就变成了黑暗，只有脚边的球奇异的亮着，王进呆呆的看着那个熠熠生辉，向有生命一样飞来飞去的球<br>突然，包围着王进的黑暗消散眼前突然浮现出刺眼的七色彩虹，锐利的光芒贯穿双眼<br>（住手……啊！）<br>王进猛的惊醒<br>发现自己躺在柔软的床上，傍晚柔和的夕阳正透过窗帘射进屋里，窗边插着一只野花<br>他听见了少女的声音<br>“大侠，您醒了吗？”<br>下意识的想要爬起来，右肩膀却突然疼了起来，裹着的布上渗出殷红的鲜血<br>枕边站着一位貌似是小间使的少女。少女服侍王进躺下后，对着庭院用快活的声音呼唤着。<br>“大老爷，客人醒了”<br>王进环视四周。<br>（这里……）<br>这个小客房配备了一些简单的家具，应当是在某个富庶人家，枕边的长桌上，放着王进的剑，但是已经被擦拭干净<br>门打开了，屋外是宽阔的庭院是，虽然是田舍的构造，但是已经经过了精细的装修，花绿相间，生机盎然，不久，花丛之间，出现了一个白胡子老人，看着大概六十多岁，是个面向温和的老人</p><p><img src="/upload/pasted-155.png" alt="upload successful"><br>“不要硬撑着”<br>想要从床上爬起身子的王进，被老人赶忙制止了<br>是个稳健，善良的老者，可王进还是无意识的估量着自己与剑的距离<br>老人自称是这华阴县史家村的村长，人们都称作史太公，好像颇有些资产<br>“老先生，您救了我？”<br>“不，是拙子救下了你”<br>“令郎？”<br>“唉，是个不争气的孩子啊”<br>老人一边这么说，一边笑了起来<br>“单字一个进，虽说是独生子，但从来不帮忙家事，只只由着自己的性子，真让人头疼，今天带着家丁出去打猎，偶然间遇上了大侠”<br>老人眯着眼睛点了点头<br>“被强盗袭击，真是不幸啊”<br>老人把椅子拉过来，坐在王进旁边<br>“一会让他过来跟您打个招呼，他身上刺着九条龙，那是我特地从城里找来的纹身师绣上去的，做的很漂亮，人们都叫他‘九纹龙’<br>王进答谢了老人，并告诉老人他本是客商，姓张，正打算去延安府做生意”<br>史太公大方的点了点头<br>“您现在身受重伤，哪也去不了了，还是养些时日，过后再上路”<br>“给您添麻烦了”<br>“要是招待不周的话，会被我那儿子数落的”<br>老人笑着走出房间<br>（看来通缉文书还没到这边）<br>王进取过剑，看了看刀刃还好，就抱着剑睡下了，这是他的习惯<br>怀中抱着剑，王进终于安下心来，把头托付给了枕头<br>院子里树梢上，有一只蝉悠闲地叫着。<br>蝴蝶懒洋洋地在盛开的五颜六色的花上飞去。<br>隐约的花香，混杂在风中<br>王进闭上眼睛，突然，悄悄的拔出剑<br>他听见了悄悄靠近的脚步声，紧紧的握着刀柄，调整了呼吸<br>进来的是一个端着碗的侍女，为了不让药汤撒出来，她慢慢的走过来<br>王进为了不让少女察觉，又把剑放了回去<br>“这药很苦”<br>少女把药汤送到王进的口边<br>王进慢慢地站起来，接过药汤。只是这么一动，全身就出现了尖锐的疼痛。<br>“疼吗？”<br>少女天真地注视着王进的脸<br>“还好——只是稍微有些疼而已。”<br>王进略微踌躇了一下，一口气喝干了药汤。</p><hr><p>已经歇息几日了，王进逐渐了解到这家本是农家，却有着侠义的家风。让来历不明的王进留在这里，并且热情款待，什么也不过问，可以说是很豪迈大气的家风了<br>史太公虽说儿子不久就会过来打招呼，可是丝毫没有那个迹象，王进却比较在意，如果救下了他，那就该知道王进不是什么商人，而那群人也不是什么盗贼<br>有一天，王进问了一个服侍他的侍女<br>“你家少爷，是个什么样的人？”<br>“这个……我不太清楚，因为他从来不跟女人说话”<br>侍女耸了耸肩<br>据侍女说，少爷是个很奇怪的人，和村中任何男人都不一样，一天到晚，只是挥刀弄棒，据说这还不够，他还要四处找旅行的武者带回家，学习新的功夫<br>（原来如此）<br>王进了解了<br>对于武术如此狂热的“九纹龙”，应当对自己也有所期待<br>（但是，我没告诉任何人）<br>即使不知道理由，史太公也慷慨相待，进出房间的也只有侍女，从来没人问过王进的来历<br>秋风初起之际，王进的伤口明显愈合，恢复到站起来在院子里走路的程度。</p><p><img src="/upload/pasted-156.png" alt="upload successful"></p><p>中秋之夜<br>王进坐在皎洁的月光中，大概是三更时间。正房中的中秋宴会也已经结束了，院子里一下子变的静悄悄的<br>王进坐在床上，看着在地板上流淌的月光<br>王进慢慢拔出了剑，月光散落在被磨平的刀刃上，轻轻一挥，风在清吟，光在摇曳<br>在白银般的光芒中，他看见了血<br>他看见的，是至今已经倒下的追杀者的血，以及今后自己所流淌的血<br>也许是飘来一块云，屋中暗了下来<br>王进收起剑，扛起行李站了起来<br>伤的最严重的肩膀还没有痊愈，但是应该还能战斗吧<br>王进瞥了一眼收拾整齐的床铺，朝门走去，突然站住了，朝着熟悉的小房间看了看。院子里虫子在叫。<br>王进又回到屋中，把剑放在了床上<br>满是划痕的剑鞘，磨损的剑柄——那是王进如生命般宝贵的东西。不过，他也没有什么别的东西可以留下了<br>放下剑后，他来到院子中<br>因长期卧病在床而疲倦的身体，清凉的夜风让人心情舒畅<br>王进穿过树林，悄悄地走着，王进在安静的院子中寻找着大门，不久，停下了脚步<br>从什么地方传过来切开空气的声响，那是在拱形墙的深处的中庭里传来的，王进悄悄挨了上去，从围墙往院里看，透过云层的月光，浮现出几道黑色巨岩的影子，有一个白色的身影在岩石间跃动<br>这时，一阵凉风吹动了月亮上的云彩<br>射过来一道月光<br>王进不由的屏住呼吸<br><img src="/upload/pasted-157.png" alt="upload successful"></p><p><img src="/upload/pasted-158.png" alt="upload successful"><br>那是月光下跃动的龙<br>（“九纹龙”——）<br>那是个背上刺了九条龙，看上去不过十七八岁的年轻人，光着膀子，手上拿着一根齐眉棒子，九条龙犹如白玉一般在年轻人背后跃动着<br>（这就是——史进吗？）<br>每次一动，栩栩如生的龙就会飞跃起来，从身上升起的热气反射着月光，仿佛全身都闪耀着光芒。<br>王进驻足侧耳倾听棒子切断的风的轰鸣，注视着年轻人跳跃的样子。<br>只是，他皱着眉头<br>“……真可惜啊”</p><p><img src="/upload/pasted-159.png" alt="upload successful"><br>年轻人突然停了下来，慢慢的在月光中回过头来，眼睛有明显的敌意</p><p><img src="/upload/pasted-160.png" alt="upload successful"><br>“是谁？”<br>王进后悔自己说了话，本想就这样默默的离开，可年轻人若无其事的走向王进，反而挡在他的前面<br>“你刚才说啥？”<br>“动作很优美，但这不过是追求虚荣艺人的奇巧罢了”<br>“那你让我领教一下你的手段”<br>年轻人——史进拿起靠在墙上的棒子，向王进扔了出去。王进并没有理会，棒子打在王进的肩头，应声落地<br>“哼~”<br>史进手扶着腰，用冷漠的眼光瞥视了王进的肩膀。<br>“赢了受伤的人，也没什么可骄傲的啊”<br>“强大可不是用来骄傲的”<br>“你说什么？”<br>史进止步不前，回头一看，说时迟那时快，王进用鞋尖轻巧的挑起滚在地上的棒子，左手迅速抓住棒子，就那样朝着史进的脸上扔去，犹如有生命一般神速飞出的棒子，突然在距离史进鼻尖半寸的地方紧紧地止住了<br>“——去捡根棒子”<br>王进的低沉声音在月下回响。<br>史进凝视着王进的眼睛，弯下膝盖，捡起棒子<br>“来吧”<br>王进一下子收回了棒子，这次又向史进的肚子攻来，史进向后一倾，迅速躲开，不料王进马上用回转的棒子扫到了他的侧腹，史进无法承受那种速度，快速向后躲去，两人的距离比棒子的长度要稍大一些，因而，史进放松了警惕，准备起身攻击时，不想王进却迈出一步，手中的棒子也飞了出来<br>不会达到的吧</p><p><img src="/upload/pasted-161.png" alt="upload successful"><br>还在想着，棒子就打到了史进前胸，史进漂亮的躺倒在地<br>“‘飞龙登门’这样可以使棒子的长度当原来的两倍来用”<br>王进只是用两根手指夹住棒子的一寸，支撑着八尺多的棒子<br>史进凝视着王进的脸。<br>“你腰的位置太高了。集中精力于丹田，腰落下，依靠肚脐处的力量站着就好了”<br>王进淡淡的说着，把棒子放回了武器架。<br>“直觉也好，气魄也好。只要有合乎道理的排练技巧，就一定会变得更强”<br>“还能比你强吗？”<br>“啊？——那是一定”<br>“那么，可以收我为徒吗？”<br>史进站起身来，在玲珑的月光下，不情愿的行了徒弟礼<br>“我曾有过许多师父，但你是第一个让我感觉必须要拜为师父的”<br>王进抬头仰望月亮。<br>漆黑的天空皎洁的月亮既美丽又无情。<br>王进深深地叹了一口气。<br>“那么，首先别再叫‘你’了”<br>“我还不知道师父的真正名字”<br>“姓王，名——和你一样”</p><p><img src="/upload/pasted-162.png" alt="upload successful"><br>“王……进”</p><p><img src="/upload/pasted-163.png" alt="upload successful"><br>王进笑了起来<br>三年来第一次笑</p><hr><p>史进大吃一惊<br>史进看见王进正面打倒了十几个人，知道他的厉害。可是，作为师父，他的指导却和史进以前遇上的那些师父截然不同，不，在史进看来，这种教育方式并不是“指导”,以前的师父大多都是先传授华丽的“必杀技”和“绝招”，可是王进，别说招式，就连棒子也不让史进碰<br>把石头放在腹部训练腹肌；倒立，单脚站立；在院子中奔跑一整天，抬着水桶在圆木棒上走；也曾练过“筷子夹豆子”，右手在锅中夹起豆子，然后左手握住筷子放回去<br>起初史进也是默默的按照王进的命令做下去，但是一个月后，史进终于受不了了<br>那天，王进交给史进木头和小刀，让他刻龙，史进刻出来的却像蛇一样，莫名其妙的东西，又刻了一次，但是无论怎么刻都不成型<br>史进终于扔下木头，瞪着王进的脸<br>“我可不是为了干这个才认你为师的”<br>王进端详了史进一会<br>“那你去把棒子拿过来吧”<br>史进取来棒子后，王进说你做个样子看看，史进展示了几个拿手的招式，不一会，脸逐渐阴沉先来，撇下了棒子<br>“怎么了，继续啊”<br>“不行了”<br>史进抱怨道<br>“完全没有感觉了，一个月没碰，身体的感觉已经没了”<br>史进瞪着王进的脸，修行好几年的成果，仅仅一个月，就因为这种莫名其妙的训练废掉了<br>王进慢慢弯下腰，拾起棒子<br>“——这样就对了”<br>“你什么意思？”<br>王进向准备反驳的史进打了一棒，用的正是在中秋夜的那招“飞龙登门”，只是这次，史进不过后退了四五步而已，没有滚到一边<br>“腰力有些长进啊”<br>史进低头看自己的腹部，觉得好不可思议<br>“你究竟……”<br>“你问题太多了”<br>史进赶忙闭上了嘴<br>“你所谓的技巧，全都是习惯罢了，因为你以自己的方式掌握了诸多门派不同师父的技巧，如果不消除这个习惯，你是绝对不会变强的，所以我才说那样就对了”<br>王进继续说道<br>“首先要彻底掌握基本的身形”<br>王进开始演示基本三十二形，史进也在一旁模仿起来，无论哪个动作，乍一看都是基本的身法。王进对史进手腕和脚的位置进行了严格的修正。接下来是坐在椅子上练习二十四形，通常的棒术，都是为步战做准备的，可是，王进的流派却包含了马战。花了两个月的时间，史进终于掌握了全部的基本身形，可以开始对打形式的练习了</p><p><img src="/upload/pasted-174.png" alt="upload successful"><br>现在的史进，对自己很有信心，但是无论试多少次，史进的棒子都无法触及王进的一根毫毛，史进已经无数次的被王进击倒，一站起来，脚又被打，又摔倒了。尽管如此，史进也没有放弃，一天之内，被打倒数百次，即使全身都是伤，也还是默默的练习，在王进说好之前，即使被打的失去意识，也不会停歇，倒了一会后又站了起来，摇摇晃晃的，但那张脸却让人很感兴趣<br>（可笑的家伙）<br>王进坐在庭院的石头上，专心致志的看着已经初具形态的年轻人背后跃动的龙<br>雪悄悄的下了起来</p><hr><p><img src="/upload/pasted-175.png" alt="upload successful"><br>岁月转眼即逝，冬去春来，又是一年<br>对于王进来说，这是一个久违的平和的春节，元旦的早晨，身着盛装的史进来到王进身边致辞<br>这一年，史进已经十八岁了【看看人家十八岁，再想想自己-_-|||| 】，少年的身形和相貌一天天发生着改变，最大的变化则是武艺上的精进<br>史进是王进所看重“练武奇才”，尽管已经修炼多年，掌握了基本的招式，可他还是坚持了王进的高强度训练，史进也向王进展现了自身惊人的进步<br>不过，还是史进自己最为感到吃惊<br>起初，也是不知道自己该干什么，只是一味的模仿王进，但是，有一次，史进终于领悟了，棒子可不是以前认为的“物”,而是自己身体的一部分，从棒子到腕，胸，腰，足，零散的部位合为一体，自由自在的行动，不用太用力，就能比以前更快，出力更大，现在用起棒子来，就如同呼吸一般流畅自然<br>（师父毕竟不是一般人）<br>王进不仅擅长棒子，十八般兵器样样精通<br>除了棍子外，剑、枪、矛、戈、戟、鞭、简、弓、弩、斧、锤、链、扠，矛，白打，根据流派不同，着十八样技能成为十八般武艺<br>从正月开始，王进除了棒术外，也开始传授这些武艺，史进几乎一整天都在和王进训练，如果是一般人的话，即使是一样兵器也需要数年才能学成，但是现在，史进无论学习什么武艺都如同水渗沙子一般领悟的很透彻<br>不久已经是梅花盛开的时节，史进的武艺已经相当成熟了<br>今年庭院中红梅初开时，史进首次在练习中打中了王进的手腕<br>从开始练习已经四个月过去了，这是史进第一次打中王进，是真的第一次，史进大吃一惊，但是，比他更吃惊的是王进，史进飞升的速度，已经超过了王进的预想<br>正如史进第一次尝到武术的神秘一样，王进也第一次感觉到喜悦<br>一天傍晚<br>为了进行练习，王进总在院子中等着，可今天的史进却一副心神不定的样子<br>“怎么了？”<br>王进问道，史进从怀里取出一张纸，是华阴县县衙下发的通缉文书，写着抓捕少华山山贼的奖金<br>“头目三人，共值三千贯，他们可真的不值钱啊”<br>史进放下了通缉文书，拿起棒子练习起来，但是总是无法集中，王进察觉到了这一点<br>“你隐瞒什么了吗？”<br>“没有什么”<br>王进坐在庭院中的石头上，就那样看着史进，面对这种观望，史进最终从怀里又取出一份文书<br>“……是我吗？”<br>通缉文书上盖有东京开封府的章，有人的面孔特征和罪状，那张脸毫无疑问是王进的<br>“原禁军教头王进，犯有盗窃，杀人，欺诈，通奸……奖金已经增加到了五千贯吗？”<br>王进已经意识到是时候要离开了<br>王进将通缉文书还给史进，拂袖而去<br>“我已经没什么可以教你的了，明日便启程离开”<br>“我可不信这个文书”<br>史进跟在王进后面<br>“追杀师父的那些人，已经被我们埋在了树林里，剩下的一个大汉，也被我射杀了，因此，没人知道师父在这”<br>王进停下脚步<br>“为什么现在才告诉我？”<br>“我不想对师父做忘恩负义的事”<br>“你已经成器了”<br>“能教导你，实属荣幸”<br>史进从未见过王进如此平静，王进背对着史进，又重新回到远方，无名的不安感，冲到了史进的胸头<br>“——师父！！”<br>王进终未回头</p><hr><p>第二天早上，东方天空刚刚泛白之时，王进已经打点好行装，站在门口<br>初春大气清凉，星光闪耀<br>昨晚，他向在冬初染上风寒，至今仍未康复的史老太，侍女也过来送别，但是，却没有看见史进的身影<br>（心里不痛快吗？）<br>王进微微一笑，快步离开了宅邸<br>过了一会儿，路边的树荫下出现了人影。王进手持剑，快步奔跑<br>“师父，我也跟你一同去”</p><p><img src="/upload/pasted-177.png" alt="upload successful"><br>史进出现了，他拿着棒子，提着行李，也是一身准备出远门的行装<br>“你也想让人追杀吗？”<br>王进冷冷的说道<br>“通缉书上描述的罪状，我一点也不相信，师父不会做那些无聊的事的”<br>王进脸上笼罩着阴影<br>“那么，我到底做了什么，你知道吗？”<br>面对王进不寻常的声音，史进停下了要迈出的脚步。</p><hr><p>王进徐徐道来<br>那是在距今十几年前的时候，那是王进和现在的史进同龄<br>王进也有个师父<br>名叫王升<br>并没有血缘关系<br>王升是王家棍法的第三十六代传人，王家棍法并不是为世人所知晓，因为继承者大多隐姓埋名，打着别家流派的幌子，暗中从弟子中选出一人传承<br>正确的叫法应该是王家春秋棍法，据说起源于春秋末期的乱世。棒法是枪尖被敌人砍掉时，为了继续战斗而诞生的武术。没有刃的武器，可以保护身体，但不能杀人。<br>可是，王家的棍法打出的却是取人性命的招式<br>如果正是天下太平，那么就要把这种必杀技传承给正确的人，他们不问血缘关系，只是从王姓人中选一个人品能力都很优秀的人作为传承者，王进就是被选中的，也是“奇才”<br>“王进啊”</p><p><img src="/upload/pasted-180.png" alt="upload successful"><br>在昏暗的武馆中，老师父对王进说道<br>“已经没有什么可以教你的了”<br>那是王进已经完成所有修行的日子<br>“你现在已经比我强多了，过去的三十五个徒弟，恐怕比他们任何一个人都要厉害。但是，这种强大对你来说却是危险，这种强大折磨着你，恐怕会毁掉我们王家棍法”<br>王进默默的低下头，他被禁止和武馆其他的同辈对决，只能和老师父一起修行，即使是这位老师父，和王进对决不过三胜一，王进即使被说强，也没有感觉<br>“你的使命是传承，为了应对接下来的乱世，传承王家棍法，不要去战斗——你可千万要谨慎而行啊”<br>当王进成为第三十七代传人后，王升好像完成使命一样，不久离开了人世<br>之后，王进成为了禁军教头，所谓禁军，是指直属于皇帝的亲军，进入枪棒班进行教授，是为了生计，也是为了寻找下一个继承人。王进教的大多是下级士兵，是贫困人家的次子，三子，很多都是只会炫耀本领的流氓，能够继承王家棍法的人，怎么找也找不到，也并不是，只有一个“奇才”，可这人姓林不姓王<br>王进按照他的方式热心的教导他，心中却空落落的，就这样，一天天的过着<br>不知不觉，王进就把继承人的事给忘了<br>那是某年春天<br>王进完成公务，正要回家时，看见桥边人山人海，人海之内，传来年轻人欢乐的笑声，好像在进行着什么比试，王进家在桥对面，无意间拨开人群，走到近前<br>在桥上，五六个年轻人围着圈站着，都是有钱人家的纨绔子弟，在他们之间，一个球飞来飞去。原来是在玩蹴鞠，只用脚，且能保证球不落地的传递，是最近流行的玩法，踢皮球的招式也很多，飞起来踢，反身踢<br>为了玩而妨碍人们过桥，这群人真是很烦啊，还有人们怎么不过去呢，也是不可思议。这样想着，王进上了桥<br>年轻人一直在踢球，王进又发现一件不可思议的事，有老人的哭泣声混杂在年轻人的声音中，近前一看，才知道理由，年轻人间，有个老人在地上打滚<br>王进也曾见过，是街边唱小曲的瞎老头，已经八十多岁了，衣服破破烂烂的，总是在桥栏杆旁坐着，王进也曾给过好几次钱，也不知老头从哪里学来的一手风雅的胡琴<br>有五六个年轻人在欺负老人，踢着皮球打老人，头是十分，脚是二分，他们在比看谁踢的分数高<br>王进走上前去。伸出胳膊，一把抓住了球<br>“如果你们是在闲的没事干的话，就该去学武，皮球不过儿戏，不是男人该学的”<br>“你又是什么东西啊？”<br>王进无视年轻人，把球扔进了河里，卖唱的老人一边哭一边爬到栏杆边，王进本想直接过桥走了，一扭脸，一个球飞了过来，王进一把用棍子把球打在一边<br>踢这脚球的，是一个鼻子略大，眼神让人厌恶的年轻人，大概比王进年轻几岁，一边咬着橄榄，一边慢慢接近王进</p><p><img src="/upload/pasted-181.png" alt="upload successful"><br>“是耍棍子的吗？”<br>男人说着，被抢去球的年轻人围上前去<br>“大哥”<br>“你们给我滚一边去”<br>男人把橄榄扔了，王进迎着男人险恶的目光，他和其他人明显不同<br>“这些是你的手下吗？请不要在做这种事了”<br>“大家只是痛快的踢了几脚球罢了，只是头脑不太清醒”<br>“你们在这里踢，大家过不了桥，而且，那个老人很可怜”<br>“那个老头？”<br>那人哼着鼻子嘲笑道<br>“那我付钱还不行？”<br>“你道歉吧”<br>王进指着靠着栏杆卖唱的老人<br>“道歉？”<br>男人一听来劲了<br>“你跟我说道歉了吗？”<br>手下们哄堂大笑<br>“我昨天揍了我爹三拳都没道歉”<br>男人向手下们努了努下巴，转过身去<br>“走了走了，完全没兴致了”<br>“慢着”<br>王进把手按在这个人的肩上，就在那一瞬间，那人顺手超起栏杆边的棍子，嗖的转了一下，甩开了王进的手，王进意识到这个人速度很快，退过身去，取过棒子。男人扭头笑了<br>以此为号，这群人开始袭击王进，手持棍子，一起打来，王进棒子一闪，扫倒右手边三人，还用手推倒了左手边的四人，王进的棒子宛如活过来一般，击中年轻人的要害，手下们在桥上相继昏倒。这不过是一瞬间发生的事。</p><p><img src="/upload/pasted-182.png" alt="upload successful"><br>王进跨过倒在地下的喽啰，一鼓作气的打了过来，又轻又快，而且，是毫不留情的冷酷打法，是在纵情于痛打对手，彰显自己厉害的，除了在武馆中学到的技巧外，又加入了自己的个人风格。<br>好久没和别人打过了，在武馆时，他从未和王升以外的人对决过，私下的格斗也被严令禁止，现在是禁军教头，也不会个手下的士兵战斗，好久都没有战斗了——不，应该说是第一次，而且，对方是个陌生人，也不知会采取什么样的战斗方式，在十合，二十合的战斗过程中，王进感到了一种不可思议的浮游感【东北话说叫飘了】，一股巨大的力量，从王进到棒，从棒到王进，一直涌现着，此时他心中已经无他，只有全力以赴的战斗<br>王进自己也不知道，不知不觉的展现了自己真正的实力<br>老师父说王进很强，但是，从未和别人对决过的却浑然不知，但是王进现在却感觉到了，包围全身的热气一下子高涨起来，源源不断的集中在棒上<br>那个时候，王进发现了真正的自己<br>那个人倒在桥上，王进的棒子指着那人的眉间，以棒子为中心的区域一点点青肿起来，如果晚一下停下来，那人大概会脑浆迸溅吧<br>那人呆呆的睁着眼睛，愣愣不动，因为吓得失禁，衣服已经湿透了<br><img src="/upload/pasted-196.png" alt="upload successful"><br>人们远离两人，屏住呼吸注视着，这时，王进第一次意识到自己在笑。没有发出声音，只有脸在笑。王进感到恐怖。深深地吸气，吐出。于是，他揪起男子的领子，向老人的地方拖去。<br>“谢罪”<br>自己的声音，听起来像是别人的一样<br>“——对，对不起”<br>那人呻吟地说。然后被手下们带走了。本来，那人想赶走那些想帮助他的手下们，但他已经站不起来了。<br>王进过了桥，回到了家<br>那天晚上，王进想起了老师父亲的话。于是，为了不再用棒子伤害别人，他强烈地告诫自己。<br>王进的日常生活过得很平静。不久时光流逝，桥上的事不知不觉忘记了，那伙泼皮和受伤的老人，也再也没有见过<br>他每天去禁军校场，教导手下新兵武艺，照顾老母的起居生活，就这样过着每一天，要说遇上的不寻常的事，大概就是皇帝驾崩，新皇帝登基，就这样一年后<br>有天，因母亲卧病在床，王进向上级报假，上午，有通报的士兵前来，说是在王进请假期间，他所属的殿帅府的最高长官——殿帅府的太尉换人了，今天是新太尉的就职典礼，说是只有王进没有到，因为新太尉下了命令，又派人来接，王母对犹豫不决的王进说<br>“去吧，新的太尉大人，一定找你有要事”<br>“但是，母亲……”<br>“昨晚做梦，梦见有条龙下到我们的屋顶，一定是好是的”<br>王进煮了药，服侍母亲吃完就去了。殿帅府的庭院中，各级将校整齐的站列着，王进鞠了一躬，打算进入禁军教头的队列，却被左右士兵扭倒在地，被束缚的王进抬不起头，低头跪在那里。<br>遥远的正堂内传来声音<br>“王进吗？”<br>是冷淡的声音<br>“为什么不来本帅的就职典礼”<br>“我已经请过假了，母亲生病了——”<br>“本帅怎么不知道？”<br>当时有很多士兵，官员在场，但是一片冷寂，没人敢为他出头辩解<br>“教头是负有培养对天下有用士兵的重大责任，是奠定军队基础的重要任务，本帅看了你的工作表，结果都是请假，工作态度也不认真，教出的士兵也一无是处，比起其他的教头，成绩也非常差，你这是怠慢值守的重罪”<br>王进懵了，这个新太尉为什么会这么说，简直莫名其妙<br>“我事先请过假了，母亲生病了——”<br>“就算士兵打败仗，也要怪你娘的病吗？”<br>“那是……”<br>“你这厮不该全身心的教导士兵吗？”<br>王进无语了<br>“你这厮如此狂妄，领着国家的俸禄，却不做人事，左右，与我痛打他几十大板”<br>王进不由分说的就被拉下石阶，被杖打着，浑身上下都挨着痛打，这种杖罚，三十下就会失去意识，一百下就会被活活打死，王进受了四五十下，浑身是血，莫名其妙的望着堂中的太尉<br>想要求救，但是没说出口</p><p><img src="/upload/pasted-197.png" alt="upload successful"><br>王进第一次看到新任太尉的脸，那张脸和以前在桥上痛打的那个泼皮长得一模一样<br>在沾满鲜血的视线中，那人露出与当时一样的笑容。<br>王进确认自己注意到的时候，没有发出声音，只是动着嘴低声私语。<br>“谢罪吧”</p><hr><p>史进震惊了<br>“怎么这厮就成了太尉了？”<br>王进也是后来从被人那里知道了来龙去脉<br>新太尉叫高俅，就是当年在开封的那个泼皮无赖，不过，当时本叫高毬，因为其擅长蹴鞠，踢得一手好球。后来他因为四处欺诈被放逐出开封城，不允许入城，不过，这也是他的契机<br>有一天偶然去了一家酒楼，偶然遇上了一个意气相投的贵人，那个贵人喜欢有特长的人，看见高毬会蹴鞠，就很喜欢。于是就招高毬当个侍从，本来他也是个善于来事的人，很快就深受主人的新任<br>就这么有一天，他的主子有幸迎娶皇帝的女儿——公主为妻，成为驸马，后来一天他和主人一同去端王——一个年轻皇子的宅邸，这位皇子是个爱玩的人，还有个外号叫做“浪子”，那一阵子对蹴鞠特别感兴趣，正巧高俅他们过去时，看见端王正在蹴鞠，也是偶然，球就向着高毬飞过来了，高毬轻巧的接住球，又华丽的把球踢出，秀了一段球技，这位皇子也是从未见过<br>“踢得漂亮！”<br>端王很喜欢高俅，便请求把他留在身边，高毬很快就成了端王最亲近的宠臣<br>最近，高毬又把毬改成了俅<br>端王是皇帝的异母弟弟，但是因为母亲身份很低，几年前刚刚被册封为王，也是没有什么事情的皇子，过着悠闲的生活，但是，因为哥哥宋哲宗年仅二十五岁就驾崩了，又没有儿子，于是命运突变，端王就成了皇帝<br>端王才二十岁，本来就没想当皇帝，还是“浪子”的天性，就像平常发礼物一样，宠臣一个接一个获得了高官厚禄，对于最中意的宠臣高俅，他的赏赐就是禁军的统帅——殿帅府太尉<br>这也改变了王进命运<br>高俅并未忘记当年的王进<br>此时，王进已经被打昏在地<br>这个时候，都教头张彻【林冲的岳父】从教头的队伍中站了出来，他头发和胡子都已经斑白，是个沉默寡言的军人，他的严格治军，不说禁军中，就是开封也人人知晓。面对高俅，老将静静的低下头说：</p><p><img src="/upload/pasted-198.png" alt="upload successful"></p><p>“今天是太尉到任的大喜日子，不宜在公堂之上流血，还请太尉三思”<br>面对这种说话的风格，沉静的腔调，高俅眼中责备的眼光消失了，人们也纷纷抓住机会，为王进求情<br>“啊，好吧，就依着你们，不要坏了本帅的大事”<br>高俅摸着胡子，深深的坐在椅子上<br>“今天给你们个面子吧。”<br>高求满足地注视着为王进求情的人们。<br>王进在张彻和众弟子的扶持下回家了<br>张彻让众弟子回去，告诉了因为背上的重伤而无法躺下的王进，高俅是怎么成了太尉的<br>“你怕是以前什么时候得罪了那厮，那人尖酸刻薄，你最终会被杀的”<br>王进说了自己和高俅的遭遇<br>房间的角落中，王母低声哭泣着<br>不久，一个弟子回来了。张彻低声问道。<br>“什么情况？”<br>“有两个人在”<br>门前有两个士兵<br>“应当是那厮派来监视的”<br>张彻点了点头，向王进进言到<br>“赶快逃命吧”<br>张彻从怀里拿出布包，让王进握在手里。里面有一些银子。实际上王进和张彻不过是同事，平常只是点头之交罢了。<br>“张教头，你这是？”<br>“你的棒法出众，可惜了”<br>凝视的双眼让王进不禁想起了师父王升</p><hr><p><img src="/upload/pasted-199.png" alt="upload successful"><br>凌晨时，王进趁机杀死了监视的两个人，城门打开的同时，和母亲骑着马逃离了开封<br>也就是从那天起，王进开始了他的逃亡之旅<br>高俅因此更加记恨王进，不断的提高赏金抓拿他<br>“你埋在树林里的那些人，就是想要拿下我的赏金猎人”<br>王进凝视着史进的脸<br>“我的罪过，就是当年打了一个泼皮，就这些事”</p><p><img src="/upload/pasted-200.png" alt="upload successful"><br>比起从脚下爬上来的冷气，那声音更冷，更沉重<br>患病的母亲不到半年就死在了安旅篮的角落。埋葬在连名字都不知道的山的松树根下，王进在墓前，立起了自己贴身的棒子，作为王家棍法的传承者，他也埋葬了作为禁军教头的自己<br>“看到高俅的脸的时候……我，爬上去谢罪说不定就行了。但是，没能做到。所以，我选择了逃走。从今以后也只能──继续逃避”<br>王进转过头去，又开始了自己的逃亡之旅<br>“被这么个混蛋缠上，也是无能为力啊”<br>“——师父”<br>王进渐行渐远<br>“师父！！”<br>“史进啊”<br>王进背过身去，用强大，温和的声音呼唤着史进<br>“我要感谢你，不管如何，有你这么徒弟，即使最终被人杀掉，我也能此生无憾，含笑九泉了”</p><p><img src="/upload/pasted-201.png" alt="upload successful"><br>王进其实也不能雕刻出木龙，那是他摒弃以前的自己，是否有能力收徒的最后测试，只有天真无邪，从无到有的人才能成为传承者，史进也不能雕刻出木龙，那是王进已经削好上好的木材，一切准备妥当，却在快要完成的时候不得不作罢<br>但是，王升把武功传给王进，而王进又把武功传给史进<br>曾经，王升无法雕刻出龙<br>但是，现在的话——<br>仰望星空，王进静静的微笑了<br>然后，在黑暗中沉没的黎明之路上，加快步伐，一路向北</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;#FF0000&quot;&gt;原文作者 森下翠和插画作者 正子公也 版权所有&lt;br&gt;&lt;br&gt;个人翻译&lt;br&gt;&lt;br&gt;仅供个人娱乐及同好者欣赏&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://suikoden.com/&quot; target
      
    
    </summary>
    
      <category term="绘卷水浒传" scheme="https://www.junglezero.top/categories/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0/"/>
    
    
      <category term="绘卷水浒传 正篇" scheme="https://www.junglezero.top/tags/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0-%E6%AD%A3%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>绘卷水浒传 20周年企划 第四章 翻译</title>
    <link href="https://www.junglezero.top/2019/03/06/%E6%B0%B4%E6%B5%92%E4%BC%A0-20%E5%91%A8%E5%B9%B4%E4%BC%81%E5%88%92-%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BF%BB%E8%AF%91/"/>
    <id>https://www.junglezero.top/2019/03/06/水浒传-20周年企划-第四章-翻译/</id>
    <published>2019-03-06T07:57:00.000Z</published>
    <updated>2019-03-19T01:02:25.819Z</updated>
    
    <content type="html"><![CDATA[<hr><p><font color="#FF0000">原文作者 森下翠和插画作者 正子公也 版权所有<br><br>个人翻译<br><br>仅供个人娱乐及同好者欣赏<br></font><br><br><br><a href="http://suikoden.com/" target="_blank" rel="noopener">原文地址</a></p><hr><h1 id="第四章-地狱罗汉"><a href="#第四章-地狱罗汉" class="headerlink" title="第四章 地狱罗汉"></a>第四章 地狱罗汉</h1><p>洛阳，是一座大都市<br>曾经是许多代王朝的首都，虽时有战乱之煎熬，但闻名的精华却脉脉不断的成长着，尽管不及西都长安的繁华富裕，可她那清雅的姿态是其他城市所不能企及的<br>佛教繁盛时，洛阳曾有“千寻塔”之称，但是现在，城内到处都是自以为是的道士<br>道观多了起来，强改为道观的寺院也多了起来，甚至酒楼，妓院，瓦市等游乐场所也多了起来。道士们漫步其中，阔步向前<br>其中金冠道士们更是飞黄腾达，他们是“通真达灵元妙先生”林灵素挑选出的嫡传弟子<br>今夜，洛阳城中心的大酒楼“大汉楼”也聚集着这些金冠道士，有一张不满的脸孔，冷眼旁观着。一众道士围着一个年轻道士<br>“喂，郭京啊，“通真达灵元妙先生”中意你，所以你大概知道吧，林教主为什么把那么一个穷酸道士安排在身边呢？”<br>嘴上蓄着漂亮胡须的年轻道士摇了摇头<br>“这个，我也完全不明白”<br>“如果连你也不知道，那就更奇怪了，说起来，咱们怎么突然来洛阳？”<br>道士们把目光转向了里屋的客厅<br>深屋之内，林灵素与一个怪道士面对而坐<br>“接下来怎么办？”<br>林灵素很焦急的样子，用好像被什么紧紧抓住的声音说道<br>“好不容易才把这些反对废佛的和尚聚集在少林寺，却也不顺利”<br>林灵素是为了少林寺的灭亡——即“道教的大胜利”，从东京而来<br>发出假的檄文，把反抗的和尚聚集在少林寺。这是林灵素的计谋，以此为契机，一举将这些反对者消灭<br>“这样一来，废佛之事就算完成了，世上也当全为道教的颜色，因废佛之功绩，我也会成为宋的唯一国师，荣华富贵，应有尽有”<br>但是，少林寺在初战时却击退官军，严守山林，封锁要道。嵩山地势险要，洛阳军队也停下了进攻的脚步，只剩下数日的对峙<br>因宇文将军战死，正都指挥使上阵了，不过，他本来就不想打这场战争，他声称要耗尽敌人的粮草再一举攻克，于是没有采取任何进攻行动。少林寺本来就是靠山吃山，自给自足，在此期间，朝廷内的反佛势力也慢慢削弱<br>“没办法了吗？”<br>坐在林灵素面前的是一个戴着兜帽的怪人，也不知其来历，就成了拉青牛嚼子的仆人。在那场斗法大战中出现了降雨的怪相，以天子为首的人们都认为这是林灵素的法术，但实际上他没有那个法力<br>也是那个时候，林灵素知道那个丑陋的仆人才是“真人”，从此以礼相待<br>但是，怪人沉吟不语<br>林灵素皱起眉头<br>（虽说有点用处，但实在是让人觉得恶心，说不定他打算……总之不能不提防他）<br>林灵素也算是身经百战的道士，年幼就被送进了佛寺，但是他受不了严酷的修行出奔了，此后进入道观，成为了一个有名道士的弟子，不过他主修的是“魔术”——欺骗大众的障眼法<br>（到最后还是这些伎俩最有利于处事）<br>地板崩塌是因为事先挖了坑，流血泪的神像则是事先安排了猪血，仙鹤也是事先准备好的<br>（真的有“术”吗？）<br>“相信我”<br>小声品酒的怪人，用咕嘟咕嘟的声音嘟囔着。</p><p><img src="/upload/pasted-102.png" alt="upload successful"><br>“信则成”<br>然后，破布下的双眼，锐利的注视着门的方向<br>门开了，一个美丽的小间使拿着铫子进来了<br>“是这屋的客官要添酒吗”<br>微笑之后，小间使感到了屋中异样的氛围，突然变了脸色，接着说弄错房间了，急忙关上门跑掉了</p><p>小巧的身影轻快的登上楼梯，滑进了“大汉楼”最上层的房间，虽然很小，但却是最奢华的单间，是高官贵族们密会的地方，今天这里，有一个美女正用玉杯饮酒<br>“——是猫儿吗”<br>化装成小间使的猫儿把带来的铫子献给了主人慕容贵妃。<br>“没错，那人正是林灵素，还带着个可疑的道士”<br>“那是谁”<br>“不清楚，但是眼神缥缈不定”<br>在陈列着美酒佳肴的客厅中，慕容贵妃和几名侍女在等着猫儿的回报，慕容贵妃享受着这种奢华，委身于铺满长椅的丝绸被褥中，窗户边琉璃色的香炉燃着高香<br>猫儿的鼻子很灵敏<br>“贵妃，这香味是？”<br>“很怀念吧，这是从红菊中提炼出的味道，也是突然想起了后宫的生活啊”<br>“马上就可以回到那种生活了”<br>贵妃用鼻子止住了猫儿说的话<br>“那个小姑娘——金奴离开少林寺了吗？”<br>“没有，我本以为在开战前就会下山的……还没有”<br>“当时在尼姑庵的时候，稍微收拾一下就好了，没有找到她的住处”<br>慕容贵妃懊悔的饮尽杯中酒<br>“那个金山大师还巧妙的把她藏了起来，王皇后，王都尉，太子以及公主……这些王家的人，都在妨碍我”<br>“还有那个老婆的预言，请您放心，一有机会猫儿就会收拾她”<br>“你是我心腹之人的第一弟子，可你师傅‘白骨猫’却背叛我们逃跑了，你是忠心之人吗？”<br>“养育身为孤儿的我的，是贵妃大人，这份恩情，即使牺牲性命——”<br>“好了，那就把那扇门打开吧”<br>猫儿一开门，林灵素一个人站在那里。潇洒的道服被悬挂的灯笼照射着，给人一种仙人临世的感觉，那张嘴边，浮现着淡淡的笑容<br>“还在想怎么又是那个奇怪的小间使呢……哎呀哎呀，遇到贵人了”<br>林灵素关上身后的门<br>慕容贵妃的眼中泛起秋波，婉然的微笑着<br><img src="/upload/pasted-103.png" alt="upload successful"><br>“灵素啊，和我再会不觉得欣喜吗？”<br>“用一封可疑的信，把我唤到洛阳的，就是你吧”<br>林灵素用蜡烛把那封信点燃，信上只写了一手诗<br>“很怀念吧，那首诗是你过去写给我的”<br>“不要幼稚了”<br>“那么，怎么不让陛下把孩子处理掉，本来是打了胎的……可那孩子现在是朝气蓬勃”<br>林灵素脸上的淡笑消失了，贵妃瞳孔中的秋波也消失了，这一对男女，就像摘掉面具一样，展现出他们原本的面孔<br>林灵素坐在椅子上，拿起贵妃喝酒的铫子，自饮自酌<br>“那么，有什么事吗？”<br>“我想告诉你一件好事”<br>林灵素为贵妃也倒了杯酒<br>“是你要返回宫中了吗？”<br>“我现在被朝廷追捕，已经是苟活的人了，已经没有什么野心了”<br>“你除了野心，大概也没别的东西了”<br>“你不也是一样吗？”<br>贵妃眯着眼睛，第一次真心的呵呵的笑了<br>“灵素啊，我知道你想攻下少林寺，除了东京的禁军，再把河南节度使王焕，太原节度使徐京的军队也招来，你来做统帅”，如果被那样的军队进攻，那少林寺就如沙子筑成的塔一般一催击垮，换句话说，那座山如果不是大军讨伐，是无法攻下的”<br>“调遣节度使，那可是个难题”<br>“为什么？”<br>“这些节度使是守卫边关的重要将领，和洛阳军的行动是划分开的，朝中也有反对派，各种各样的麻烦事，甚至宰相蔡京也反对废佛，与其说是担心佛教存亡，不如说是担心世间动荡不安的大臣也不少。即使是陛下，也并不是那么憎恨佛教”<br>“那么，就用幻术吧”<br>“什么样的幻术？”<br>“真是个迟钝的男人啊，关在东京监牢里的智真长老和少林寺的金山大师是莫逆之交，可现在这位金山大师却企图‘谋反’，召集少林寺的武僧，煽动全国百万的佛教徒，打算颠覆大宋，计划袭击东京开封”<br>林灵素思考起来，慕容贵妃有密谋的才能，他是最清楚的<br>“原来如此，但是陛下会相信吗？”<br>“你这家伙，真是让人着急啊，‘仙人传信’不是掌握在你手里吗？天书下凡，地上突然出现刻着‘金山谋反’的石板……历史上有不少先例吧，如果能镇压这场叛乱，必定能功成名就，成为武勋赫赫的救国英雄，定能获得国师以上的荣誉，也能凌驾于蔡京童贯之上”<br>“救国英雄——救世主吗？”<br>林灵素摸着胡子<br>“不错”<br>“可不要忘了我的恩情”<br>两人满脸笑意，干了杯中酒<br>“如果进展顺利，下一步就为你考虑‘仙人传信’”<br>“呵呵，我很期待啊”<br>猫儿伫立在房间的角落里，侧耳倾听着两人的对话。<br>（无论哪一边，估计都不是真心的啊）<br>猫儿忍住笑意，在配餐台上重新温热了冷却了的铫子<br>案子上的蜡烛周围，两只蛾像嬉戏一样飞舞着。</p><p><img src="/upload/pasted-104.png" alt="upload successful"></p><p>深夜，林灵素凭栏而望，目送贵妃一行人离去<br>（那个女人究竟什么目的）<br>马车之后，有一个黑影尾随着，这是林灵素派遣的密探<br>（但是，她还是一如既往的擅长‘诡计’啊）<br>林灵素返回房间，心腹郭道士正在待命<br>“通真达灵元妙先生，您的命令是？”<br>“——回东京”<br>林灵素在写一封密信的同时，在年轻弟子的耳边嘀咕着什么</p><p>数日之后，童贯受皇帝之命，下令两节度使王焕徐京出征<br>皇帝从林灵素那里收到“少林寺谋反”的神谕的秘信，不过，他一度拒绝了调遣节度使的请求，大臣们也是极力谏言先要调查此事再做决断<br>但是，同一天，皇帝在东京万岁山散步时，发现神木的树干上浮现出“金山叛”的字样，人们还在惊愕时，文字突然消失了——但是在场的人都看见那几个字<br>因此，皇帝终于下定决心，下达了讨伐少林寺的宣言<br>这个玄幻的“带话”，不过是“虫文字”——受林灵素之命的道士郭京，事先用蜂蜜在树干上写下文字，没人注意有虫子聚在那里</p><hr><p>那个夜晚，终于下了些小雨<br>薛永站在哨岗上。官军虽然围堵了嵩山的出入口，但这边防守坚固，看不见官军的进攻<br>雨越发的大了，他到了有屋顶的监视小屋，在地上铺的破布上，太白团成一团。薛永走进屋里，太白只是抬了抬眼皮，银树蜷着身子熟睡着<br>战斗以来，即使尼姑们阻拦，她也要待在薛永身边<br>山间夜晚很冷，薛永把肩上的布盖在银树身上<br>银树微微睁开双眼<br>“把你吵醒了啊”<br>“……谈谈薛永你吧”<br>银树裹在布里低声私语<br>“我？”<br>银树点了点头，睡意朦胧地闭上了眼睛。伸出的手指紧紧抓住薛永的下摆。<br>“薛永是在哪里出生，又是怎样活下来的呢……快说！”<br>“我……我出生在洛阳，祖父是一名出色的武官。可是，不善处世，被上司疏远，被罢黜了。我父亲不能做官，开始做生意了，但是失败了，破产了。家人都离散了，我的家已经没有了”<br>“这样就成了艺人了吗？”<br>“那时，讨债人只给我剩了一根棒子，我走投无路，就在那洛水畔坐着，这时，有只又瘦又脏的小狗靠近我的膝盖，我抱着小狗回到街上，模仿着人家卖艺，赚到了自己的第一桶金”<br>“那是太白吗？”<br>银树用双手抱住太白的脸，皱巴巴的鼻子贴近脸颊，银树看上去就像个年幼的孩子<br>“你真幸福啊——你”<br>雨敲打着屋顶。在这个广阔的世界里，只有这里才是安全的巢穴。银树又开始静静的入睡了<br>（一定要守护她）</p><p><img src="/upload/pasted-105.png" alt="upload successful"><br>在一切的伤害中——<br>也不知能不能做到，薛永感到很不安，他知道自己既没有史进的那一身武艺，也没有石秀的胆量<br>（索性带她上梁山）<br>突然出现了那个名字，薛永也觉得很吃惊<br>大宋朝廷和“贼寇”梁山泊是不共戴天的敌人，怎么说也是不能把堂堂大宋的公主带上梁山的<br>薛永屏住呼吸，注视着银树的侧颜<br>不知不觉雨已停歇，轻微的月光透过窗子，静静的照耀着两人</p><p>雨后，史进沿着泥泞的道路走向山腰的食堂<br>好久没有酒喝了，想喝上两碗<br>问了在井旁刷锅的小和尚，他指向了屋子那边<br>“水屋里，还有为客人准备的酒”<br>“我能喝一些吗？”<br>“可以啊，反正客人已经来不了了……”<br>小僧又开始刷锅<br>史进拿到酒后，无意看了深处的碗橱一眼<br>“喂，这是？”<br>小和尚拿着洗碗的锅进了屋，看见史进的手中，握着随意摆放在碗橱上的木雕龙<br>“啊，那是管灶台的木龙行者雕刻的，看，那边也有……有不少呢”<br>史进环视四周，确实，在灶台上，窗框角落处，放置着好几条龙，好像守护神一般，无论哪个，都栩栩如生，出神入化<br>史进想起了王进的手，王进身为武者，有纤细的手指和柔软的手掌，史进靠近小和尚<br>“那个行者是个什么样的人呢？善使棍棒？”<br>“大概不是吧，是个沉默寡言的人，只是坐在灶前刻着木头，五十多岁……也不知是何许人”<br>“那此人现在何处？”<br>“数月之前，突然走了，最近，好像有人看见他在龙门雕刻佛像……”<br>“龙门？那是什么地方？”<br>“您不知道吗？是有着雄伟石窟的寺院。在悬崖边上，雕刻着大佛像”<br>史进早已把喝酒的事抛在脑后，拿着木雕走出房间<br>雨后天空，月光皎洁<br>“龙门啊！”</p><p>黎明——<br>“少林寺谋反!”<br>正是那天早上，东京禁军，河南节度使老将王焕，太原节度使“徐京”共计五万大军出征的情报，被作为间谍在山外活动的王定六通报到少林寺</p><hr><p><img src="/upload/pasted-106.png" alt="upload successful"></p><p>已到黎明，仍然一片黑暗，有几个人悄悄的行动着<br>那是横穿荒野的街道旁的旅馆。后面是堤坝，下面是茶色的河流。<br>旅馆是两层建筑，而且还附有马厩，显得特别大，有人悄悄潜入角落的房间中，黑暗中，有女人在低声私语<br>“来了——请做好准备”<br>“这么早啊”<br>一个困倦的声音作答<br>“连夜赶来的吧，这么着急”<br>院子里一片喧哗。这里是郊外街道附近的驿站，是官员和军队主要使用的停歇换马的地方。门前吵闹起来的原因是运送货物的部队到达了这里。<br>“您们来的真早”<br>店家亲切地去迎接，把士兵们带到一楼的餐厅。<br>“马已经派人栓好了，请用餐吧”<br>餐厅早已准备好了酒菜，盛妆打扮的老板娘对着饥肠辘辘的士兵们温柔的劝酒<br>“都累了吧，赶快趁热吃吧”<br>老板娘把做好的饭菜端到士兵中间，士兵们争先恐后的喝酒吃菜<br>“多吃些，也喝些酒”<br>老板娘一边殷勤的服务着，一边听着士兵们的对话<br>“连夜赶路，可是累死了”<br>“没办法啊，这是急令”<br>“禁军已经集结完毕了吧，洛阳军加上东京禁军的人数是大概有三万吧……真是了不得啊，再加上节度使的军队，那少林寺就更不堪一击了”<br>这些事官军的辎重部队，是做各种杂事的地方杂兵“厢军”<br>“武器要多少有多少，在下一站换班，咱们加油吧”<br>“不过是真的太困了”<br>不一会士兵们相继昏倒，摔下椅子<br>屋里静悄悄的，不知哪里的门开了，传来粗壮厚实的男声<br>“完事了吗？‘小尉迟’？”<br>“可以了，过来搭把手”<br>旅店的主人——“小尉迟”孙新，跨过倒下的士兵，走了出去。端着饭菜的妻子顾大嫂也挽着袖子忙碌着</p><p><img src="/upload/pasted-107.png" alt="upload successful"></p><p>“小尉迟”孙新，梁山泊座次一百，他受哥哥“病尉迟”孙立传授，善用铁鞭，本是黑赌坊店家</p><p><img src="/upload/pasted-108.png" alt="upload successful"><br>其妻顾大嫂，座次一百零一，她是被唤做“母大虫”即雌虎的女中豪杰，撸起袖子干架的话，丈夫孙新自不必说，普通男人是不能与之较量的<br>孙新夫妇检查了辎重，大多是箭，枪，盔甲等装备，信号一发出，后面的堤坝上出现了几男人，把辎重都藏在了渔船中<br>划船的，是“立地太岁”阮小二</p><p><img src="/upload/pasted-109.png" alt="upload successful"><br>梁山泊座次第二十七，是梁山泊水军统领阮氏三雄的兄长，本是石碣村的渔民，年轻时总被人唤做“祸星”，阮小二巧妙的把那些辎重藏了起来<br>“那么，小二哥，之后就交给你了”<br>顾大嫂把做好的饭菜递给了阮小二<br>“我们走了，去找下一个猎物了”<br>阮小二拿起撸，茶色的水缓缓的流淌着，不由的让他想起了故乡石碣村<br>后面的船上，刚刚被顾大嫂叫醒的“玉幡竿”孟康无精打采的坐了起来<br><img src="/upload/pasted-110.png" alt="upload successful"><br>梁山泊座次七十位，船匠出身，善使高丽拳法，也曾坐船出海，远赴异国他乡，也是梁山泊的挖苦家，现在正对这条河流恶语相向<br>“这脏泥河，看一眼都觉得要倒霉”<br>“这是吴学究的命令，听得话总归是好事”<br>“行吧”<br>【<font color="#FF0000">注：以上两人已经在绘卷水浒正篇的方腊篇中双双阵亡，且死相异常的猎奇，且还被画了出来(ಥ_ಥ)</font>】<br>船要开了，孙新向他们道别<br>“到下一个码头，一定要到‘店’里去，新的情报应该到了”<br>吴用每掌握新的情报，都会发出新的指示，这个指示会通过信鸽，快马等各种手段传达。实际行动的人，完全不明白事态的发展<br>“‘走钢丝’啊，我又不是哪门子卖艺人”<br>孟康让手下人掌舵，靠在船边<br>天亮了，毒辣的朝霞，好像燃烧一般<br>孙新和顾大嫂收拾行李，离开了旅馆。<br>而被麻药麻翻的士兵们，醒来就会发现自己全省疼痛，被扔在荒郊野岭的屋子里<br>到那时，他们的辎重和马匹，早已离他们远去了<br>孟康闭上双眼<br>玄幻的旅店，不光是这里一个，最近，在大宋西部的各个地方，官军的各种辎重，都莫名其妙的没了，被盗的东西，大概是被梁山泊的人乔装打扮带到洛阳<br>人们默默地在荒凉干燥的黄土高原上前进。船逆流而上。<br>从天上鸟瞰，这些赶路的人，就像小河涓涓而流，汇入大江</p><hr><p>清晨的少林寺，被一片诵经和叹息声笼罩，被派往少林寺的官军，除了洛阳军外，再加上东京的禁军，两个节度使的部队，少说也有五万<br>“如此大军压境，即使是嵩山，也是无法坚守的”<br>被冠以“谋反”“叛贼”的污名，山中一片悲寂之感<br>“我们有什么过错，给国家带来灾祸的，还不是那些和奸臣结党的道士”<br>当天，也有想要逃出山的人，金山大师也并未加以阻挠，但是最终，尝试逃跑的人，又回来了<br>通往山脚的路，大小的参道，几乎全部被官军封锁<br>官军陆续集结，终于，“元帅”林灵素出现了，他们有神仙庇护——画着八卦太极的旗子已经遍布山脚，少林寺那边看的清清楚楚<br>史进也出来侦察，官兵数以万计，团团围在山脚<br>即便是如此令人绝望的情形，金山大师也没有一丝动摇</p><p>林灵素的驻营设在了李村的道观中。“通真达灵元妙先生”的到来，这边的道士也是竭尽全力的款待<br>林灵素悠然地坐在法座上<br>清净旁人的房间中，还有两个道士，一个是蓄着漂亮胡须的郭道士，还有一个头上裹着布的道士。郭道士刚从东京回来，东京据此不算遥远，而且洛阳和开封之间道路通畅，如果骑快马不过是半天左右的距离<br>郭道士完成了在东京的“重任”，意气风发的进行了回报<br>“按照您的吩咐，我已近全部完成了，由于童枢密使上奏，皇上立即派遣王焕，徐京两个节度使出征”<br>“好，干的不错”<br>在林灵素的道冠之下，隐藏着一个不小的伤疤，因家境贫寒，他在年幼时就被抛弃在了寺院，可是，他却染上了自私堕落的恶习，被长老用锡杖狠狠的教训了一顿，因此，他逃出寺院，为了复仇而成为一个道士，时至今日，伤疤处的疼痛，长久的怨念，他也不曾忘记<br>“军队集结完毕，就开始发动攻击吧”<br>如今，林灵素已经有了复仇的资本<br>“你们这些和尚，尽情的恐惧吧，现在开始，你们真正的‘法难’就要降临了”</p><hr><p>戴宗返回梁山泊</p><p><img src="/upload/pasted-111.png" alt="upload successful"></p><p>梁山泊座次二十位，是拥有“神行太保”之名的韦驮天。<br>只要脚上绑上甲马，就能日行八百里，因此，他正在收集东京周边的情报<br>聚义厅中，吴用常在此待命，接到通报后，宋江，朱武等人也聚集过来<br>“节度使已经发兵，此时的少林寺就如风中残烛一般”<br>听到戴宗的汇报，宋江满面愁容<br>“一般官军还好说，但是节度使的话就有些麻烦了，听说他们都是山贼出身，有些能耐，吴军师，咱们得赶快采取一些措施啊”<br>吴用沉默了一会儿。虽然吹入聚议厅的风很热，但白羽扇却没有动。<br>“林灵素、法难、慕容贵妃、节度使……如此多的人物聚集在一起，这也许是超乎想象的大阴谋”<br>吴用已经获悉慕容贵妃已成为辽国的走狗。<br>扇子开始动了<br>他命令待命的“铁扇子”宋清准备信鸽<br>“需要几只鸽子？”<br>“有几只用几只”<br>吴用已经开始动笔了</p><p>黄昏时刻，无数鸽子从聚义厅起飞出发<br>“对了，再补一手吧”<br>吴用想起来，立刻唤来“铁叫子”乐和</p><p><img src="/upload/pasted-112.png" alt="upload successful"><br>梁山泊座次第七十七位，是天下第一的歌者，一个有着天籁之声的年轻人<br>接到指示后乐和叹了口气<br>“去东京倒是没问题……让我来做吗？需要我做什么？”<br>“还是要靠你啊”<br>接着“锦豹子”杨林也被叫了上来</p><p><img src="/upload/pasted-113.png" alt="upload successful"><br>杨林座次五十一位，本是一说书人，和搭档乌鸦“小乌龙”执笔走天下，因此宋国自不必说，就连外国的地理，风俗他也清清楚楚。他记忆力超群，可以说过目不忘，而且说出来也是明明白白<br>【<font color="#FF0000">注：此人为绘卷水浒传的潜在作者，即绘卷水浒传可以说是他的回忆录</font>】<br>见杨林到了，吴用拿过一张地图<br>“洛阳周边，有可以以寡敌众的地方吗？”<br>“洛阳是古都，自古便战争不断，周边土地平坦，视野开阔，不依仗城池是不好打的”<br>“抱着死亡觉悟的僧众们，必定会坚守营寨的”<br>“这可是一出叫座的好戏了”<br>杨林想了一下，把手指放在了地图的一点<br>伊水之畔——龙门石窟<br>河边画着优美的大佛</p><hr><p>傍晚时分，少林寺<br>随着黑暗涌来，笼罩在少林寺上空的绝望愈加强烈<br>人们聚集在达摩堂那里，盼着金山大师能指出一条生路，金山大师从容不迫的姿态，就宛如发现光明一般<br>在智真长老被捕入狱，龙门大长老迁化的现在，只有金山大师是护法的导师，这个关键的夜晚，会有什么样的觉悟呢——人么在篝火下等待着<br>史进也混在人群当中<br>薛永和银树在一起，石秀，李忠等人也齐聚一堂<br>“张神剑”等雇佣兵聚集在别的地方，商量着善后的对策<br>他们也邀请了史进，不过史进拒绝了<br>（金山大师，接下来会怎么样啊）<br>他比较在意<br>史进的目光一直注视着大师<br>坐禅的大师，久久未动，一旁守护的天穹和尚，手持长棍，如隔扇佛一般伫立着<br>“——问诸位”<br>金山大师终于开口了<br>外面挤满了人，但达摩堂却安静下来<br>“非我问，是佛问，我们有三条路：其一，与官军作战，违犯不杀生戒堕落到地狱的轮回之道；其二，投降，改信道教，其三，不战不降，与伽蓝共入毁灭之道，是时候做出选择了”<br>顿时人声鼎沸<br>“官军是不可能接受投降的”<br>“殉教也可，这正是我等的信念啊”<br>达摩堂中充满了悲观绝望的声音，史进愤然道<br>“这样一来，正中了那林灵素的下怀，你们死了，那群腐败的道士举杯庆祝，不后悔吗？”<br>“那怎么办”<br>史进也哑口无言，银树突然向前<br>“路还有一条——逃”<br>僧侣们又开始吵闹起来<br>“原来是这样”<br>史进不禁笑了出来，看了石秀一眼<br>“石秀，你说怎么样”<br>“我虽厌恶逃跑，但就这么白白等死，我更不能接受”<br>“时迁”<br>时迁刚刚侦察归来<br>“是这样的，在西南的山脚下，看不到官军的身影。因为很险峻，没有路啊”<br>达摩堂里无数的眼睛，在摇曳的灯光中看着史进<br>“那就这样吧，那么我们——出逃吧”<br>一出门，正碰见“张神剑”等佣兵，“张神剑”越过敞开的门向金山大师抱拳<br>“事到如今，我们也帮不上什么忙了，也不能一直在这里待着”<br>然后向史进咨询了对策<br>“咱们摸着黑四处散去吧，如若你跟我们到甘肃，我们必定请你做个队长”<br>“我会考虑的，满天星，你怎么打算的”<br>满天星并没有从达摩堂中走出，而是站在门框边，尼姑们一边滚着念珠，一边痛苦流涕<br>“我……我不能弃她们而去”<br>即使是逃跑，也可能会死，但是没人想坐以待毙，无数双眼睛诉说着求生的欲望<br>无数的目光汇聚在金山大师身上，大师似乎在等着什么<br>“天穹，去把东西拿过来”<br>接到命令后，天穹从达摩像中取出一个小柜子，看那柜子，一个人可搬不动。一打开，溢出了金银<br>“这些是我寺的应急资金，就拿这些雇佣你们吧”<br>金山大师把箱子搬到“张神剑”他们面前<br>“我希望这座山里一人不留，让他们逃出生天”<br>只有在敌人集结完毕前逃走大家才能生存下去<br>佣兵们面面相觑，不久“张神剑”打头，一人一把的递送黄金，史进，满天星，石秀他们没拿<br>“我们可不算是‘工作’，应当算是发酒疯吧”<br>这样说着，史进谢绝了“张神剑”递来的钱<br>然后问金山大师<br>“有能够放下这么多人，还能抵御官军的地方吗？”<br>“只有一个地方”<br>“哪里？”<br>“龙门”<br>史进眼睛亮了起来，怀里抱着木龙道人雕刻的龙<br>“听说龙门有石窟？”<br>金山大师点点头<br>“那是北魏时代开凿的石窟寺院。以山为基，在河流前建造了的坚固地方，那本是古都长安洛阳发生变故时，僧众们所固守的要塞！”</p><hr><p>嵩山之上，星空闪耀<br>星空之下，六个男人并排站着</p><p><img src="/upload/pasted-114.png" alt="upload successful"><br>“大家都到齐了”<br>史进看着每个人的脸。石秀，薛永，李忠，陈达，杨春——都是老样子</p><p><img src="/upload/pasted-115.png" alt="upload successful"></p><p><img src="/upload/pasted-116.png" alt="upload successful"><br>陈达说道<br>“这不是很豪华的阵容吗？”<br>李忠把棒子抵在地上，一脸涩涩的望着院子内<br>他们安静地屏住气息，正准备逃离<br>调查山脚下官军情况的“满天星”又回来了。<br>“没有发现，大部分士兵都睡着了。”<br>人们趁着夜色，离开了大山。<br>塔林是历代僧侣的坟墓，有无数的塔林鳞次栉比。他们经过这里，沿着少溪河取道下参道，越过少室山就到了大路边。<br>僧尼们被分为几队，跟随“张神剑”等雇佣兵依次离开了寺庙。彭尼担任了尼姑们的护卫。<br>银树决定和金山大师一起去。彭尼手拿着心爱的大钺，向银树行了个礼。<br>“公主殿下，我先走一步”<br>“嗯”<br>银树看着彭尼的脸<br>“彭尼，一直以来谢谢你了”<br>彭尼惊讶的回头看着银树，银树笑了<br>“很快就能在龙门见面了”</p><p><img src="/upload/pasted-117.png" alt="upload successful"></p><p>月亮微微的照亮了他们的去路<br>在院内，金山大师留到了最后，为了欺骗官军<br>需要有敲钟的人，一开始，就有一个九十多岁高龄的老僧请求留到最后，但大师却把他和伤者一同安排撤离了<br>天穹和尚正带着年轻力壮的武僧搬运密藏经典和佛像，也是为了保护这些东西，就像白马寺的僧人把《四十二章经》运送到龙门一样，篝火熊熊的燃烧着，四周几乎无人，为了不让火熄灭，有两个人在添柴<br>金山大师所允许留下的，并不是真正的僧人，而是两个还了俗的人<br>在逃到此地的僧人中，有两个被唤做“心色清”、“神灵静”的僧人，被大家所厌恶，这两人本是一寺住持高僧，“心色清”却犯下了邪淫戒，“神灵静”犯下了偷盗戒。他们虽然被破门，但求佛的心灵仍然忍受法难之耻，奔赴此地<br>“金山大师啊，请赐予我们切断因果的缘由”<br>“心色清”右手无指尖，“心灵静”的独眼一片白浊。深知自己是罪孽深重的人就如此惩罚自己<br>即便如此，他们还是认为自己的罪行不会消失，只有为佛法而献身方能赎清自身罪过。</p><p>金山大师敲响了深夜的钟声<br>所有的人都已经离开，只剩下天穹和尚和史进的队伍，天穹和尚本打算和大师一起留守，但他不能违抗大师的命令<br>“——那么就出发去龙门了”<br>拜见了金山大师，天穹和尚和众高僧一起走了。莫志也向史进等人打了招呼，跟在后面。<br>这支部队由雇佣兵中留到最后的满天星担任护卫。<br>“大师打算和少林寺共同赴死吗？”<br>“满天星”回头看了看远离的少林寺。沉默寡言的天穹和尚没有回答，道路一片黑暗，异常凶险，已经没有回头路了，在龙门保护这些经典，佛像，就是他的修行<br>越过险峻的山岭后，下到南麓的斜面上，有一个被当地居民称为“佛掌角”的略宽阔的山脊。平安翻越过山的人们聚集在那里，要向龙门进发<br>护卫的“满天星”询问走在前面天穹和尚<br>“珍贵的经典都在这里了吗？”<br>“都在这里了”<br>就在这时，眼神好的莫志看见了远方点起的火<br>“那是什么情况”<br>在“佛掌脚”的方向，看见了火光<br>“难道是官军？”<br>突然，有人在背后袭击天穹和尚，背上的柜子掉到了地上<br>“‘满天星’你想干什么？”<br>发起攻击的正是满天星，跟随天穹的少林武僧立刻准备战斗，但是满天星早已拿起柜子跑出去好远<br>“难道，你？”</p><p><img src="/upload/pasted-118.png" alt="upload successful"><br>“只要拿到《精武大宝藏经》，少林寺对我就没有利用价值了，再见”<br>就这样背着柜子消失了，武僧们本打算追上去，但是，埋伏在“佛掌角”的官军已经开始了屠杀</p><hr><p>随着钟声的余韵消失，史进竖起了耳朵。<br>虽然觉得听到了什么，可嵩山的天空却沉吟不语<br>在香炉后闭目养神的李忠站起身来<br>“那么，我们也该出发了”<br>看到僧侣们已经撤离，他们也在盘算着出发时间，直到响起最后的钟声，他们都要尽力争取时间<br>大师刚刚敲响了最后的钟声，<br>好汉们行动起来<br>金山大师从钟楼上下来，走到史进他们身边<br>“去吧”<br>说的是史进所预想到的话<br>“大师，请和我们一同撤离吧”<br>金山大师手持般若雷，掷地有声<br>“一旦你们离开，我会让这里一片火海，即使夷为平地，也不会变成道观的”<br>大师一开始就做好了与少林寺共存亡的觉悟<br>寺院起火，肯定会让官兵误以为僧侣自杀，能推延他们的追进<br>史进并没有同意<br>为了让金山大师和银树也平安逃离，他们留到了最后，可是，大师却从篝火中拿起一根火把，沉默的走向达摩堂<br>石秀也催促着史进<br>“想死的人，就让他去死吧”<br>“不行！”<br>史进想追随大师。杨春抓住了他的手臂。杨春的目光注视着北麓。<br>“官军来了！”<br>官军的篝火登上大参道。起初像星星一样稀稀落落，数量逐渐增加，变成了一条火河。<br>“夜袭吗？”<br>听了史进的话，陈达摇了摇头<br>“唉，可是袭击正在包围的寡军，根本就没意义啊”<br>“那他们这是干什么？”<br>他们有种不祥的预感，把视线击中在了南侧的参道上，听见了声音<br>“——大师！”<br>那是被莫志搀扶的天穹和尚的声音<br>“‘佛掌角’有伏兵……满天星背叛我们了”</p><hr><p>“找不到……”<br>满天星一边听着四处凄惨的喊叫声，一边喃喃自语，他手持火把，在树林中检查柜子中的经典，找完最后一个柜子后，他面目狰狞，好像地狱的阿修罗一般<br>“根本就没有！”<br>满天星一脚踢翻散落在地上的经典<br>“《精武大宝藏经》不在这里！”<br>《精武大宝藏经》是一部被少林寺所秘藏的传说中的武术书，相传，读罢此书，将会拥有最高的武艺，因此有不少武者，或出家为僧，或偷偷潜入进入少林寺，企图获得《精武大宝藏经》，但最终都断绝了消息，不知所踪<br>满天星也是以法难为契机，混入了少林寺，也暗中给官军传信，告诉了他们僧侣们的逃脱地点<br>（《精武大宝藏经》到底在哪里？）<br>如果是珍贵的经典，肯定会被带出来的<br>（不过……）<br>满天星盯着四处火光的少林寺<br>正当这时，午夜的钟声响了<br>敲响这钟声的，就是那个金山大师<br>“是这样啊，为了自己的武艺天下第一，就亲自保护吗？”<br>那可不行——咬牙切齿的满天星，恢复了原本的端庄<br>然后，“一块云”满天星再一次消失在黑暗中</p><hr><p>被砍中肩膀的天穹和尚，血正在从身上披着的袈裟上渗出<br>不久，天微微亮了<br>嵩山最黑暗的时候也来临了<br>“——来了！”<br>石秀低声说道<br>陈达和杨春手持武器面向山门<br>黑暗中，如同火海般汹涌而来的，正是林灵素所率领的一万精锐禁军，目标是压制金山大师和少林寺<br>原本担心陷阱的官军的进军速度却加快了<br>，甲胄撞击的声音迫近，似乎连迸溅的火星也看到一清二楚。声势浩大犹如鲸鱼掀起的波涛<br>“砍下谋反者‘金山’的首级”<br>夜鸦从少林寺的屋顶成群的飞走<br>而且，从西南麓传来呼唤声,战斗的声音，悲鸣，微弱的诵经，很快就消失了。<br>退路有埋伏，正面是大军压境——大家都在望着金山大师<br>大师脱下袈裟，披在了因失血而颤抖的天穹和尚身上<br>“快跑——要抱着牺牲的觉悟”<br>【<font color="#FF0000">这金山大师是真的不地道啊orz<br>  </font>】<br>天穹和尚握住竖立在钟楼柱子上的般若雷，站了起来，猛地向破败的山门跑去<br>“大师，再见了，我总有一天还会重归净土的”<br>破戒僧“心色清”和“神灵静”两人也跑了起来，天穹和尚竭尽全力，用般若雷打碎了冲在前面的官兵的脑袋<br>天穹和尚就这样突入敌阵，面对正面的对抗，官军一瞬间胆怯了，但还是很快做出反击，”心色清”和”神灵静”一下就被砍倒了<br>“抓住金山！”<br>天穹和尚的背后，是烈火中熊熊燃烧的少林寺，他静静的矗立在参道上</p><p><img src="/upload/pasted-119.png" alt="upload successful"><br>“我就是金山！”</p><p>熊熊烈火，星光朦胧<br>金山大师正在钟楼和附近的建筑放火，急忙的向着山门反方向的南方赶去，这是通往僧侣们逃离的“佛掌角”的道路。<br>背后可以清晰的听到官兵的叫嚣<br>薛永牵着银树的手。那只手虽然像孩子一样纤细，但银树反握的力量很强。<br>薛永也紧握住银树的手</p><p>“佛掌角”和少林寺隔着一座山岭，其间是一片没有路的山林，如果设法进入山里，就不怕追兵了<br>以金山大师为首，一行人健步如飞<br>头上松籁喧嚣，脚下草丛密集。但是，长期在少林寺修行的大师却能看到看不见的道路<br>他们在山顶停顿片刻，遥望着焚烧少林寺的火焰。<br>被青白色的月光照耀着越过山峰，不经意间，眼下战场一览无余。<br>战斗的人遍地是，可是尸体的数量却更多，雇佣兵们，武僧们，护国禅师们，尸体遍布在这残酷的战场上<br>大师在月光下读着战报、<br>“敌人的数量是我们的三倍，这里已经是死地了，最终不过是全灭”<br>史进他们从斜面赶到战场<br>此处是少溪河被削出的山谷，在仅仅一小片平地上聚集了僧人和士兵。官军拦截着往下走的山谷出口，迅速地攻了进去，正如“佛掌台”的名字一样，道路贴在了手腕的位置，入口很小，官兵进军很难<br>武僧们的迎击也集中在了那一点，雇佣兵队长的“张神剑”正在积极布阵，防卫的主力是武僧和“白光尊师”等白衣护国禅僧。在位于“手指”的狭窄地带，尼姑和受伤者正在歇息<br>为了护卫尼姑们的彭尼，挥舞着大钺，挡住进发的敌军，此时已经全身受伤，脚又被枪击中<br>“彭尼！”<br>银树不禁叫出声来<br>薛永和银树一起赶到彭尼身边。李忠不知道要去哪里。是守护尼姑们，还是和僧侣们并肩战斗？薛永说道<br>“李忠大哥，我们守在这里即可”<br>“战斗异常残酷，但是，拜托你们了”<br>李忠环顾战场四周。史进冲到了防守的第一线，那里战斗最为激烈，那里正是凄惨的地狱，官军凭借人数蜂拥而至，南北少林的武僧们不断的向官兵发起攻击，他们的棍子和拳头上都沾满了鲜血，梵净寺的护国禅僧们抛开绳索，用锡杖戳倒官兵。“白光尊师”像幽鬼一样在空中，用锡杖打碎了敌人的脑门，一击一人，一刀三人。此时，“天三奇”本觉上人的身姿异样，巨大的身躯一动不动，护着周围的尼姑，徒手抓住攻上来的敌人的脖子，一击打断骨头，撕裂身体，双手迸溅的血液，滴落在上人的笑脸上<br>薛永用手掌挡住银树的眼睛<br>“不能看！”<br>这是一个修罗，恶鬼的世界<br>清廉的护国禅僧们，正是以前从漠北的监狱集体逃跑了的死刑犯们。笑容满面的本觉上人本是在江湖成为传说的杀手吗，这正是他们真正的样子，数年的修行犹如梦一场<br>官军陆续从街道上来。从通向龙门的街道到小路上到处都是敌人<br>正如大师所预想的那样，狭窄的“佛掌角”是无处可逃的，武僧，雇佣兵们和官兵肉搏，一个个的倒下，无法战斗的尼姑也无处可逃，一个个被杀<br>有不少人专挑着这些没有战斗力的人下手，薛永舞枪阻止着他们。棒子之类的东西是没用的，如果不能让敌人站不起来，就没什么意义了。银树也拔出剑来，可是，薛永却让她退到后面<br>银树不想杀人<br>薛永犹如鬼神一般战斗。平日温柔的青年的面容消失了，他的眼睛里不是——病虎，而是闪耀着野虎的光辉。</p><p><img src="/upload/pasted-120.png" alt="upload successful"></p><p>史进的注意力集中在通往街道的小路上<br>（走到街上，就能逃掉了）<br>只要离开这个死地，哪里都有退路可逃<br>注意到这一点的人们也跟着史进，帮助着他，护国禅僧开辟了一条道路，他们的白色外衣被染得通红。“白光尊师”头发和皮肤都染成了红色，最终战死在敌人的尸体上<br>本觉上人在将最后一个敌人劈成两半后，全身中枪而亡，那张脸，就像弥勒佛的笑颜。<br>史进在另一侧，放眼望去，密密麻麻的敌军，好像都涌向史进一样<br>“史进大哥！”<br>史进一边飞出了一支箭，一箭一人，他解除了被母亲封禁的双手，第一次射人<br>眼前突然浮现出母亲悲伤的脸。突然，他听到背后有悲鸣声，一回头，一个被彭尼砍翻的士兵倒在地上，银树还是无法杀人。彭尼和银树相拥，看着莫志。<br>莫志搭起下一只箭</p><p><img src="/upload/pasted-121.png" alt="upload successful"><br>“啊，我不是杀了你们……我是救赎了你们，救赎你们”<br>此时，史进仍然在战斗，没有停止前进<br>石秀也跟在史进身边，但是，史进觉得周围遍布敌人。碰撞身体的冲击，迸溅的火花，驱使着史进加速狂奔<br>面对无尽的敌人，向着更远方，加速奔跑。棍子打断了，就拾起了地上的枪<br>史进的每一击，都是致命的一击，一边跑着，一边打到五六十个敌人，开辟着前进的道路<br>就好像有王进在一旁一同战斗<br>“师父！”<br>打倒下一个敌人后，史进大叫<br>“史进，站住！”<br>陈达在呼唤他，但史进好像无视了一般<br>“无论如何也不能停下来啊”<br>陈达和杨春也追随着史进<br>天快亮了，也看不到战斗的结束<br>史进在前面带路，试图杀出一条血路，后面还跟着杨春，陈达，少林寺的武僧们。他们团结一致，把官军又推回了山脚<br>不久，他终于看见了后参道的入口<br>可以看到官军的篝火熊熊地燃烧着。<br>“不要冲出去，会被当成靶子！”<br>他也不听石秀的话，径直杀入敌阵，天已经开始亮了<br>官军埋没了视野，无论哪里都有官军<br>史进一个人突出，正跳进了当中。无论是陈达，还是杨春，谁也赶不上史进的势头。<br>官军的怒吼好像卷起旋涡一般<br>“终于来了，赶快灭了他们”<br>史进一瞬间被包围了。包围缩小，一圈长枪指着史进。<br>就在这时，史进周围突然发出了头骨崩裂的声音，宛如被大手拂过一般，一连五六个人倒下了<br>在史进的血雨朦胧的眼中，映出了巨大的僧形的身姿。</p><p><img src="/upload/pasted-122.png" alt="upload successful"><br>月亮渐渐沉入低空<br>金山大师站在那白色的光芒中，举着沾满鲜血的般若雷。</p><p>【<font color="#FF0000">下集 龙门决战 预告</font>】</p><p><img src="/upload/pasted-123.png" alt="upload successful"><br>命运六星，齐聚嵩山<br>“——走吧，出发到龙门”<br>龙门——那里是佛教的“圣地”。北魏时代，伊水岸建造了石窟寺院。<br>而且那里是佛教的“最后的堡垒”。<br>舞台到了决战之地——龙门！</p><p>独自一人，想要走自己的路的银树，她向着前方……<br>下章「龙门决战」，敬请期待！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;font color=&quot;#FF0000&quot;&gt;原文作者 森下翠和插画作者 正子公也 版权所有&lt;br&gt;&lt;br&gt;个人翻译&lt;br&gt;&lt;br&gt;仅供个人娱乐及同好者欣赏&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;http://suikoden.com/&quot; t
      
    
    </summary>
    
      <category term="绘卷水浒传" scheme="https://www.junglezero.top/categories/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0/"/>
    
    
      <category term="绘卷水浒传 二十周年番外" scheme="https://www.junglezero.top/tags/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0-%E4%BA%8C%E5%8D%81%E5%91%A8%E5%B9%B4%E7%95%AA%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>绘卷水浒传 20周年企划 第三章 翻译</title>
    <link href="https://www.junglezero.top/2019/03/05/%E6%B0%B4%E6%B5%92%E4%BC%A0-20%E5%91%A8%E5%B9%B4%E4%BC%81%E5%88%92-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BF%BB%E8%AF%91/"/>
    <id>https://www.junglezero.top/2019/03/05/水浒传-20周年企划-第三章-翻译/</id>
    <published>2019-03-05T15:05:00.000Z</published>
    <updated>2019-03-19T01:02:34.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-少林战云"><a href="#第三章-少林战云" class="headerlink" title="第三章 少林战云"></a>第三章 少林战云</h1><hr><p><font color="#FF0000">原文作者 森下翠和插画作者 正子公也 版权所有<br><br>个人翻译<br><br>仅供个人娱乐及同好者欣赏<br></font><br><br><br><a href="http://suikoden.com/" target="_blank" rel="noopener">原文地址</a></p><hr><p>少林寺的夜晚。天上银河闪耀。<br><img src="/upload/pasted-80.png" alt="upload successful"><br>黎明前，薛永做了一个悲伤的梦，猛地惊醒了<br>即使醒来也没有梦的记忆，只是一个人，残留下来的寂寞，漂浮在胸口。<br>无意识地把手伸向地板，发现应该在那里睡觉的太白不见了。<br>小小的四阿天花板在星光下漂浮着【四阿：屋宇或棺椁四边的檐溜可使水从四面流下】<br>薛永为了不让同宿的史进和石秀起床，离开了代替卧铺的长椅<br>山上的夜气已经很冷了<br>走出房间后，地上的黯然和天上的星星，和着夜风一起涌向薛永<br>随风吹来的，还有敲击铁栅栏的锤声，少林寺并没有入睡，篝火在钟楼附近耸立，传来了人们来去的气息。这是为了应对官军的攻击。<br>听到了天穹和尚的声音<br>“要充分调动起那些能利用的人”<br>山脚下，有萤火虫般的光在乱舞。是官军的火把<br>战斗，也许会在早上打响吧<br>薛永摆脱了紧张的气氛，他向山上爬了一会儿。本以为岩石上并排着石佛，走近一看原来是数十个坐禅的瘦削和尚。<br>经过他们的搀扶，薛永又向前进了一步。<br>一种嘎啦嘎啦的不可思议的声音混入风中。薛永追寻过去，来到了竹林。但见伸向天空的竹子，随风摇曳，相互碰撞，发出幽玄的声音。<br>薛永倾听着风吹奏的竹子的旋律。<br>然后，不知为什么，薛永抬起头看了看竹林深处<br>林立的竹子对面，飘着一件白色的衣服。长长的黑发，在夜风中跳舞<br>看到她的侧脸，薛永也不知道那是谁。<br>竹子的枝叶像波浪一样纷乱<br>（银树——不，金奴公主）<br><img src="/upload/pasted-81.png" alt="upload successful"><br>但是，丝毫没有平日里那个活泼少女的样子，不是因为解开了平常的辫子，才看起来那样的<br>一种让人产生这样一种错觉:死了的皇后的高贵亡灵伫立在那里，环绕着银树的身体<br>薛永犹豫着是否要上前说话<br>最先注意到的是坐在银树脚下的太白<br>太白敲着鼻子，银树也转向了薛永。薛永艰难地向银树迈开了几步。银树注视着薛永。<br>“不冷吗？”<br>银树没有回答，只是摇摇头<br>自从银树的公主身份公开之后，银树的行为举止和以前有所不同。像孩子一样的天真无邪没有改变，但她的天真无邪反而让薛永感到迷惑<br>“我们回房间吧。我想彭尼一定会担心的。”<br>“我还想再待一会儿这里。”<br>声音和往常一样，薛永松了一口气。<br>两人站在高崖上。从悬崖上吹来的狂风，在竹林造成一片骚动。竹叶飞舞着，那另一端闪烁着星星。篝火在漆黑的夜空下燃烧着。<br>在即将面临毁灭的不稳定的世界中，两个人孤零零地并排站着。<br>薛永觉得应该说点什么<br>“因为你是公主……如果投靠官军，会保护你的”<br>银树微微一笑，薛永惊讶不已<br>“你不害怕吗？”<br>“为什么会害怕呢？”<br>“战斗马上就要开始了……”<br>即便是微风，也引起了竹梢也剧烈颤动<br>银树又向着夜空。目光远远地看着星星。<br>“这里和我成长的孤女峰很像。那里，真的只能看到山。只有山和天空。我总是一个人，眺望着从山上涌出的云彩。非常安静，整天侧耳倾听，只能听到风声、鸟鸣和佛经”<br>银树轻轻闭上眼睛，竹叶像小鸟一样飞来飞去。<br>“所以，我交了个‘朋友’。她是“银树”。银木犀的精灵，总是对我说。‘金奴，你没错。杀死母亲的不是你’”<br>薛永想起了彭尼所说的金奴公主的成长经历。<br>现在薛永所看到的，是受伤，被家人抛弃的孤独的少女——是‘银树’从未展现的金奴公主真正的样子<br>“那皇上呢？……你父亲不记得你吗？”<br>“父亲有六十个孩子。他一定连我的名字都不记得。即使记得，也不允许报仇。回到东京，我又被送到寺庙里，作为“杀害母亲的不吉之子”，被当做尼姑。读着佛经，上了年纪，被人遗忘，然后死去”<br>银树用纤细的手指压住飘动的头发<br>“我的愿望就是为母亲报仇。别无所求”<br>银树抬起头，笑了。<br>在凝视薛永的银树的大眼睛深处，星光闪烁<br>“我现在——现在很幸福”<br>大风吹过了。感觉就像风把银树绑在一起一样，薛永不由地抱住了银树。<br>银树小声说道<br>“如果不变强……不变的更强的话”<br>竹叶泠泠作响<br>这个安静的耳语，既像音乐，又像警钟</p><p><img src="/upload/pasted-82.png" alt="upload successful"></p><hr><p>清晨，在仍然昏暗的街道上，有两个人影向西行进着<br>前面打头的那个很壮大，后面跟着的那个细长细长的，在路边，好像是从某个寺庙里拿出来的佛像和经典被扔掉了。<br>“太过分了”<br>“活闪婆”王定六一边走，一边嚼着甜玉米。<br>“我说佛教和道教就像兄弟一样，嘛，佛教有点像兄长。现在居然是父母偏袒弟弟，让兄弟吵架”<br>王定六所说的“父母”就是朝廷。<br>如果寻求心灵的安息的话，那就去佛寺，追求现世利益，那就去道观，纵观历史，两者都有过被朝廷所压迫、成为暴乱的温床和作为国教受到保护的情况，“皇帝菩萨”梁武帝偏向佛教，举国倾斜。唐武宗受道士劝诱对丹药狂热，早逝。<br>“和尚也好，道士也好，在山里修行的时候都很好。一旦混在世俗中，就会想要跟普通人一样尝点甜头”<br>鲁智深默默地走在前面。两人结伴从东京出发，向西前进。两人虽然心知肚明，但说话的只有王定六。<br>“我知道啦，哥哥，你是和尚，不要救我啊……有恩的智真长老，救他吧”<br>而且──，王定六看了看满是灰尘的道路。<br>“我也知道。道士与现世利益、赚钱结缘。和尚说为了安乐地死去，就要舍弃这种欲望，不能喝酒，吃肉，赚钱，玩女人，安乐地死就满足了。据说，名叫释迦牟尼的人，舍弃了王子的身份和妻子，离开了家。就是凡人也难以接受”<br>途中，看到宣扬救济灵魂的僧人被扔石头，鲁智深也多次被道士缠住，苦于贫困的人们，因为道观捐赠的一点点钱和粥，所以道士们唯命是从。<br>“贪婪投机的和尚迅速转宗，抵抗的尽是认真修行的穷和尚……且慢，我懂了”<br>太阳升起，街道又开始充满活力<br>路边的树荫下，聚集着乞丐们。在小小的广场上出现了几家小摊子，可以看到吃早饭的旅人和艺人<br>乞丐们注意到了鲁智深，站起来低下了头，为了配合东京丐帮，全国的乞丐们都行动起来了【原文意思】，帮着收集情报<br>“智真长老情况如何”<br>“被关在朝廷的地下牢房里。据说由于拒绝改宗，而进行了绝食斗争，有传言说不久将会身亡，也有的说在这之前就会被杀”<br>鲁智深愤然地将禅杖立于地上。<br>“这样可不行”<br>“杀害高僧之事前所未闻，僧侣方面也容易引起反对。特别是河南自古以来佛教就十分盛行。和尚们抵抗废佛，很多寺庙被官军烧毁。残党聚集在少林寺，这将成为最后的抵抗——大家都在流传着这样的谣言”<br>王定六窥视了鲁智深的脸。<br>“哥哥，不用担心。少林寺都是武僧，已经习惯了‘战斗’。况且，如果史进找到了‘王教头’，那可就不简单了。”<br>“可是……”<br>牙齿脱落的乞丐驱散了肩头的苍蝇<br>“已经有一万大军包围了少林寺所在的嵩山”<br>鲁智深的眉毛一下子向上翘了起来。<br>“是哪里的军队？”<br>“西京洛阳”<br>“知道了，替洒家向河南的帮主道谢”<br>鲁智深扛着禅杖，大步走过抬着头的乞丐们。然后站在前面的旅馆前，蹲在地上吃饭的中年男子在前面。<br>中年男子一边用筷子夹着饭粒，一边望凝视着卖艺人挥舞棒子。<br>“山上是怎么吩咐的？”<br>听到鲁智深的声音，男子一边吃饭一边回头。这是鲁智深的一位老朋友，梁山泊的李忠</p><p><img src="/upload/pasted-83.png" alt="upload successful"><br>“打虎将”李忠——梁山泊位列的八十六位，曾作为卖艺人四处流浪，辗转各地，最终在桃花山上落草为寇，成了拥有五百手下的山大王。<br>“好怀念啊，不知不觉就看完了”<br>李忠捏着粘在下巴上的饭粒吃，懒洋洋地站了起来。然后从怀里拿出钱包，掏出几个银粒扔到卖艺人手里的笊篱里。<br>“哇，李忠难得的慷慨嘛”<br>“那个男人就像过去的我”<br>突然获得重赏的卖艺人，连礼节都忘了，茫然地站着。不幸沾染的脸上，比起喜悦，不安更浓<br>李忠把碗还给摊子上，在井边洗了脸<br>“山上的消息：枢密使童贯，向洛阳军发出了出征命令”<br>鲁智深瞪大了眼睛<br>“这是吴军师掌握的确切情报”<br>“人数是？”<br>“一万”<br>“这么多”<br>“反对废佛的和尚从全国汇集到少林寺。从朝廷的角度来看，如果放任不管的话，也会在民众间引发骚乱吧”<br>“话虽如此，动作还是很快的”<br>“吴军师觉得，这背后有黑手”<br>“是谁？”<br>“现在正在调查”<br>鲁智深一声呜咽，瞪着漫漫黄沙的道路远方<br>“不要演变成战争啊”<br>“不管少林寺的武僧有多强，终归还是僧侣。洛阳军是精锐之师。如果变成少林寺和官军的战争，胜败显而易见”<br>“如果少林寺败了，佛法就会从这个国家一扫而光”<br>智真长老的性命也保不住了<br>鲁智深的手掌上握着刻有达摩祖师的念珠。<br>“李忠，你先行出发去嵩山”<br>“要带什么话”<br>鲁智深扛起禅杖，迈向黄沙中。</p><p><img src="/upload/pasted-84.png" alt="upload successful"><br>“我会带着‘援军’前往，在这之前，请坚持住”</p><hr><p>同一早晨，烟雾缭绕的嵩山<br>佛寺的早晨向来很早。山脚被一万洛阳军包围的少林寺也不例外。<br>穿着破旧僧衣的老僧，朝着升起的朝阳开始诵经。那就是起床的信号。<br>史进醒来的时候，僧尼们已经洗完脸，结束了早上的坐禅和工作，开始准备早饭。<br>“好热闹啊”<br>史进打开窗户<br>隔壁有藏经塔，薛永在那前面教银树棒。银树的住处被安置在藏经塔里，彭尼和尼姑们紧跟着。<br>回头一看，石秀正在狭窄的地板上盖着被子睡觉。时迁作为侦察兵被指派到了金山大师那里，昨晚没有回来<br>史进猛吸了一口晨风<br>风中还混杂着烧焦的味道，煮饭的味道，不可思议的活力笼罩着少林寺。<br>史进为了伸展伸展，向朝霭中去了<br>银树似乎是第一次使用棒子，一本正经地模仿薛永的姿势<br>“身形很不错。薛永，你收了个得意弟子了”<br>薛永露出了暧昧的笑容<br>昨晚，银树说想学薛永的棒术。银树只会用剑。学习棒子，这样枪和长柄的武器也能使用了<br>“怎么样，薛永，这样正确吗”<br>重新扎起辫子的少女果然是薛永所认识的天真的王银树<br>尽管如此，总觉得他的笑容和昨天完全不同，薛永显得那么耀眼。</p><p>离开两人之后，史进向大雄宝殿走去，昨晚，史进他们因为太累很早就睡着了，可是彻夜都在梦中听到锤音<br>“——哇”<br>史进环视了院内。和昨天完全变了样子，一夜之间少林寺变成了“要塞”。<br>少林寺占地广阔，嵩山各处散布着大大小小的寺院。中心是昨天被烧毁的大雄殿，周围有很多御堂、佛塔、钟楼等<br>这一带被改造成“本营”。山门被封锁，参道上也建有障碍和栅栏。在佛塔上，有僧人监视着山脚下的官军，向全山传达命令的钟楼上守卫着强壮的武僧。<br>（真不愧是少林寺，果然名不虚传）<br>寺内来往的僧侣数量也在增加<br>（师父真的不在这里吗）<br>史进盯着擦肩而过的僧人。不仅是少林寺的武僧，其他宗派的僧尼也很多。是昨晚逃避官军的追踪，冒着生命危险逃往少林寺的人们。<br>少林寺本来寄宿着是由普陀山、九华山、庐山等反对本寺改宗的僧侣。这次，陕西和河南的僧人加入了。既有大慈恩寺、香积寺、长武昭仁寺等名刹的高僧，也有小村寺的住持<br>背后传来了快活的声音。<br>“史进大哥，早上好”<br>回头一看，莫志跑了过来。莫志昨晚进入少林寺，成为了天穹和尚的弟子，高兴地对史进说道<br>“天穷师父是金山大师的助手，我能成为他的弟子是一件非常光荣的事情。大师为了向白马寺表示敬意，特别照顾了我”<br> 广场的钟楼前，天穹和尚带着几个书记僧人，正在统计他寺的僧尼的名单<br>“这是金山大师的命令。要搞清楚从各个佛寺来了多少人”<br>“不管外表如何，都是很认真啊。那些家伙是？”<br>史进指着一群红衣僧人，<br>在众多的僧侣中，也是特别引人注目的一队。大概是准备早餐吧，双手提着水桶，头顶上放着装满蔬菜的笼子，轻快地走着。脚力很强，看得出来，也有些功夫。<br>“啊，那是南少林寺僧人。以前是与少林寺分开了的分派,不过，据说得知本山的危机，渡过了长江。在江南是有名的武斗派。不只是那个。瞧，用纯白的布包裹着全身的，是从西域的诸寺撒沙尘赶来的碧眼僧侣们。也有兴教寺的高丽僧、大福先寺和青龙寺的日本僧人”<br>史进凝视着异国的僧侣们，从看守塔里传来了声音。<br>“又有新的避难者到了”<br>被关闭的山门迅速打开，有二、三十个尼姑跑了进来。史进注意到了跑在前头的男人</p><p><img src="/upload/pasted-85.png" alt="upload successful"><br>护卫尼姑们的是拿着巨大刀的年轻俊俏青年。把黑发梳成一个漂亮的发型，虽然有武艺者风度，但是装束很潇洒，他在尼姑队伍的后面断后，帮着尼姑们进入山门，本以为要离开了，不想又背着一个掉队的老尼姑重新进来<br>“这就是全部了，关上山门吧！”<br>响起了有张力的美声。<br>“官军连‘小鹅岭口’也封锁了！”<br>青年收起刀后，对赶来的天穹和尚用优美的动作抱拳。<br>“我是后生‘一块云’满天星，在修行的途中，遇到了受苦受难的尼姑们，出于侠义之心，保护着他们一道赶来”<br>一丝不苟的仪表和姿态，只是，左手的无名指尖象被撕裂了一样地缺乏，成为唯一的一点缺憾。<br>“阿弥陀佛，多谢少侠出手相助”<br>天穷和尚答谢道，那些从汝州逃出来的尼姑们，也流着泪仰望着满天星。满天星谨慎地回应着,不过，注意到史进之后，他就过来打招呼<br>“同是武林中人？”<br>“只是路过而已”<br>“敢问阁下尊姓大名”<br>“只是无名之辈”<br>“为人谦逊啊”<br>满天星在凉爽的眼睛里浮现出高雅的笑容。<br>“那边是同伴吗？”<br>在满天星的指引下，史进将目光转向了院内的一角。</p><p><img src="/upload/pasted-86.png" alt="upload successful"><br>在栅栏之前，携带武器的男人们聚集着<br>在僧侣中，有发男子的身影十分显眼，史进也十分在意<br>确实是一群粗鲁的人，毫不客气的吃着配给的早饭，吃的到处都是。僧侣们合掌礼拜之后开始吃起粗粮，也有不满餐饭的人在烤着自己捕猎的野鸟<br>兴奋的莫志低声说道<br>“那些是四处来的镖客，雇佣兵，有传言说如果为少林寺而战，就能拿到很大一笔钱”<br>“赏钱？谁发的赏钱？”<br>“这好像是个‘秘密’”<br>莫志歪着头，有头发的男人大约有三百多人，青色战袍，表情严肃。为首的是一个嘴唇带有伤痕的男人<br>满天星好像对他们有印象<br>“那些人在江湖上有些名气，身穿蓝衣的是甘肃雇佣兵队长“神剑”张霸道，嘴唇受伤的是三门峡镖局大当家‘草上飞’律大谈”<br>据说无论哪个，都是附近有名的豪杰<br>“还有赏金猎人‘十年老’‘王铁子’‘黄再生’这些都是收人钱财，替人消灾的人……经常进出少林寺”<br>“啊，那样的话”<br>莫志回答<br>“跟你一样，他们也是既保卫僧侣，又带着信徒，真的好像在哪里收了钱一样”<br>背后传来了笑声<br>“啊，就连小白脸满天星也来了”<br>坐在大车后的是像乌鸦一样的二人组，满眼卑微，蜷着背窃笑着。莫志低声告诉史进<br>“那是咸阳做武器交易的，听说要打仗了，就来卖武器了，但是，大师好像并没有召见”<br>二人组的行李车上，各式各样的武器堆积如山。满天星也认识他们<br>“‘乌鸦嘴’和‘风凉话’还是生意兴隆吧”<br>“乌鸦嘴”净说不吉利的话，风凉话说着不负责的谣言<br>有争端的地方，就有这二人组，这两个也是在江湖上出了名的讨厌的人<br>“托您的福”<br>二人相视而笑，讽刺的笑着<br>“如果少林寺取胜的话，能拿到大笔钱是真的，动手要花多少钱，成功了要拿多少钱……不过，谁也不会说谁会出这笔钱”<br>满天星满脸通红<br>“我和他们不一样”<br>“啊，的确，少爷家里有些资产，只是想提高武名吗”<br>满天星不在理会二人，向史进解释道<br>“不好意思……我只是不能看到手无寸铁的尼姑被人迫害”<br>“咱们算是意气相投”<br>“愿结友”<br>“我是史进”<br>史进自报姓名后，聚集的男人们一齐回过头来</p><p><img src="/upload/pasted-87.png" alt="upload successful"><br>“史进？！”<br>“‘史进’，说起来——……”<br>赏金猎人“黄再生”歪着黄色浑浊得到单眼<br>“少华山的‘九纹龙’……现在是梁山泊的一个山贼头领”<br>“你看我像个山贼吗？”<br>“十年老”也用胡子遮住了一半的脸点头道<br>“像啊”<br>男人们直起腰，笑嘻嘻的围在史进周围<br>“王铁子”蹭进史进<br>“史进兄弟，能让我们拜见一下身后的九纹龙吗”<br>“拒绝”<br>“风凉话”插进话来<br>“要是纹着‘九纹龙’的话，那就值钱了”<br>“托你的福，我的伙伴‘史进’是五纹龙”<br>“我所知道的史进已经秃头了”<br>男人们叽叽喳喳的吵着，这时，石秀溜达过来了<br>“——从早上开始就很热闹啊”<br>“啊，真难为你石秀了，竟然起这么早”<br>“石秀！？”<br>男人们的眼神又变了</p><p><img src="/upload/pasted-88.png" alt="upload successful"><br>“‘不要命’的石秀？”<br>“史进，石秀？这地方真是卧虎藏龙”<br>“那边还有个美男子，那家伙应该是浪子燕青”<br>“很遗憾，他不是”<br>“那家伙叫薛永”<br>“王铁子”和“黄再生”互相对视，歪着头<br>“薛永，没听说过”<br>“你们真是无聊啊”<br>男人们哄堂大笑，异口同声也纷纷开始“自我介绍”。<br>“我是打虎的武松”<br>“及时雨宋江就是我”<br>男人们笑着拍着史进的背，回到了各自的地方。最后，“张神剑”好像有意思地笑了。<br>“我很喜欢‘史进’啊”<br>骚动平息了，石秀去拿早饭了。两个人在一起时，莫志拉着史进的袖子。<br>“对了，史进大哥，刚才我说，南少林的僧兵中……啊，回头见”<br>说到这里，莫志慌忙的走开了，石秀端着两碗饭回来了，只见大麦饭上，盖有豆腐木耳等素菜。石秀看了一眼满天星，把大麦饭交给史进，然后自己也开始吃了起来<br>“你也抓紧吃饭吧，今天会很忙的”<br>但是，史进一口都没有吃完，监视塔里传来喊声<br>“敌袭！！”<br>石秀一口气把饭扒拉干净<br>“这些家伙行动总是这么早啊”</p><hr><p>朝霞初起<br>史进等人面向钟楼，金山大师马上出现了</p><p><img src="/upload/pasted-89.png" alt="upload successful"><br>跟在身后的是少林寺的五百武僧，他们身着僧衣，手持长棍，其他寺院的僧人和雇佣兵也赶来了</p><p>众目睽睽之下的金山大师，看起来比昨天还要强壮。<br>“官军从‘西郭店口’向正面的大参道进攻。其数量大约为五千”<br>时迁和手脚灵活的僧侣回报，大师掌握了正确的情报<br>“必须保卫嵩山”<br>金山大师用强有力的声音向僧兵们宣告了迎击命令<br>“战争也是‘方便’，是引导众生的菩萨道”<br>然后他又把目光转向了准备出发的雇佣兵<br>“俗人啊，你们并非出家人，下山向官军投向吧”<br>佣兵们发出了不满的声音<br>“我们是帮你们的啊”<br>“张神剑”从佣兵中走出来<br>“在官军来看，我们就是护卫僧侣们的，现在已经不可能投降了”<br>“那你们就藏在山洞里，吃些饭吧”<br>金山大师以锐利的目光让男人们沉默，登上钟楼，然后两手举着“般若雷”，敲响了开山以来最大的大梵钟<br>“南无阿弥陀佛，诸师，精进吧”<br>冲在最前头的是身穿僧衣的少林武僧，他们挑起的根子像树林一样，朝着山门走去。赤衣的南少林僧人也接连不断，他们是体术的精锐<br>天穹和尚也光着身子，在肌肉强劲的胸部和背部，有着巨大的刀伤，天穹和尚手拿一根更粗的樫棒，他叫来了莫志<br>“年轻的弟子啊，我和随流本是守护金山大师的‘阿吽’【阿吽（梵a hu^m!）：‘阿’，是开口时首先发出的声音，为一切字、一切声的本源；‘吽’，是闭口时所发出的最后字音。因此此二字在密教中象征诸法的本初与终极。】，作为‘阿’的随流已经遁入轮回了，莫志，请上前”<br>天穹和尚把一组弓箭交给了莫志<br>“‘破烦宝弓宝箭’——要以此来保护好大师”</p><p>天穹率领着僧众走向山门<br>莫志手持弓箭奔回钟楼的广场，他山的僧人们也陆续集合过来，金山大师把银树叫了过来<br>“荣德公主，你下山去吧”<br>僧尼们必须为生存而战，但是银树没有守护少林寺的理由。<br>银树抬起头看金山大师的脸<br>“不”<br>银树回答的很清楚<br>“我也要和大家并肩作战”<br>金山大师回顾了少女清澈的眼神。天真烂漫的眼睛里隐藏着坚定的意志。<br>“但是……”<br>“请您不要担心”<br>银树对犹豫不决的金山大师微笑着去，指着旁边的薛永<br>“这个人会保护我”</p><p>僧兵们杀了出去<br>“史进大哥”<br>手持弓箭的莫志跑到史进身边<br>“接着刚才说的，南少林的僧兵中有一个被唤作‘王无伤’的枪棒高手”<br>“你说什么？”<br>“虽说从未受过伤，但是脸上有严重的伤痕，因为是有前科的人，所以也有传言他是故意为之”<br>“南少林寺吗？”<br>正好赤衣的僧兵们集结向山门走去，石秀抓住了想要追随而去的史进<br>“等等，一会再找人”<br>“少林寺的所有战斗力，都集结在这场战斗中”<br>是生是死，佛法是存在还是毁灭——他们坚信“人世终结”是必然的，人们的祈祷和恐惧交织在一起<br>其中心屹立的须弥山，就是金山大师【古印度神话中位于世界中心的山位于一小世界的中央（一千个一小世界称为一小千世界，一千个小千世界称为一中千世界，一千个中千世界为一大千世界，这就是“三千大千世界”的由来）】<br>金山大师迎着史进投来的目光<br>广场上回响着金山大师的声音<br>“金刚曼陀罗阵，起”</p><p>嵩山东西两山相连，东称太室山，西称少室山。少林寺是建于少室山五乳峰的寺院。参道在北侧，南侧是险峻的山和溪谷。官军用大军推进着正面的参道。<br>率领洛阳军的宇文将军是正直中年的将领，战争经验丰富，但是由于家世教低，常年身居“副”都指挥使，此次是因为正都指挥使不愿意出阵，才得到了机会<br>接到朝廷下达讨伐少林寺命令的正都指挥使，因自己虔诚信佛的祖母震怒不已，只好放弃了出征<br>马上的宇文将军是个无神论者，不信佛，不信道，只是凭借战功立于世的将军<br>“就算是少林寺的武僧，也不可能了解战争，僧侣们不好好的在寺庙中念经参禅，非要走出山门，胜负已定”<br>隔墙那边的少林寺山门已经开了，少林寺的僧人已经严阵以待了</p><p>战斗在清晨的参道展开了<br>几百年善男信女走过的路竟然成了战场<br>洛阳军本阵留了一半预备队，剩下五千人从正面蜂拥而至，弓兵在前，朝着跑下来的僧兵射箭，僧侣们也早已料到了这一手，拿着手里的门板和棍棒一边拨开乱箭，一边前进<br>那些动作整齐划一。从幼年时就和几十年同吃同住的同门师兄弟组建起来的，是一支稳健不乱的队伍<br>金山大师把其他僧众编成了6个队伍，即“四天王”“忉利天”“夜摩天”“兜率天”“乐变化天”“他化自在天”的六天部<br>率领先锋“四天王部”的是“吽”天穹和尚，队伍中是南少林的武僧，有一千人。传僧衣的僧人比一般的士兵行进速度更快，高举盾牌的僧侣犹如雪崩之势，两军在山腰上猛烈冲突<br>史进他们在钟楼上。钟楼在高处，可以眺望战场，成为金山大师的指挥台<br>（‘王无伤’在哪里）<br>众多的僧兵混杂在一起，找不到他<br>战斗异常激烈，僧侣们的棒术和拳法都很出色，但是由于他们要遵守不杀生戒，只是击倒敌人，折断其手臂，虽然僧兵们数量较少，但由于僧道狭窄，洛阳军无法展开，因此有一定的优势<br>终于，战在阵头的天穹和尚的棒子折断了。莫志马上想拿弓箭支援，但是，天穹和尚早已抛下棍子，张开双膝，轻轻的向前伸出双手，发出了尖锐的呐喊</p><p><img src="/upload/pasted-90.png" alt="upload successful"><br>只见逼近眼前的官兵飞起了一丈多高，以天穹和尚为首的少林僧人都是气功高手【真*气功】<br>南少林的僧兵们是拳术师，腿上功夫也很好。踢胸止住敌人呼吸，踢头使敌人昏迷，就在这群赤手空拳的僧兵中，只见一人手持长棍，在人群中挥舞着，一棍子下去，一棍子下去，聚集的官兵就犹如麦子一样被收割<br>（“王无伤”吗）【应该是王无双才对】<br>史进瞩目凝视着<br>官兵数量众多，前仆后继，僧兵们被打压着<br>寺院的僧侣们几乎都出动了，彭尼和薛永受命守卫寺院，银树也跟着他们，留下的只有史进，石秀，满天星等“俗人”，石秀握着刀<br>“我们也杀出去吧”<br>金山大师伸手一挡<br>“等一下”<br>史进听见覆盖山体的竹林沙沙作响，这是少林寺周边你远近闻名的竹林。绿叶上狂风呼啸——正如叶子般瘦削，剽悍的僧人们，从官兵头顶发动突袭</p><p><img src="/upload/pasted-91.png" alt="upload successful"><br>“第二阵——“忉利天部””<br>白衣僧侣们手握锡杖和绳索<br>“梵净山的‘护国禅僧’。是在超俗的秘境修行的幻之僧侣难得在人前露面的隐士，因法难降临红云金顶”<br>像风一样，像飞鸟一般的僧侣们，与其说是僧侣，倒不如说长得犹如隐士一般的容貌，却有着刺客一般的举止。他们从潜藏的竹林中飞出，锡杖声响起，官兵应声倒地，又用绳索将敌人的四肢捆绑起来<br>率领这只队伍的是“白光尊师”，眉毛睫毛都已经一片花白，是拥有晓眼的神僧<br>“济度众生”<br>动作快的令人目不暇接</p><p>面对僧兵们的抵抗，官兵们进展迟缓<br>“宇文将军，不能在前进了”<br>对于探子回报，宇文将军沉着的下达了下一个命令<br>“中军向前，从岔路出”<br>他们调查发现参道侧下有一个向南的急坡面，上面有着相当广阔的田地，从那里到山顶有工作用的专门小道<br>“就是践踏田地，也要夺走敌人的给养”<br>副将马上率领中军千人上前绕过参道开始爬斜坡收割庄稼，但是近前一看，并没有蔬菜田，只有在阳光照耀下显露茶色的山表面，原来，昨晚僧侣们早已收割了这块地。在那片泥洼的田地中，有一个和尚静静的躺着</p><p><img src="/upload/pasted-92.png" alt="upload successful"><br>形态酷似弥勒佛，是个胖乎乎的和尚，坦胸露腹，正打着瞌睡，在他身边，刚收割的作物堆积如山<br>“一个可疑的和尚，要小心啊”<br>“吓死人了，没有军力，就想唱‘空城计’来弥补。前进！！”<br>官军方面也了解少林寺有多少军力，如果把战斗力都集中在参道上，那么也就没有余力保护嵩山的其他道路了，这都是预料之中的<br>官军们蜂拥而至，大腹便便的和尚也站了起来，回到了寺庙，胖的和尚走的很慢，一边追的官军怒气冲天<br>“追上去吧，就能追到寺庙了”<br>士兵踏出的脚，踩在铺在地上的稻草和菜茎。一踩到底，下面竟然是陷阱，本以为有竹枪有刀——掉下去的士兵，没有想到有更大的惊喜迎接着他们<br>陷阱中是装满肥料的巨大肥料池<br>胖和尚回过头来，用手指着哈哈大笑<br>“厌秽欣净”<br>这个大胖和尚【不是鲁智深】，就是独自埋伏的“夜摩天部”。是从“天水的奇山”麦积山来访的“天三奇”本觉上人——一日三变的奇异怪僧<br>虽然可以将刀枪之类的锐器埋在陷阱底下，但是出于上人的菩提之心，那些锐器变成了金黄色肥料<br>中军只能避开恶臭的陷阱，沿着细长的农道排队前进。道路的前方，是通往寺庙的通用门。用圆木和石灯笼加固，墙内堆积着石头。环绕寺院的门、护墙的是“兜率天部”。由留在院内的老弱僧尼、小和尚们组成，由彭尼指挥。<br>敌人一逼近，守卫就会敲打木鱼。等待的寺院男子、小和尚、尼姑们就会向敌人扔石头。他们嘴里念佛，替换着举起手臂。<br>虽说是老僧尼，他们平时也是在打水、打扫、干农活等方面锻炼身体的，也同样装备着布和绳索制成的投石器。石头飞的很猛，官兵根本无法接近。薛永站在围墙上，目光炯炯地寻找着有没有薄弱的地方。彭尼手持大钺，精悍的侧脸，有着不顾杀生戒的气魄，她猛灌一口挂在腰上的葫芦酒<br>“我十三岁时，在山上杀死了袭击父亲的猛虎，我不后悔”<br>在薛永旁边，银树手握石头站着<br>“银树，退到后面去”<br>“嘿嘿，薛永，你要保护我哟”<br>银树使劲把石头抛出，可是，力量不足，石头无法打中，途中掉了下来<br>“再试一次”<br>银树重新握住投石器，狠狠的扔了下去。一旁，彭尼选了一块拳头大小的石头，投石器在头顶上高高的挥动着。猛然，彭尼的石头划破天空，让率先行进的官兵喷出了血。<br>这样一开头，胆怯的小和尚和尼姑们也开始扔起石头。这是把对方看做法敌的投掷，这是为了生存而决死的石头，官兵们停住了脚步<br>官兵副将命令<br>“整顿队伍，盾牌上前”<br>那面盾牌上，石块也猛烈的突出着。日本僧侣们在后方把瓦片摔碎，想办法提高效果。【侧面表现了。。。嗯】一边念着地藏经，一边把石头劈开，期望那些石头像利刃一样突破盾牌<br>官军无法行进，拥堵在狭窄的农道上<br>钟楼的钟声突然响了，犹如风一般经过，一批白僧团杀将下来<br>他们就是从东边的参道赶过来的“白光尊师”等护国禅僧们。</p><p>莫志传来看守塔的报告<br>“农道的敌人又杀回来了”<br>人员的配置和防守的指示，全部是境内的钟楼里的金山大师的指挥，作为侦察队伍的“乐化天部”的僧人和时迁一起回到了本营<br>“不行啊，敌人会从北边的参道上上来。封锁小鹅岭口的官军开始行动了”<br>“他们看到大参道，田间岔道进攻受阻，就发出了传令，我们要保护山脚大门的人们啊”<br>“哎呀，被干掉了，全军覆灭了”<br>小参道是逃跑的僧侣、信徒的入口。官军的监视也比较松懈。那是为了把反对派聚集在少林寺，故意放开的，金山大师漏看了<br>（所谓攻击，就是说已经没有逃走的信徒了）<br>佛法之光渺茫——金山大师注视着被战云包围的嵩山<br>但是，大师还犯了一个“错误”官军根本没想过毁灭少林寺，不过是为了威胁一下，促使其投降，连蔡京都因为反对废佛被罢免了宰相，朝廷的保守势力也很强大<br>（大宋真的抛弃佛法了吗？）<br>大师为自己过高的期望而感到后悔。如果小参道被攻破，不久敌人就会攻到这里。少林寺将会失守，佛法将会灭亡，但是，为了应对这种意外的危机，大师预留了一只队伍——“外化自在天部”。</p><hr><p>由“小鹅岭口”登上的小参道是条细道<br>在干燥的茶色山体上，生长着深绿的松柏。太阳直升，热气开始升起。<br>为了让逃亡过来的僧侣、信徒进入，这条路的防备推迟了。今早，官军用两千士兵封锁了“小鹅岭口”。现在那个支军队排成纵队开始登上道路<br>不久之后，宇文将军会从“西郭店口”带援军赶来。但是，士兵们的脚步是沉重的。他们是从洛阳来的士兵。洛阳在北魏时期就有“城内一千寺”的说法，是佛教的一大圣地<br>“杀光僧侣”命令，对他们的良心来说可是沉重的谴责<br>路，连绵不断，平缓地延续着。<br>从山顶的寺庙里传来清澈的诵经声。山景、寺庙的瓦片、僧侣们庄严的诵经，洛阳军的士兵们动摇了。这是通往极乐世界的十万亿土，还是通往地狱的24万由旬——哪一条路？<br>有人叹了一口气。</p><p>史进和石秀，还有满天星等“俗人”队伍一起下山<br>共计三百五十人。由史进领头，石秀和满天星紧跟在后。路对面有敌军的气息，史进乘着向下的势头袭击官军，跳跃着地，随手当头一棒，打倒了最前面的兵，接着将左右的士兵打倒在地<br>石秀是第二个，满天星紧随其后<br>“都麻利点”<br>“一块云”满天星拔出刀，“张神剑”握着剑，“草上飞”手持戟，史进手中握着一根棒子，“乌鸦嘴”扔过一支枪<br>“接着，帮金山大师一手”<br>是一把上好的精致亮银枪<br>山上梵钟大作<br>“神剑”张霸道，“草上飞”律大谈是一群老江湖。手下训练得很好。常年转战边境，攻击手段也是简单粗暴。<br>“喂，我们不是光头，手下留情啊”<br>“十年老”“王铁子”“黄再生”等也是内行。在江湖中脱颖而出的的男人们，特别擅长游击战。即使是今天第一次见面的人，内行人士也能感觉到对方的实力，在官军进攻之前，就感受到了危险的气息</p><p><img src="/upload/pasted-93.png" alt="upload successful"><br>史进也一味的向前推进，山道上的死伤者层出不穷，“黄再生”已经倒下，“草上飞”已经失掉了手臂<br>满天星全身朱红色，但身上的并不是自己的血，即使是这样，依然浴血奋战，那种战斗方式和清秀的外表成了鲜明的对比<br>官军陆续上前，史进和石秀背靠背作战。站在最前线的两人被敌人团团包围。一场壮烈的战斗，即使队友倒下，也没有救起的余地，碰撞的身体，碰撞的武器，狭窄的战场上满是尸体<br>史进扔掉了折断的枪，用脚捡起掉下的铁枪<br>已经有一半的人手倒下了，被突破只是时间问题<br>“这里我一个人就够了，石秀，带大家离开，从山上袭击侧面”<br>“你想让我？”</p><p><img src="/upload/pasted-94.png" alt="upload successful"><br>石秀砍到面前的敌兵，一手脱下浑身是血的外衣<br>“我已经受了无数的伤，不过后背一处伤也没有”<br>石秀又砍到左右包夹的两个人，一身是血<br>“我从不背对敌人！”<br>战斗过程中，史进不知不觉也上身赤裸，在出汗的背上，九条鲜艳的龙在悦动<br>满天星也靠上前来<br>“也算我一个”<br>太阳格外的刺眼<br>满天星数着史进身上的龙</p><p><img src="/upload/pasted-95.png" alt="upload successful"><br>（果然真的是‘九纹龙’史进吗）<br>前进受阻的官军牺牲也很多，逐步向后退却，与史进等人拉开距离。在此期间，“神剑”张霸道重整了队伍，结了一个显着人多的“影子阵”，持枪的士兵正在接近<br>史进和石秀并排站在道路中央<br>“谁也不准从此经过”<br>在官军的后方，看到了将军旗。宇文将军率领的二千援军到达了。将军在马上叱咤<br>“把这群秃驴清理干净！”<br>本来开始退却的官兵，看见援军到来后气势高涨，再次开始前进<br>“这边的和尚会杀人，千万不要手下留情”<br>就在这时，从斜面的松林里杀将出来两个男人，大声叫到<br>“在这呢，在这呢！”<br>史进一听，连忙打招呼<br>“陈达，杨春！”<br>登上这条不是路的路前来救援的，正是少华山上结交的兄弟</p><p><img src="/upload/pasted-96.png" alt="upload successful"><br>“跳涧虎”陈达。梁山泊席次第七十二位。正如“跳过山谷的虎”的称呼一样，他是一位善用点钢枪，以非凡脚力而闻名的豪杰</p><p><img src="/upload/pasted-97.png" alt="upload successful"><br>“白花蛇”杨春。梁山泊席次第七十三位。被冠以剧毒蛇之名的身着青白的男子<br>两人率领着少华山的手下。“打虎将”李忠也一同赶到<br>陈达他们挥舞着长枪，给了官兵一场血祭，与和尚“不破杀生戒”形成鲜明对比。官兵们被突然的袭击吓懵了<br>“敌人的援军到了”<br>树林哗啦哗啦的作响，也不知里面隐藏着多少敌军，官军顿时乱了阵脚，以宇文将军带头开始向山脚下逃跑<br>史进杀了上去<br>破竹之势般击倒前后左右的官军，在山路上飞奔着，无人可挡，绝望的宇文将军回头望去，对逼近的男人发出了悲鸣<br>“要慈悲啊”<br>“阿弥陀佛”<br>史进的枪轰鸣着，贯穿了宇文将军的胸膛</p><hr><p>那天早上，梁山泊的军师“智多星”吴用也很忙碌<br>吴用的书房虽然离聚义厅较远，但几乎整天都待在聚义厅旁边的侧屋。不断有传令和领命的人进进出出，来自全国各地的“店”“鸡狗”收集的情报，首先要回报到吴用这里<br>一段时间后，宋江到来。弟弟“铁扇子”宋清搬着午餐的餐桌。吴用这才注意到已到正午<br>“已经到了吃饭的时间了吗”<br>吴用把椅子移到宋江旁边。阳光透过半开的窗户直射到桌子上<br>“是啊，吴学究”<br>宋江坐在椅子上，目不转睛的看着桌子上堆积的报告密信之类的东西。在堆叠的信函中，有鲁智深王定六的报告，也有关于史进的报告。分析重建这些信息，“智多星”吴用正在头脑中描绘事情的发展方向<br>宋江担心的问道<br>“战斗已经打响了吗”<br>吴用最初预测“法难”将与官军和僧侣展开战斗。所有的情报都一致认为抵抗中心是少林寺。<br>“是啊，发出的援军也因该到了吧”<br>发出有偿救援少林寺信息的，也是吴用<br>即使想动用梁山泊本部的军队，山东和河南之间也有距离，况且还有诸多官军势力和如“田虎”的山贼势力<br>“赏金”则是为了解围发出的奇谋<br>“在石勇的人脉中悄悄放出消息，这些赏金猎人要是知道被骗了大概会很生气吧”<br>“无妨，赏钱我们来出”<br>宋江笑着看着吴用写着，好像在计划什么东西<br>“这是什么”<br>“中秋节的准备，中秋节是晁天王的忌日……今年正好三周年，打算盛大举行一下，我正想和公明哥哥商量一下，可以招些僧侣举行法事或者举行什么其他的活动……”<br>“热闹一些吧，大办一场赏月宴席，晁天王可是受不了寂静啊”<br>宋江犹如感到晁盖还活着一般<br>吴用点点头，用勺子舀了一些碗里的清汤，清澈的汤汁中，柔软的肉片轻轻漂浮着<br>正要品尝时，又有传令上前<br>“‘鼓上蚤’的报告”<br>吴用看了看报告<br>“慕容贵妃有动静？”<br>听到那个名字，宋江的脸色阴沉下来<br>“还没有死吗？”<br>“好像还活着，大概‘风流天子’又动了风流心，无法降罪这女人吧，还有，林灵素原本就是慕容贵妃提拔出来的人……”<br>“这又是什么意思，慕容贵妃，是想重返后宫？”<br>“她有暗杀皇后，青州谋反的罪名，朝中又有王皇后的哥哥王都尉和王皇后亲生的皇太子坐镇，她回不去”<br>“那她到底想干什么”<br>吴用轻轻挥着羽扇，午饭的碗又被他忘在脑后</p><hr><p>梵钟缓缓的敲了三声<br>僧兵们护着伤员回到寺庙，少林寺的山门再次被紧紧地关闭了。<br>群龙无首的官军已经退到山脚<br>“好久不见，陈达，杨春还有李忠师父”<br>在治疗伤员，煮饭一片匆忙的院内，史进环视着这些怀念的脸<br>“即使是摆着这幅臭脸，一段时间看不见也挺想念的”<br>“太没礼貌了”<br>陈达用拳头擦了擦脸上的血<br>他们受吴军师的命令下山前来支援，途中还和王定六碰了头，又遇上了李忠<br>到达时，参道已经被官军封锁，好在嵩山宽广，总有通路<br>“就这么一百人，果然是能让人放心的‘援军’啊”<br>“不要这么说”<br>陈达搔了搔头<br>“藏在官军里，偷偷行动，就得人少”<br>本来就是意料之外的援军，不管一百还是二百，史进都没有什么不满的<br>“有这些和尚在，我就放心了。李忠师父，鲁智深怎么了”<br>“马上就到了”<br>李忠仰望着佛塔<br>“会带来‘援军’的，他来之前这么说”</p><p>院内开始响起了诵经声<br>僧侣方面死者很多。参道上还有遗体。为了敌我双方，全部的死者，幸存下来的僧尼们一个又一个加入了念经，声音变得响彻嵩山。<br>莫志匆匆赶到史进身边<br>“你总是这么着急”<br>“史进大哥不好了，‘王无伤’……”<br>“怎么了！”<br>“听说倒下了，遗体在那边”<br>一听莫志这么说，史进飞快的赶了<br>在院内收集遗体的地方，有一角聚集着一群赤衣僧人<br>“最后打倒了三十六个敌人……可惜了，已经遁入修罗道了”<br>“超度吧”<br>史进挤进了这些和尚当中<br>“让开”</p><p><img src="/upload/pasted-98.png" alt="upload successful"><br>史进拿下了遗体上的席子。身材好像王进，脸上布满血污，眼睛闭着，好像睡着了一般<br>史进擦拭了血迹，发现整个脸上都有伤，好像是烧伤，脸已经毁了一半<br>石秀也追了过来<br>“——史进，怎么样”<br>史进拉着王无伤的右手。是个武者的手，一双非常结实的大手<br>“不是，不是我师父”<br>史进站了起来<br>“确定吗？”<br>“啊，我不会弄错的”<br>史进又用席子盖上尸体，然后想到了王无伤——已经逝去的高手——一生的事，这个男人也有父母，也有师父，大概也有几个弟子吧<br>但是，没有一个人知道他现在在这里断气了。</p><p>梵净山的护国禅僧们回到了竹林，又开始了坐禅<br>诵经还在继续，钟楼主营的周围笼罩着阴郁的气息，广场上，金山大师收到了天穷和尚、彭尼、本觉上人的报告。<br>僧兵和雇佣兵都失去了近半数。官军撤退到山脚，继续封锁参道口。<br>满身是血的僧兵，不耐烦的把视线从那些满身杀伐之气的雇佣兵身上移开<br>“竟然杀了那么多人——会下地狱的”<br>一旁的雇佣兵也在吵闹着<br>所有的报告都已经结束，金山大师依然沉默着<br>好像在问自己<br>官军暂且撤退了吧<br>但是，总会再次攻上来的<br>林灵素废除佛教，统一宗教，想要通过支配佛教取得绝对的权威。辽国让僧侣和官军作战，打算使宋国陷入混乱暗中阴谋着。<br>（护法与护国──实现两件事，这可能吗？）<br>在金山大师的周围，没有人靠上前去<br>在寂静中，金山大师双手合十<br>“无念寂静——不战不从”【非暴力不合作思想在亚洲的第一次体现，早了印度的圣雄甘地几百年，早了南非的纳尔逊曼德拉几百年（误）】<br>放弃执念，不再战斗，也不遵从废佛。金山大师就那样下了决断。<br>“我们把少林寺作为护法的最后一盏明灯，成为全国的佛教信徒的希望。坚守城池，坚守山峦，决不允许官军进入。然后慢慢等待法难消亡”<br>暮色逼近，山脚下官军的篝火熊熊燃烧<br>僧侣们仍然不安<br>“废佛是敕令……若是不遵循就是逆贼……”<br>金山大师揉捻着念珠<br>一道清净妙莲不染——一切皆为佛之御心<br>【金山大师：其实我是有剧本的】</p><p>下一章【第四章 地狱罗汉】预告<br><img src="/upload/pasted-79.png" alt="upload successful"><br>“无念寂静——不战不从”<br>金山大师终于做出了痛苦的决断。<br>作为辽国的爪牙暗中活动的“罗刹女”慕容嫣辉。<br>以及”通真达灵元妙先生”林灵素，来临少林寺！<br>是投降，还是殉教——风雨飘摇的少林寺。<br>利用奸计阴招企图废佛，帷幕之后的<br>“少林寺，谋反！”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第三章-少林战云&quot;&gt;&lt;a href=&quot;#第三章-少林战云&quot; class=&quot;headerlink&quot; title=&quot;第三章 少林战云&quot;&gt;&lt;/a&gt;第三章 少林战云&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;font color=&quot;#FF0000&quot;&gt;原文作者 森下翠和插画作者 正子公也 
      
    
    </summary>
    
      <category term="绘卷水浒传" scheme="https://www.junglezero.top/categories/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0/"/>
    
    
      <category term="绘卷水浒传 二十周年番外" scheme="https://www.junglezero.top/tags/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0-%E4%BA%8C%E5%8D%81%E5%91%A8%E5%B9%B4%E7%95%AA%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>绘卷水浒传 20周年企划 第二章 翻译</title>
    <link href="https://www.junglezero.top/2019/03/04/%E6%B0%B4%E6%B5%92%E8%BD%AC-20%E5%91%A8%E5%B9%B4%E4%BC%81%E5%88%92-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BF%BB%E8%AF%91/"/>
    <id>https://www.junglezero.top/2019/03/04/水浒转-20周年企划-第二章-翻译/</id>
    <published>2019-03-04T15:37:00.000Z</published>
    <updated>2019-03-19T01:02:43.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-宣和法难"><a href="#第二章-宣和法难" class="headerlink" title="第二章 宣和法难"></a>第二章 宣和法难</h1><hr><p><font color="#FF0000">原文作者 森下翠和插画作者 正子公也 版权所有<br><br>个人翻译<br><br>仅供个人娱乐及同好者欣赏<br></font><br><br><br><a href="http://suikoden.com/" target="_blank" rel="noopener">原文地址</a></p><hr><p>绘卷水浒传二十周年纪念企划 第二章 宣和法难<br>马车逃走了<br>（看来这赏金也没指望了）<br>事情变得复杂了——史进这么想着。少女还在一边生气<br>“好不容易才追上，现在倒好又让她们跑掉了”<br>“真是对不起”<br>史进摘下围巾·，遮住那大个子“劫匪”的胸口。大个子也摘下面罩，史进一看，是那个在小酒肆里碰上的尼姑<br>“大小姐，咱们稍做休息吧”<br>“我一想就是你，真的是有些本事啊”<br>尼姑把葫芦递给少女，少女咕噜咕噜喝了起来<br><img src="/upload/pasted-51.png" alt="upload successful"><br>“这酒，应当是杀了那家伙，为母亲报仇的庆功酒”<br>“姑娘好酒量”<br>史进笑了<br>“可是你这能耐还差得远呢”<br>“这话我就不爱听了，你觉得我练了几年？我可是练了十年了”<br>“大小姐，他可没看出来”<br>少女本想再对史进说些什么，却发现了那只在她脚边摇着尾巴的太白，“啊”的叫出声来，跑到了一边，薛永慌忙上前，按住太白的脖子<br>“没事没事，它不咬人”<br>“这就是‘狗’吗”<br>（好奇怪的姑娘）<br>虽然这姑娘看着也不小了，但还是一副没见过世面的样子<br>（这“仇”怕是非同一般）<br>史进端详着手中的小剑。这剑和宋产的剑样式有些不同，上面镶嵌了纤细的金属<br>（看来是异国的东西啊）<br>情况发展成这样了，也就没什么可说的的了，但是，如果真的是个“大小姐”，那她应该不差钱吧<br>史进于是开始和她们“商谈”<br>“敢问姑娘芳名，为何要袭击那马车”<br>“这都是‘秘密’，怎么让陌生人知道”<br>“我叫史进，那家伙叫薛永，我们是……”<br>薛永赶忙拦下史进，但是史进还在说着<br>“我们都是云游的武人，正奔洛阳，寻些差事”<br>比起他们的真实身份，少女更在意的是薛永的狗<br>“这位叫太白，你可以摸摸它”<br>“这狗怎么这么大”<br>“那是因为……”<br>少女战战兢兢地伸出手，轻轻地摸了摸太白的脖子。<br>在这期间，史进在跟尼姑搭话。<br>“看你们这个’秘密’，我们可以帮你们，你且说来听听。”<br>少女刚要开口，尼姑扫了一眼史进，拦下了少女<br>“大小姐，咱们不能轻信他”<br>“没关系，狗是不会跟坏人亲近的【小剥皮：终于有人说我不是坏人了】，我叫银树，她是彭尼，我们在追坏人”<br>“敢问贵姓？”<br>“免贵姓王”<br>“王银树，真是个豪气的名字啊，说说你们那‘秘密’吧”<br>“跟你说真的有用？”<br>“交给我们就好，你已经领教了我的本事了，我们都是‘行家’”<br>“什么的行家”<br>“报仇”<br>银树翘起嘴唇，盯着这两个人<br>“行，那马车上有我母亲的仇敌，是我父亲的一个妾室，非常坏的一个女人。她毒杀了我母亲，又觉得我碍事，把我赶进了尼姑庵。被你们放跑的，就是这么个恶人”<br>“卧槽，还真是一个天大的‘秘密’，那个妾也被赶出家门了？”<br>“对了，刚才你说要钱，你想要多少，你们在这干什么，那么需要钱”<br>银树刚一说完，彭尼似乎也有些想法<br>“小姐是在尼姑庵长大的，对于世事不太了解，失礼之处，还望包涵，我们的复仇，得由我们两个完成”<br>“你说你个尼姑家，好像多懂这世道似的”<br>彭尼没吭气，她把围巾还给史进，那双手上，史进看出了她可是没少修炼，彭尼用剑绳把撕破的一幅绑在身上，催促银树上路<br>“我们赶紧追过去吧”<br>“等等，等等”<br>史进握住彭尼的手<br>“我们并不是唯利是图的人，看中的人，我们也会竭命帮助的”<br>银树插到两人之间<br>“此话当真？”<br>“好汉一口吐沫一个钉”<br>“‘好汉’又是什么”<br><img src="/upload/pasted-52.png" alt="upload successful"><br>“就是不说谎的男人”<br>“真的会帮我吗？”<br>“那是当然”<br>银树扑哧一下笑了<br>“彭尼，我太高兴了，咱这不就有了两个免费的保镖？”<br>“啥？”<br>“其实，我们也是身无分文，那么，我们赶紧追马车去吧”<br>银树领着头，高高兴兴的走在这荒路上<br>“一定得把那女人的皮扒了”</p><p>从梁山泊出走的，并不是只有史进<br>史进的去向很快就知道了，但是当天鲁智深也出走了，梁山泊的情报网，也不知道他去了哪里<br>大宋幅员辽阔，若不住店，就没有信息，不好找的到。但是军师吴用并不担心鲁智深。<br>鲁智深长时间东奔西走，当过提辖，当过乞丐，也是个僧人，人脉很广，他所帮助的，也多是不见光的人<br>即便如此——吴用还是受宋江之托寻找智深<br>“神行太保”戴宗，没打听到鲁智深去哪了，但是通报了一个意外的消息<br>“梁山泊外面出了大事了，法难，法难啊”【法难：佛教史上对三武一宗之厄的说法，由于这故事是编的，所以法难指代的是大规模的排斥打压佛教】<br><img src="/upload/pasted-53.png" alt="upload successful"><br>聚义厅里，除了吴用之外，还有副头领“玉麒麟”卢俊义，“神机军师”朱武等梁山泊的领导参谋高层<br>戴宗将所掌握的情报详细叙述<br>“当今圣上是‘道教狂’是众所周知的，但是现在竟然狂热到要取缔佛教，将其融入道教。要把释迦牟尼改叫大觉真仙，其他的佛叫做仙人，大士之类的，要把僧侣改称德士，行童改叫德童，尼姑改叫女德，有要求他们重蓄头发，穿上道服，寺院也要改为道观”<br>东京开始了“废佛”风潮，吴用已经知道了，但是历史悠久信徒众多的佛教突然要被废除，全部纳入道教也是毫无道理的事<br>“大臣中就有很多佛教徒，这样实现起来应该很困难吧”<br>“可是……”<br>戴宗，也算是这些“道士”的一员<br>“进来，在禁城内，后宫失火，有几个宫女被烧死，后来宋贵妃，王贵妃相继死去，灾厄接连不断。于是那‘通真达灵元妙先生’ 林灵素就召集八百弟子，举行召唤天神的玉清神宵秘法，说是要把那个著名神仙吕洞宾引至凡间，他说这么多国难发生都是因为对道教的信仰不足——好像那天上神仙下了什么神谕一样，说废佛是为了护国，天子深信不疑”<br>“智多星”吴用轻摇羽扇<br>“这道教，就是那四奸送给皇帝的‘玩具’罢了，为的就是让皇帝不问政事，蔡京童贯等人利用林灵素，‘天子朝臣都会重生为仙，这国难不过是天上神仙给予的考验，所以没必要担心’——来说服皇帝。这个‘废佛’之举，大概是林灵素想掌握更大的权利吧，那个林灵素，可真是个胆大包天的人啊”<br>吴用好像又想到什么，说道<br>“或者……有人在幕后操纵。戴院长买有别的消息吗？”<br>“为了阻止废佛，僧侣的代表要在东京和道士斗法”<br>听见了“斗法”，宋江问道<br>“戴院长，你方才说斗法，道士这边肯定是林灵素了，僧侣那边是谁？”<br>“是五台山文殊院的主持方丈，鲁智深的恩师智真长老”<br>在智深还叫鲁达的时候，因为大义杀了人，成了逃犯，一来二去，就到五台山出家了。据说，只有智真长老看中这个粗鲁暴躁爱惹事的“花和尚”，说他日后能成正果<br>“原来如此，现在我明白了。”<br>鲁智深可不是为了喝酒突然跑出去了<br>“这和尚，定是去了东京开封府”<br>“东京开封？！”、<br>这是大宋的都城所在，戴宗仰天长叹<br>“这家伙……怕是要惹出大事”</p><hr><p>大宋都城，东京开封<br>在极其繁华的城内，有一座不相匹配的寂静的寺院，在破败的院子里，排列着几个简陋的窝棚，成了跳蚤，老鼠，野猫乞丐的乐园<br>今天早上，这里聚集了很多乞丐，在他们当中，站着“花和尚”鲁智深<br>鲁智深用倒塌的灯笼代替代替茶几，睥睨着包围着的乞丐。乞丐目光如狸，旁若无事，鲁智深把酒倒在手里的破茶碗里<br>鲁智深咕嘟咕嘟地把酒干了，鲁智深是真的爱喝酒，没事总是喝两杯，现在可不是，他是心急如焚，借酒浇愁<br>虽然还是清晨，但是阳光很强烈，今年有旱灾——乞丐们在靠着背阴处歇着<br>不一会，可算是有消息了，一个瘦弱的乞丐跑过来<br>“已经准备好了，就等师傅了”<br>鲁智深扔下茶碗站了起来。<br>随之，周围的乞丐也纷纷散开。<br>鲁智深独自走出歪斜的寺门。那是离城墙很近的下町，是清寂的贫民街。鲁智深大摇大摆地走过了孩子们玩耍的街道。<br>离开梁山泊的鲁智深潜入了东京城内。他暗中是“东京丐帮”的帮主，所谓“丐帮”，就是城内数千乞丐们的帮会，据说他们一面乞讨，一面在城中的各个地方打听情报，从高官的秘密到邻居晚饭吃什么，他们无所不知，鲁智深被赶出相国寺，成为乞讨和尚时，意外的被奉为东京丐帮的帮主<br>乞丐们知道智真长老是鲁智深的恩师<br>听了他们的回报后，鲁智深就来到东京</p><p>在城里，对佛教的迫害已经开始了，东京的僧侣原先是比一般的平民生活的更好，借此机会，民众纷纷进入寺院，抢夺钱财，破坏神像，殴打僧侣，发泄他们的愤怒【似曾相识，过于真实】，很多和尚为了避难，立刻把寺庙的名字改为“观”，纷纷换上道服<br>鲁智深很看不上<br>（这群怂包秃驴们）<br>鲁智深走在大道上，有巡逻的士兵注意到了他<br>“现在上面要求，乞丐，和尚都得去当打扮成道士”<br>“什么玩意？”<br>“你得蓄发，戴帽子，扔掉袈裟念珠，穿上道服”<br>再看这个士兵，身上早已点着太极八卦，神仙护符。如今，这可是投机的快捷方式，迫害和尚也是一条途径<br>鲁智深也没鸟他，就迈开脚步<br>“现在还在蓄发吗？”<br>“谁敢违抗”<br>“不是僧人输了才开始施行吗？”<br>“还用看吗，肯定要输啊”<br>“你在说什么鸟话”<br>有个男人迅速在背后按住要动手打人的鲁智深<br>“大哥，你怎么还这身打扮，现在装道士能多得到些啊”<br>回头一看，那是掌管梁山泊打探消息的酒肆的“活闪婆”王定六。王定六咯吱咯吱的挠着瘦了吧唧的侧腹，士兵们害怕跳蚤传染，走了几步<br>“我道是个乞讨的和尚，原来只是个乞丐”<br>士兵们扔下这句话后就走了，鲁智深默不作声的继续走着。王定六和鲁智深是老交情，很清楚他在想什么<br>“我也不问为什么了，正如你所知，几位哥哥担心你，这才把我送下山来，害得我跑了好久”<br><img src="/upload/pasted-54.png" alt="upload successful"><br>活闪婆王定六——梁山泊第一百零四位好汉，被誉为“会奔跑的稻草人”的王定六，是梁山泊引以为豪的打探消息的头目，拥有两种特技：奔跑和扒窃。曾经在五台山河畔，救起倒下的“哥哥”，就是后来的鲁智深【另一条世界线】，五台山，也是王定六忘不了的地方<br>王定六默默的跟在鲁智深后面<br>人群也向那边去了<br>“道士和僧侣的斗法”不久将会在宫城门前的广场上开始</p><p>五台山的智真长老是鲁智深的师父<br>他耐心的教导性情暴躁的鲁智深，教他礼法，教他识字，教他经文<br>“因为打碎山门前的仁王，被赶出寺的时候，也就师父一个人来送我”<br>就如黑夜中打着的小灯笼一般，照亮了鲁智深前进的方向<br>夹杂在人群中的导师很是得意<br>“那和尚能翻起什么浪来，输是肯定的了”<br>人们在不安的窃窃私语着<br>“输了就危险了，……长老不会不来了吧”<br>但是，鲁智深坚信长老一定会来<br>果不其然，远远的看见在人海里有一个小个的老和尚<br>身上穿着身灰衣，外罩意见朴素的袈裟，光着脚踩在草鞋上，缓慢的在人群中走着，除了他脚下的影子，没人跟随他<br>鲁智深凝视着长老的身影。<br>广场中央，林灵素已经带着一百个道士在此等候了，斗法内容为求雨。近来天气干旱，人们一直盼着一场雨<br>在斗法开始时，有一场隆重的仪式，不过，长老像是一直木鸡一样站着一动不动<br>皇帝带着宠幸的刘贵妃在背后的楼阁上看着他们<br>被任命主持斗法的宦官杨森告诉长老<br>“那么，请智真长老先做法，在大线香烧尽之前，求一场雨”<br>广场中间放着一个空鼎<br>“如果佛法灵验的话，雨水就会装满这鼎……开始做法吧”<br>数千只眼睛，在烈日下，注视着老僧<br>智真长老静静的在石阶上坐禅<br>从怀里，拿出了一串和瘦弱的身体不相匹配的粗壮的念珠，长老第一次开口了<br>“文殊菩萨菩提之心，不舍众生”<br>那是一句低沉，严肃充满慈爱的话<br>然后，长老开始念经了<br><img src="/upload/pasted-55.png" alt="upload successful"><br>剑即智慧，莲华即觉悟<br>真理亘古不变<br>这是五台山本尊文殊菩萨的经文【我尝试找了，找不到】，文殊菩萨凭借智慧，引导人们向悟道前进<br>附：文殊菩萨铜像：右手持剑，左手持？莲华，<br>智慧的象征<br><img src="/upload/pasted-56.png" alt="upload successful"></p><p>如风一样，抑或说如波浪一般的诵经声，在广场流淌，那是抚慰人心，净化灵魂的声音。<br>然而不久，就出现了异变<br>许多人站在广场的石阶上，突然那边地面坍塌，人们掉进下面的洞里去了，喊着救命。智真长老依旧端坐着继续诵经。想要逃跑的人们，有发现了别的异端，又惊吓的叫起来<br>“看那边，流血了”<br>皇帝坐镇的楼阁门前，装饰着青华帝君，圣祖赵玄朗等众神的巨大铜像。那一双双眼睛，突然滴滴答答的流起血来。又不知哪里传来了毛骨悚然的恸哭声，甚至盖过了诵经的声音。<br>发生了接二连三的不详现象，人们也不说话，纷纷奔逃。楼阁上的皇帝也龙颜不悦，打算要走<br>就在那时<br>叮铃叮铃，响起了轻快的铃铛声<br><img src="/upload/pasted-57.png" alt="upload successful"><br>林灵素骑着蓝色的神牛出现在广场中央，然后开始庄严的念着什么咒语，坍塌的地板，流血，奇异的哭声这些怪异事件全部平息了<br>“看那边”<br>人们指着天空，欢呼起来，几十只仙鹤在楼阁上空飞舞，而且，本来空着的大鼎，也滚滚的涌出水来<br>“奇迹，奇迹发生了”<br>杨森立刻代表皇帝宣布，林灵素获胜，宣告着道教的胜利<br>“道教自即日起作为我大宋的国教，废除佛教，取缔僧侣”<br>“这他娘的是假的”<br>鲁智深咆哮着，接着在场的僧侣，佛教信徒，乞丐们也开始骚动<br>“肯定有什么装置，应该打碎神像，调查那个鼎”<br>“这个鹤应该是训练过的”<br>人们纷纷涌到神像前，暴动起来<br>突然天空乌云密布，雷声轰鸣，暴雨骤作，倾倒在广场的石阶上，道教派的也喊了起来<br><img src="/upload/pasted-58.png" alt="upload successful"><br>“下雨了，奇迹出现了！！”<br>林灵素向天空张开双手，胜利般的高声叫喊着<br>“智真乃祸国殃民之妖人，左右与我拿下，关入监牢”</p><p>鲁智深行动起来了，他比那些要抓捕智真长老的士兵行动更为迅速，乞丐们也在跟着行动。智真长老犹如木像一样一动不动，突然站起身来<br>为了阻止想要跑过来的鲁智深，智真长老一手举在胸前。鲁智深自然停住了脚步，虽然相隔很远，但是脚却像被压住了一样动不了<br>“师父为何要阻止我”<br>鲁智深正要发问时，智真长老的念珠突然破碎，一百零八颗珠子四处飞散<br>在飞散的念珠雨中，长老注视着鲁智深，大喊一声<br><img src="/upload/pasted-59.png" alt="upload successful"><br>“问金山！”<br>矮小的身姿，看上去却像冲天的巨人<br>【正子老师这张插画角度真的帅到啊】<br>在鲁智深脚下，滚过一颗念珠<br>当鲁智深弯腰拾珠子时，智真长老被抓走了。王定六和众乞丐围着鲁智深<br>雨过天晴，观众也一哄而散<br>王定六看着林灵素被弟子们包围着回到宫城内。头上裹着破布的道士牵着青牛的缰绳<br><img src="/upload/pasted-60.png" alt="upload successful"><br>在身穿华服的道士们中，其身姿格外地显眼<br>（还真是有穷道士）<br>王定六目光转向鲁智深，鲁智深正在凝视手中的珠子<br>“大哥，你怎么没帮长老啊”<br>王定六无意中窥视了鲁智深的手掌<br>“哦，这是达摩祖师”<br>珠子上刻着异样的苦行者。<br>达摩大师，就是在河南的少林寺坐禅的异国伟人<br>鲁智深用紧握珠子的手，远远地向被带走的智真长老行礼，背对着仍然燥热的广场<br>“大哥，去哪？”<br>鲁智深用响彻心扉的声音回答了王定六<br>“西方净土”</p><hr><p>大宋越向西越干燥，大地越荒凉。虽说拥有长安、洛阳等古都，历史文化丰富，但黄土扩散，有时连天空都是黄色的。<br>河南、陕西——佛教最初从西方传入的地区，也是在这个地区开枝散叶。<br>洛阳有佛教传来的白马寺，有龙门的大石窟，有达摩大师开禅宗的少林寺。长安有玄奘从天竺带回的教典，大慈音寺、收纳指舍利的法门寺等佛教圣地。<br>然而在那圣域，法难早就开始了。<br>寺院被强制改成道观，僧侣和尼姑成为道士，道婆，被强制还俗。可是，在这一带抵抗根深蒂固，以命抵抗高僧也不少。朝廷试图用武力压制。<br>下午。天空中出现了一点云，但没有下雨的气息，很热。<br>沿街的旅馆前，立着写有废佛命令的高牌子，风吹拂着沙尘。而那命令被年轻的僧侣撕毁，消失在沙尘中<br>客栈二楼的小窗户上，站着一个年轻的侍女。她虽然长得很漂亮，但举止一丝不苟。用略微眯缝的双眼，看着碎裂的命令随风飘散开来。<br>“猫儿”<br>侍女的视线又转回房间。这是个鲜为人知的客栈，也是这个客栈最高级的房间。一角设有木制浴缸，一个美女在热气中休息。<br>“那个暴徒，你知道他的真实身份了吗?我觉得是女人，但不是宋国刺客吧?”<br>“我也已经注意过了，之后就再也没有出现了。如果是女人的话，或许是峨眉山的幸存者。或者是对您有什么怨恨的人….您有什么线索吗?”<br>“猫儿啊!你服侍我多少年了。恨着我的女人，比流星的数量还多。你还记得那些消失的星尘吗?”<br><img src="/upload/pasted-61.png" alt="upload successful"><br>在热气腾腾中，美女浮现出凄惨的笑容。水里浮着鲜红的花瓣，颜色像血一样鲜艳。<br>“这边好多灰尘啊。真想早点回京城。”<br>“很快了，只要完成这个‘任务’就好了。”<br>“是啊，哎呀，那声音。”<br>在这个客栈，一楼是食堂。从那一边传来了铃的声音和一些说话声。猫儿马上去看了。<br>“算命的来了，说要给您算命。”<br>“唤她过来。”<br>“太太，请您小心。”<br>“嗯嗯”<br>猫儿立刻带着一个老婆婆进了房间。老婆婆穿着打扮像个乞丐，但眼神非常锐利。美女依旧泡在池子里，命令老婆婆上前。<br>“怎么样?你看我这命运如何?”<br>“哇……好高贵的面相。”<br>老婆婆瞪大了眼睛。然后，又传来一种听不懂的喃喃自语。美女委婉地笑着。老婆婆继续说。<br>“你是女人，同时也是位极人臣的女人。但是请您注意。夺取你生命的是——年纪轻轻、年纪轻轻的高贵少女。”<br>“给她奖赏，猫儿。”<br>老婆婆的跪了下来，伸出手。突然有把短刀刺穿她的胸腔。她倒下后身穿青衣的侍女们出现，用布包着老婆婆离去，擦拭她的血迹。<br>美女又躺在浴缸里，闭上了眼睛。<br>“位极人臣的女人……”<br>令人毛骨悚然的笑声震动了荒野上的月亮。正要在盆中填热水的猫儿，看到水面上移动的影子，立刻把短刀掷向了天花板。短刀刺进房梁，发出吱的声音和逃跑的脚步声。<br>“老鼠?”<br>美女用扫兴的脸从浴池里出来，让侍女们擦去身体。<br>“明天早上早些出发了。这种穷困的旅店，不能再待了。</p><hr><p>西京河南——洛阳郊外。<br>这个客栈离河南府还有一天的行程。在那座桥的旁边，一组艺人正在表演耍棒子。因为是很热闹的客栈，所以杂耍艺人并不稀奇。来往的客人们也都见过些市面，也并没有兴趣一直观看。但是今天不同平常，围上去了二三十人<br>“这家伙真漂亮”<br>练过武的男人们默默的赞叹着，而酒楼上的那些女子，则准备好了钱。<br><img src="/upload/pasted-62.png" alt="upload successful"><br>史进脱掉上衣，露出令人目眩的九条龙。仅仅这样，就有好几个人驻足观看。史进手拿棒子，飞跃，舞步，接二连三的展示华丽的技艺。他发出气沉丹田的叫喊，技术扎实，也就不会耍些花拳绣腿。另外一个就是薛永。他表现的事纤细的技巧。他用尽全身力气，像风车一样快速转动着木棒。单脚站立，扫向四面八法，用棍子支撑身体倒立着。<br>男人们发出喝彩，女人们发出娇声。<br>“珠珠姐您喜欢哪个?我是一个刺青的人。”<br>“多福喜欢养不良少年!我喜欢带狗的人。”<br>一阵华丽的技术后，史进一下子向后退去了。随后出场的是薛永和太白。<br>“我这祖传膏药，贴哪治哪……”<br>在史进擦汗时，薛永兴高采烈的回来了。薛永总是带些祖传膏药上路，那些膏药几乎都卖光了。在太白所叼的笊篱中，有相当一部分钱。史进用双手把赚头一捞。<br>“好，去买饭吧。这附近的河鱼有土味，还是得吃肉，吃肉。”<br>两人走进卖羊的商店，买了肉、烤饼和酱菜等。史进买了当地的浊酒，薛永又加了点心。于是，两人又回到了郊外的“藏身处”。<br>“都等得不耐烦了!”<br>在无人居住的古庙里，银树一个人出来迎接。<br>“哇，买了这么多”<br>银树接过薛永的篮子，抱着坐在了地上。<br>“这个是粽子，这个是……”<br>取出食物后，银树开始用手抓着吃。史进提起篮子。<br>“等一下彭尼，你不能吃独食，没礼貌。”<br>银树转过脸去，哼了一声。然后她坐在薛永旁边小声说。<br>“对不起啊，但是我真的饿了”<br>彭尼正在去找去往洛阳方向的马车行踪<br>彭尼去找洛阳方面马车的行踪。<br>银树抱着膝盖坐了下来，叹了口气。薛永从怀中拿出一个糕点包。<br>“吃这个吧。”<br>“可以吗?”<br>“这是为你买的，还热着呢。”<br><img src="/upload/pasted-63.png" alt="upload successful"><br>银树脸颊一亮，打开小包，嘴里塞满了点心。<br>“薛永，这是什么?”<br>“油炸肉丸子。”<br>“第一次吃这么好吃的东西。”<br>薛永把落在地上的树枝削成筷子，交给银树。有千金小姐气质的银树，坐在满是灰尘的地板上，却没见过用手抓着吃东西。<br>薛永原来也是良家子弟，他有过沦为卖艺人的经历。如果在江州没有见到宋江，不知现在会是什么样子。<br>(虽然很逞强，但是一定很辛苦吧)<br>在银树旁边，太白正巧地坐着摆着前足。这时，银树把点心切成两半，放在太白前面。<br>“最后一个，给你一半吧。”<br>史进对银树说。<br>“如果有从‘大小姐的娘家’来援助的话，那样的点心都能吃到饱。不能拜托的你的父亲，给你出钱复仇吗?”<br>“我已经有十年没见过父亲了，他怕是已经把我忘了。”<br>“怎么可能?”<br>薛永安慰了银树。<br>“没有父母会忘记自己的孩子。家在哪里?我送你回去吧。”<br>“我不能说。”<br>银树紧抿着嘴。<br>“你这么说真是让我震惊。像我父亲这样的人根本就不可靠。如果他知道我在这里，就会把我送到尼姑庵，除此之外别无任何好处。”<br>这时候，彭尼终于快步赶到。史进没有放过彭尼微妙的表情。<br>“怎么了?找到了吗?”<br>“那个女人在洛阳附近的寺庙里到处寻找。虽然追赶了这样的马车，但从缝隙中一看，里面没有人。”<br>“这大概是诱饵啊，太鸡贼了。不过，所谓在寺庙四处寻找，她是打算藏在尼姑庵吗?那个女人，虽说没什么证据，模模糊糊的?但她应该是杀人犯吧?”<br>彭尼、银树都没有回答史进的问题。史进和薛永意识到，两人还隐藏着“秘密”。<br>“算了，算了照这样子，还得花一些时间。薛永，大小姐就交给你照顾；额。”<br>史进开始收拾自己的行李。银树惊讶地问。<br>“你要去哪里?”<br>“我去少林寺找我的师父。”<br>“你不是说要帮助我们报仇吗?”<br>“一找到师父，我就回来。路上，我会帮你寻找仇人的下落。”<br>史进抓起木棒，走出祠堂。</p><hr><p>“真的已经走了!”<br>银树盯着半开的门，看了一会儿史进是否会回来。但随着脚步声越来越远，只是风摇动着门而已。<br>银树叹了口气，回头看着薛永。<br>“薛永也要走吗?”<br>“我……”<br>薛永突然把棒子扔向门。他感觉到门外头有窥视的气息。棒子“嗖”的一声，穿过快要腐朽的门。外面藏着的人影转过身去，避开棍子，迅速地飞上房檐。<br>薛永一下子把银树挡在背后，彭尼也跑了出去。彭尼敲碎房檐，瓦片哗啦哗啦地掉下来。薛薛永对着与瓦片一起落下的小小的人影，挥舞着棒子<br>发出了悲鸣。<br>“别这样。哎呀，好可怕!”<br>“——时迁。”<br><img src="/upload/pasted-64.png" alt="upload successful"><br>“鼓上蚤”时迁——在墙头飞奔着，也就是神出鬼没的“跳蚤”。他排名一百零七位，若说暗中行动的能力，他是能跻身大宋前五的。他也是受宋江之命，追赶史进<br>“咦，史进呢，什么，搞错了吗？”<br>银树不可思议地看着这个留着胡须的小个男人的脸<br>“像老鼠”<br>“真是个不会说话的小姐啊，哎呀，我都没舍得跟同伴打招呼，就一直追在那女人后面，虽然她用了诱饵，但也是骗不了我的”<br>聪明的彭尼似乎已经知道是什么情况了<br>“那时迁先生，你打探到了什么消息？”<br>“那个啊，有点奇怪。她们的马车依次拜访着附近的寺院，这么说的话，他们马上就要到…..”<br>“违反废佛的命令，拒绝改信道教的寺院吧”<br>“什么，这你也知道？我在全国各地都有些耳目，我让他们调查了一下，从四川到陕西，河南，陕西的名刹，都被勒令改宗，眼见着和尚和官军的冲突越来越大”<br>薛永将目光转向了银树<br>“真的，那只是‘妾’吗？”<br>银树没有回答。彭尼问时迁<br>“您知道他们接下来要去哪吗？”<br>“看那方向应该是奔着嵩山去了，没错”<br>银树眼睛一亮<br>“少林寺啊”<br>“哎呀，史进也去那边了”<br>“那我们马上追上去”<br>银树拿起剑，风风火火地冲出祠堂，落叶也跟着飞了起来，那门终于支撑不知，倒了下来<br>“真是个有气势的小姐啊，你知道少林寺在哪吗？”<br>“您不是知道吗？”<br>彭尼用脚踢散了堵住出口的门的残骸后，匆匆跟在银树身后。</p><hr><p>另一方面，史进离开祠堂，朝着少林寺加快了道路。<br>少林寺在洛阳的方向<br>“从什么地方拐个弯，然后再向南去”<br>因为是有名的寺，又是在嵩山，所以只要朝那座山进发即可<br>虽然想的很容易，但史进天生路痴。问别人也没问的很明白，也没有地图。<br>总之朝着那个方向去就没问题了<br>街道上总觉得有些嘈杂，在客栈，道士们得意洋洋，也有很多士兵，可以看到被背手绑着被带走的僧侣和尼姑的身影。<br>“这是拒绝改宗的和尚们。要被带到洛阳去，好像都被判死罪了”<br>“德高望重的龙门大禅师也去世了……这世上要没有佛了吗？”<br>人们在低声私语着，好像避开牵连<br>看来，这一带对废佛的反抗力很强，官军和抵抗的寺院之间也发生了冲突<br>史进虽然不相信神佛，但和鲁智深是好朋友，看上去很老实的僧侣们被骂得口无遮拦，像牛马一样被赶走，被关起来，看着很不舒服<br>（但是，现在首要的是找到师父）<br>接着赶路，和被绑起来牵着走的僧侣擦肩而过。受伤的人很多，并且被全副武装的士兵监视着。史进站在路边，看着一行人走过。大概有一百多人吧，大家神情绝望，一边走一边诵经，却被士兵们殴打<br>“喂，不要打了”<br>史进不由自主的向着士兵喊到<br>“原来这人也支持和尚”<br>“看见你的假发我就想揍你”<br>说着话，史进就把士兵打倒了<br>已经傍晚了，路上也没什么行人了，史进手握棒子，迅速的数了数士兵的数量，骑着马的队长一个，手下有数百人。在数完之前，就倒了一半，吓得骑着马的队长丢下僧侣跑了，剩下的士兵也开始跑<br>“那么，你们也赶紧逃吧”<br>史进拔出短刀，给和尚们松绑。可是僧侣们并没有逃跑，而是追着逃跑的那个队长就去了，但是他们是追不上马的，尽管如此，他们还是追着，即使摔倒了，也要爬起来继续追<br>史进也很奇怪。这时，一个年轻的和尚叫他<br>“请也帮我解开绳子吧”<br>只见这个和尚，双手被紧紧的绑着<br>“你也要追过去吗？”<br>“不追，已经追不上了”<br>史进一砍绳子，和尚就踩了一个倒下的士兵一脚，然后拿起他背上的弓和箭，迅速摆好架势，拉满玄<br>“是这样”<br><img src="/upload/pasted-65.png" alt="upload successful"><br>练过十八般武艺的史进，也还记得怎么用弓<br>（这家伙也会啊）<br>可是，这个和尚在最后的最后，停止了动作，凝视着路的彼方<br>史进一把从僧人的手里拿过弓箭，迅速放了一箭，箭破风而飞，射中了正在逃跑的队长的脖子，队长从马鞍上滚落，马就那样跑了，僧侣们喊道<br>“别让马跑了”<br>史进正在犹豫要不要射马<br>“给我”<br>在和尚抢夺史进的弓时，一个男子出现在那匹疾驰的马的前面，男子等到那匹狂马来到眼前，将布盖在了鼻面上。然后抓起马辔，用力拉扯下去。他对马的处理已经相当习惯了。<br>僧侣们追上了马，从马鞍袋里掏出了一个锦包<br>“拿到圣典《四十二章教》！”<br>史进把弓箭还给和尚<br>“原来如此，你是要拿这个”<br>和尚安心的抬头看着史进，看年龄应该和遇见王进的史进差不多大吧，善射箭的人大多眼睛明亮澄澈，不过他的那个表情，却漫无边际<br>史进又向着把马停下的那个男人转过身。那人牵着马，信步走来<br>“好慢啊史进，我等的都快睡着了”<br>“石秀”<br><img src="/upload/pasted-66.png" alt="upload successful"><br>这男人就是梁山泊的“拼命三郎”石秀<br>“你也是来多管闲事的吗？”<br>“那可不是，我是受吴军师之命”<br>石秀笑了<br>僧侣们收回圣典后，转身面向史进他们，用尖锐的声音喊道<br>“莫志啊，你可打破杀生戒了”<br>弓箭从年轻和尚的手里掉下来<br>“不是，射中那人的不是我”<br>“不要辩解了，你已经被逐出师门了”</p><p>白马寺坐落于洛阳郊外，是后汉时期由佛教传入时建造的，是中国最古老的寺院。据说，两名僧侣骑着白马，献上了《四十二章经》门前至今还有纪念此举的白马石像。唐代的名僧，从天竺返回的玄奘也曾在此修行<br>河南的寺院不愿改宗，这其中的代表，就是这白马寺<br><img src="/upload/pasted-67.png" alt="upload successful"></p><p>白马寺周围一片静谧<br>外围的伽蓝已经烧没了<br>“以前就听说过白马寺前的白马像”<br>史进抚摸着被火烧到门前的矮个白马石像<br>“还真是小啊”<br>史进在去少林寺的路上，和年轻的见习僧——莫志一起顺道去了白马寺。那里是圣域，也是战场的遗址。<br>史进所帮助的僧侣们就是白马寺的“幸存者”。<br>但是，被解救的僧侣们并没有表现出高兴的样子，回来的时候，用棒子狠狠地打了莫志。<br>“莫志啊，你杀生了，你已经被逐出师门了。我们按照禅师的遗言，去龙门石窟隐藏圣典。法难结束之前，卢舍那佛会守护圣典的。你速速离开吧”<br>于是，僧侣们抱着夺回的锦缎包裹，去了了没有路的荒野，史进无论怎么解释，说人是他杀的，都没人相信。<br>独自被留下的莫志，双手合十向着火灾痕迹前进。<br>“无法拯救龙门禅师，违背戒律，甚至还有保护圣典的遗言……我是个没用的人”<br>“那样的话，你把那人射下马就好了”<br>“我办不到”<br>“为什么？”<br>“我从小就喜欢弓箭，因为杀死过多的鸟兽，母亲担心我会遭报应而把我送到寺里出家，白马寺的长老龙门大禅师也严禁杀生。大禅师是个和蔼的人，走路的时候为了不杀死地上的虫子，都是抬起脚走路，我不能违背母亲和老师的教诲”<br>“但是，那个大禅师不是被害了？”<br>听到这话，莫志的脸变得严肃起来<br>“禅师反对废佛，最终还是想和平解决，他离开寺院前往东京，想亲自向天子说废佛的错误……..可是路上被人抓住，严词拒绝改宗，最终受刑而死，不久，寺里也来了士兵……”<br>“杀戮和尚，这大宋的皇帝可是会下地狱的，你们抢回来的锦包里装的什么？”<br>“是圣典《四十二章经》，禅师去东京前，吩咐我们要把圣典藏在龙门石窟内，直到法难平息”<br>在得知德高望重的大禅师殉难后，这一带的寺院的反废佛的呼声日益高涨，因此，僧侣们已经和官军产生了很多次矛盾<br>“我也打算加入义军”<br>“还组建了义军？”<br>“是的，有传言说不少因官军烧毁寺院的僧人都聚集在少林寺”<br>“少林寺？我有种不祥的预感”<br>少林寺虽然是以武术闻名，但如果和官军战斗，势必会处于下风，王进在那里的话，也一定会卷入冲突<br>“喂，石秀，咱们得抓紧了”<br>史进招呼站在远处的石秀，莫志像一只小狗一样跟在两人后面<br>石秀转过身去<br>“不要跟过来”<br><img src="/upload/pasted-68.png" alt="upload successful"><br>“啊？”<br>莫志抬头看了看石秀。史进挤进了二人的中间<br>“对不起，莫志。这家伙讨厌小孩”<br>“我不是小孩子”<br>“我不喜欢你的眼神”<br>“算了吧，石秀。不要耍孩子气了”<br>石秀没有回答，牵着队长的马。史进笑着用手搭在莫志的肩膀上<br>“来吧，和尚一个人走路很危险。一起去吧”<br>石秀看了史进一眼，就独自站在前面开始走路</p><hr><p>少林寺是建立在嵩山上的寺院<br>天竺的菩提达摩，面朝墙壁坐了九年。这是禅宗的起源。同时，作为修行的一环进行武术的锻炼。把坐禅和武术都发挥到极致的，就是这个全国闻名的名刹<br>山门被僧兵严格地保护着。由于最近的法难，寺庙被烧毁，被镇压的僧侣们，大量地向少林寺逃跑。白马寺被烧毁后，数量越来越多。<br>寺院内，武术锻炼的气氛被紧张所代替，那天傍晚，气氛更加紧张了，一个自称“敕使”的女人的马车终于到了<br>“那个，就是传说中的──吗？”<br>僧侣们不安的面面相觑<br>美丽的侍女递交了封好的名片，长老们脸色都变了，敲响了召集弟子们的钟声。<br>“听说附近的寺庙也有同样的密使来访……到底是敌人还是朋友？”<br>钟好像晃动着嵩山的群峰<br>就在钟声消失的时候，“勅使”和少林寺住持“默和尚”在大雄宝殿大殿里面对而坐<br>“密使”是一位与寺庙不相称的美女。看到她带的敕书，高僧们改变了神色。敕书是皇帝下达的命令。文书上并没有按大宋国皇帝的玉玺，而是按下了辽国皇帝的玉玺。<br>“传言是真的”<br>敕使带着慈爱的微笑，安慰僧侣们<br>“我们大辽国的皇帝信仰佛教，大臣、民众都是虔诚的佛教徒。因此，陛下对宋国的法难感到痛心，对圣典被烧毁，僧尼被虐待感到忧虑。如果僧尼和教典一起到达我国，一定会受到重点保护的”<br>大雄宝殿里集中了全山的高僧。坐在上座美女悠然说道，在她面前，是一个坐在椅轿上的老和尚，他是少林寺的方丈“默和尚”。他专心于坐禅，很少在人前出现。他之所以出现，是因为少林寺的危机。<br><img src="/upload/pasted-69.png" alt="upload successful"><br>“违背废佛命令的寺院，已经受到了官军的全面讨伐，但是不用担心，我们辽国会出手相助，我大辽皇帝最担心佛法被毁灭，宋和辽正是同盟关系，我们会对宋皇帝劝告，如果他不听劝解我们会护送僧尼到辽国境内，决不能屈服于废佛的罪恶行为。我们一行人，为了告诉大家这件事，正在拜访各个寺院”<br>这些高僧们放心了，众所周知，契丹人崇敬佛法，如果有他们作为后盾的话，应该能充分抵抗废佛风潮<br>但是，大长老,“默和尚”一声不吭<br>他看起来已经很老了，身上只披着一件破破烂烂的衣服头上套着一块灰色的布，一动也不动的坐着，看不见脸，衰瘦的身体只露着一点点，有两个徒弟像侍奉佛祖一样，守卫在两侧<br>“怎么样‘默和尚’。白马寺已经灭亡了，长安的大慈恩寺也拒绝改宗，遭到压制，幸存者们现在应该陆续的到这里了吧……唉，你们少林寺，是肯定不屈服的吧？峨眉山已经灭亡了，普陀山，九华山改宗，这样下去，宋的佛法可就断绝了，请您听我好言相劝”<br>站在美女身后的猫儿心中窃喜<br>透过破布，可以看见那“默和尚”的肚子，瘦的就只有骨头了，每次一呼吸，灰色的皮肤就在抖动<br>（少林寺的武术天下闻名，但眼前这位“默和尚”应该和其他和尚没区别吧，在身上浇上油，也能熊熊燃烧吧）<br>“为什么不作答，虽说是异国皇帝，但是在敕书面前，你的态度有失恭敬”<br>面对美女的斥责，身边的弟子为其辩解<br>“长老是刚从苦行中来的，他在山顶的岩屋已经默然坐禅九年了”<br>“这可真是了不起，如果这样有修行的高僧率先表态，那么这场大祸一定能被终结，也才能超度智真长老和龙门大禅师”<br>这个时候，“默和尚”抬起头，发出了声音<br>“汝，即为‘大祸’”<br>美女心中暗惊<br>“怨憎会苦——罗刹已至”【怨憎会苦：指与怨憎者相遇的苦痛，罗刹：食人肉之恶鬼】<br>“那你又是什么”<br>侍女们围住主人。默和尚慢慢的站起身来<br>“在这之前，贫僧先道道你，慕容嫣辉，曾为宫中贵妃，为夺皇后之位，毒杀王皇后”<br>“什么？”<br>“你忘记这张脸了吗？”<br>从灰色的兜帽下面，一双闪闪发光的眼睛盯着女人。<br><img src="/upload/pasted-70.png" alt="upload successful"><br>“金山大师！”<br>“正是贫僧，贫僧当年亦在朝廷中做过法事，道士势力兴起后离开朝廷，回到金山寺，十年前，听闻噩耗返回东京，然王皇后之死亦堕入黑暗，被怀疑弑母的公主被驱逐出京，虽皇后料定死期将至，发出信函求救，还是无力回天”<br>“那又如何，我现在可是来帮你们的？”<br>“那么，贫僧在说说你的野心，你勾结童贯等‘四奸’，令天子沉溺于酒色，乃霍乱朝纲之人，并且又勾结兄长慕容彦达于青州谋反，于是失去了皇帝的宠爱，本应被幽禁在尼姑庵，却逃到辽国，此次作为密使挑唆废佛的反抗——目的显而易见，大宋必有祸于汝之阴谋，我们必不妥协”<br>“如果你有那个能耐，就试试吧”<br>以猫儿为首的侍女发起了攻击，少林弟子们挡在前面。猫儿手拿鸳鸯环，向金山大师袭去【鸳鸯环是一种独特的外门暗器，随时取下，远距离投掷攻击。】<br>大师一动不动，猛的伸出手臂拔出了两根座椅的担棒<br>那是削成六角的两根大长棍，弟子们拜服了<br>“大师要使‘般若雷’了”<br>只见大师用双手抓住棍子，一阵大幅度的舞动，竟将那鸳鸯环掀到一旁，产生了犹如‘般若雷’的轰鸣声，这个声音正是能打破万人的涅槃的雷鸣。<br>鸳鸯环被掀飞到天花板附近，猫儿也跳起身抓住，再次扔了出去<br>聚集在大殿僧人们堵住出口，侍女们拔出了剑进行攻击，与此同时，慕容贵妃在另一个侍女的保护下从窗户逃到了走廊<br>她头顶上，有一个蒙面刺客从房梁上跳了下来<br>“这次可不能让你跑了”<br>蒙面的刺客正是王银树。随后，彭尼和薛永也跳了下来。他们进入少林寺后，沿着梁柱偷偷溜进正殿。<br>猫儿向银树袭来。银树见仇人在前，完全进入忘我状态，猫儿拔出剑对着不顾一切冲向主人的银树砍去，薛永庇护着银树，用从彭尼那里借来的刀挡在前面，彭尼也向侍女们挥着拳头<br>侍女们挺身保护慕容贵妃，眨眼间正殿被血染红了。不知不觉中慕容贵妃的身影消失了。<br>金山大师叫了两个弟子的名字。<br>“随流！天穹！”<br><img src="/upload/pasted-71.png" alt="upload successful"><br>两个弟子追着正在离开正殿的慕容贵妃，这两个弟子都是很强壮的和尚，其他的弟子也跟着追了上去，他们从正殿一出来，发现那贵妃正在等着她他们，跑在前面的随流突如其来的飞刀击倒了，虽然肩膀中了飞刀，但仍然穷追不舍，跑出去五六步后，突然跪了下来<br>“猫儿的毒，很有效”<br>贵妃狂笑着，接着往外逃，剩下的侍女也抛开银树他们，猫儿也跟了上来<br>天穹是少林的头号高手<br>“随流啊！”<br>“吾等，不可随波逐流逝去，请代我保护金山大师”<br>随流和尚突然吐血而亡，这时，小和尚们跑了过来。<br>“大雄宝殿失火了！”<br>天穹跑回金山大师身边<br>“一定是在院中藏的人手所为”<br>金山大师对着死去的随流双手合十，然后所有人救起伤员在大殿外避难。大殿失火了，走廊也满是黑烟<br>“这个罗刹，把我们聚集到大殿，然后打算一把火毁尸灭迹来掩埋自己的秘密”<br>金山大师把目光投向了银树他们<br>“你们是什么人？”<br>彭尼取下面罩<br>“一会再说吧，我们也是以她为敌的”<br>僧侣们守护着金山大师，准备逃离燃烧的大雄殿，突然发现每个门都被锁死了<br>“门打不开”<br>火海已经逼近了他们<br>金山大师和数十名僧侣被困在业火中。但是，连最小的和尚都没有哭出来的<br>金山大师开始坐禅。<br>经文的声音在热风中回响。既不激烈，也不勇猛，是淡泊，而且是全身共鸣的声音。<br>般若波罗蜜多──不可动摇。<br>天穹也开始坐禅，其他弟子们也两两坐禅，与燃烧的大殿相对而坐。<br>寿自在、心自在、愿自在、资具自在、业自在、受生自在、解自在、神力自在、法自在、智自在【这是十相自在，具有极强的避灾能力】<br>银树颤抖着，紧紧地抱住薛永的手臂<br>“我们要死了吗？”<br>“没事的，死不了”<br>彭尼在找退路。但是，哪里都没有逃生的路。银树，看起来很热地摘下了面具<br>“好痛苦……”<br>薛永怀抱银树，希望至少保护她不受降临的火星和热风的侵袭，不知哪里，传来了太白的叫声，薛永抬起头，风从走廊的破洞中吹过<br>“对了，爬上梁，走到屋顶上也许能逃走。坐在我的肩上……谁来救救这个孩子”<br>金山大师回过头来，突然睁开了眼睛<br>然后，他站了起来，朝着燃烧的门施展了“般若雷”<br>但是，武器归根结底是棍棒，般若雷鸣响了，但门却纹丝不动。<br>门的另一边，隐约传来太白的叫声<br>然后，随着受到冲击，门剧烈晃动，从外面被破开了<br>“在这儿！”<br><img src="/upload/pasted-72.png" alt="upload successful"><br>他们用面向寺内钟楼的撞木打破门，飞跑进去的正是史进和石秀。</p><hr><p>薛永护着银树，逃出了熊熊燃烧的大雄宝殿<br>地面上倒着几个青衣的侍女，但里面却没有慕容贵妃和猫儿<br>“史大郎，赶来的好及时”<br>石秀向薛永打招呼<br>“嘿，薛永”<br>“石秀也来了”<br>他们除了抢夺队长的那批马外，还抢了路过官员的马，这才急忙赶到这里，还有在大雄宝殿外监视的时迁<br>“我半路上碰上了史进，就跟他说由我带路，真是惊险”<br>史进抓住一个少林寺的僧人，询问了王进的去向<br>“这有善用枪棒的武者吗？在哪？”<br>“少林僧人都会用棒”<br>“我说的是高手，是来历不明，非常厉害的一个人”<br>“话是这么说……”<br>史进问了别的僧人，但还是不得要领。即便如此，史进仍不放弃，还在一个接一个的问<br>金山大师走到银树面前，深深地低下了头<br>“跟当初嫁入皇室的母亲长得一模一样呢，祝您一路顺风”<br>金山大师问彭尼。<br>“你是孤女峰的‘坎虎彭尼’吗？见面还是第一次呢。一直以来都守护着公主，孤女峰的“风九尼”是在息灾吗”【息灾：为止息灾害、灭除烦恼罪业的修法】<br>彭尼冷静的脸上出现了罕见的感慨的表情<br>“少林寺的‘默和尚’原来就是金山大师，我真是无礼，孤女峰的九位老尼师，在这十年中相继去世，留下的是三尼。但已经年事已高，处理杂务的我为了保护公主，将她带到了峨眉山”<br>彭尼继续说着<br>“十五年来终于又有了新的尼姑——还是天子的旨意，于是，我下了孤女峰，来到了蛾眉山本寺”<br>银树了解情况，就走到金山大师面前<br>“是我母亲指引的，大师”<br>她模糊地记得金山大师的事情，当初赐予她那两句不吉偈语是这个僧人。但是，银树并未提及此事。<br>“我一定会为母亲报仇的”<br>“你已经在痛苦中，坚强、聪明地成长起来。愚僧可就放心了”<br>除了彭尼以外，在场的人都在看着银树。脸上黑糊糊的，头发也烧焦了。虽然长相很美，但却看不出高贵的身份。<br>金山大师把手放在银树的肩膀上，告诉人们。<br><img src="/upload/pasted-73.png" alt="upload successful"><br>“这位是当今圣上的第二皇女‘荣德公主’赵金奴殿下。是前皇后，王氏的独生女，是皇太子的妹妹。她长期寄居在峨眉山尼姑寺里的”<br>最觉得吃惊的是薛永，虽然看着她长得挺端庄，但也没想到是当今圣上的公主，银树一脸神秘地站着，像一个完全不认识的少女<br>薛永不知为何感到寂寞，去了史进他们那里。<br>“找到王教头了吗”<br>“没有，好像不在这啊”<br>薛永问莫志。<br>“这孩子是谁？”<br>“我是白马寺的见习僧。虽然刚逐出师门”<br>莫志恭敬地向薛永鞠躬<br>“我不能再拉弓了，也打破了和母亲的约定，今后该怎么办才好呢”<br>“别在意，总会有办法的”<br>史进安慰莫志后，莫志用憧憬的目光仰望史进。<br>“其实我啊，想像史进大哥那样把弓拉得更好，虽然我在家乡是最好的，但是史进大哥的弓是天下第一的”<br>“这话过了，这世界还有比我弓术更好的”<br>“骗人的吧”<br>“射中飞雁的眼睛，百步之外射中柳叶……那样的‘天下无双的神射手’是真的有哟”<br>“有这样的人？”<br>“梁山泊的‘小李广’花荣”<br>“梁山泊的，‘小李广’花荣？”<br>薛永慌忙阻止了说出“梁山泊”的史进。<br>莫志，又一次嘟哝了那个名字。<br><img src="/upload/pasted-74.png" alt="upload successful"><br>“梁山泊的……‘小李广’花荣”</p><p>钟楼的钟被敲响了。犹如雷鸣般连连作响。<br>这是自唐代废佛以来，从未鸣响过的告急的大警钟。<br>僧侣们陆续聚集过来。是嵩山各处的大小寺院的僧侣们。寺庙的男子，小僧也混在一起。也有从邻近的寺院逃跑了的各派的僧尼的身影。<br>僧侣们按次序聚集在金山大师的周围，讨论今后的存亡问题。<br>其中有一群体格健壮的僧兵。手里拿着一根棍子。有名的少林寺的武僧为了保护金山大师而筑起了铁壁<br>史进走近那些武僧们，打听有关王进的事情<br>“知不知道一个叫王进的用棒高手？可能他没有自称王进吧”<br>“不知道，他的法名是？”<br>“不知道”<br>“那我就没法回答了”<br>史进拼命地寻找，但聚集过来的僧侣中却没有王进的身影。为了询问金山大师，史进回到了大雄殿前。金山大师知道莫志是白马寺的幸存者，把莫志叫到跟前<br>“听说龙门禅师已经迁化，寺院被烧毁了，圣典《四十二章经》已经没了吗”【迁化：指人死】<br>“没有，龙门禅师的死前要我们在法难消亡之前，把圣典隐藏在龙门石窟里”<br>“不愧是龙门大禅师。如果我们有传入我国的第一本教经《四十二章经》，佛法必将受到保护”<br>金山大师敲打着黑檀的念珠合掌。粗糙的手和纤细的念珠显得不相称<br>“大禅师在去东京的途中被捕了。在那之前，那女人就去了？”<br>“是的。自称“敕使”，只有大禅师见了面”<br>“你知道些什么消息？”<br>“不知道，大禅师赶走敕使后，一个人苦恼了一阵，说什么，’要是发生战争，大宋就会灭亡‘，因此陷入了极度痛苦的境地，然后就去了东京，我们都很困惑”<br>“理由很简单。她是辽国的敕使。在废佛的风潮下，到处传达要抵抗官军，许多寺庙都相信这一点而抵抗官军。但是，禅师却对其前途担忧。如果寺院和国家争斗，就会变成战争。不能不牺牲。而且……”<br>“我不觉得辽国是要帮我们”<br>史进在一边说道，金山大师第一次把目光投向了他<br>“确实，这是辽国的陷阱吧。趁法难混乱，企图夺取宋国领土”<br>“但是，在这种状态下，少林寺不得不与官军作战”<br>“那你们又是什么情况”<br>“多管闲事罢了【官方吐槽】，在寻人的途中，莫名其妙的被这个公主雇佣了。还没收她一文钱”<br>“你们要找谁”<br>“王进”<br>“从来没听说过”<br>“好像他不在这吧”<br>“那么，早点离开比较好。这座山马上就要成为战场了”<br>金山大师拄着棍子，虽然目光非比寻常的敏锐，但却是一副苦行者虚弱的样子，史进环视了僧兵们，都是一副笃实的表情。<br>虽然莫志说少林寺有“义军”，但怎么也看不出有那样的人。<br>“虽然志向很好，但是连虫子都不舍得杀的出家人能战斗吗”<br>“出家人有出家人的战斗方式”<br>“这样啊，那我就放心了，我也要做我的事了”<br>史进的肚子，突然华丽的叫了起来，昨天什么也没吃就跑出了祠堂，骑着马跑了过来<br>金山大师叫来了一个和尚<br>“库房那边没收影响吧，你们过去看看”<br>和尚们跑到库房里，连锅带菜一起搬出来<br>“正好现在准备晚饭”<br>火星飞舞，烧焦的臭风呼啸的院内，突然就开起了野宴。釜里煮满了米饭，锅里装满了蔬菜、豆腐、魔芋、蘑菇的素菜。僧侣们互相谦让着吃，史进他们也毫不客气地吃了。<br>薛永把碗递给了银树。银树坐在薛永的旁边，和史进他们一起从锅里捞饭吃。也不知从那里弄来的酒<br>史进把酒瓶舀子递给了彭尼。<br>“肩上的担子放下来也就轻松了”<br>“嗯”<br>“你们到底藏了什么秘密，那个不懂人情世故的人可不一般”<br>“最初本打算把她送到洛阳郊外的尼姑庵，但是金山大师因为担心她，就把她转移到了峨眉山的尼姑庵，就是在那孤女峰绝壁上的小草庵，天下独孤的武术尼——“风之九尼”聚集在那里，秘密的守护培养她”<br>“原来如此，那一身武艺也是在峨眉山上训练的吗？”<br>“峨眉山的普贤尼是‘化身男子’……和男人一样，‘风之九尼’怜悯公主，努力把她培养成为一个出色的尼姑”<br>“那你也是‘化身男子’吗？”<br>彭尼一瞥史进，微微一笑，将酒杯送到了嘴边。<br>“那仇人是怎么找上门的”<br>“‘敕使’也曾到过峨眉山，扬言会支持抵抗，所以不要屈服于废佛之类的话，长老们信以为真，当敕使离开以后，又来了一个受伤的尼姑……那尼姑伤痕累累，被唤作’碎尼’，由于心灵也受到了很大的创伤，那‘碎尼’疯狂的哭了起来。碎尼是一个寺院的幸存者，那个寺院幽禁着一个高贵的女人，某天晚上，那里被神秘势力突然袭击，那女子被救走，尼姑们全被杀死……只有碎尼活了下来，向峨眉山逃来”<br>“那个被幽禁的女人，是慕容贵妃吗？”<br>“是的，但当长老们听到这个消息时，敕使已经走远了”<br>“然后你们两个就一齐追了过来？”<br>“一听说仇人，公主就毅然要下山”<br>“峨眉山情况如何”<br>“听说后来被官军攻击了，峨眉山普贤尼她们武艺高强，不会轻易输的……也传言有人在寺院的井里投了毒”<br>“身份暴露的慕容贵妃，居然动手了”<br>彭尼喝干了酒，松了一口气<br>“我因为俗世的繁琐而出家。如果把公主还给金山大师，这次一定要悄悄地生活”<br>“那可是相当困难啊”<br>史进嘟囔着——彭尼用手指摩挲着陪伴已久的刀刃，上面有许多缺口<br>“今后要怎么办呢”<br>“告诉皇帝，辽国对大宋有阴谋，教他停止废佛……行得通吗？”<br>“够呛，为了让皇帝相信，也就只有抓住那个女人了”<br>两个人举起装了酒的碗干杯<br>“也许金山大师也是这么想的。可是，对手是千年女狐。与出家人为敌，也太糟糕了”<br>史进看着一旁金山大师的吃相，不由得瞪大了双眼<br>只见金山大师盘腿而坐，抱着大锅，用碗当勺子。在他一旁的是天穹和尚，只见他们把菜放在放在饭上，猛地就吃干净了，不只是吃的量很惊人，只见金山大师肚子越吃越鼓，皮肤也越来越有光泽，全身充满精气，就像变了一个人一样<br>终于，大师放下了筷子<br>“袈裟拿来”<br>僧人们把放在石柜里的袈裟拿了过来，只见金山大师身披黄金袈裟，手拿般若雷，那起身的身姿，好像一个健壮的巨人。史进深感钦佩<br>“还真的没有成为即身佛啊”【即身佛：即身佛又叫全身舍利，是真实存在的一种东西，是自然风干成为的木乃伊。】<br><img src="/upload/pasted-75.png" alt="upload successful"><br>站在一旁的僧人向大师行礼<br>“大师在坐禅期间，从未停止过瑜伽锻炼”<br>瑜伽是从天竺传入的修行法，即倒立、单手站立、用头站立等方法，保持超人的姿势锻炼肉体，进行冥想。<br>“原来如此，那之后就交给大师吧，我们歇着去吧”<br>银树变了脸色，抓住薛永的袖子<br>“你们以后打算怎么安排啊”<br>史进回答道<br><img src="/upload/pasted-76.png" alt="upload successful"><br>“我答应要帮你报仇，定要找出那个女人，撕下那妖怪的皮！”<br>史进向山门跑去。石秀、薛永、时迁也跟着，银树的瞳孔闪耀着。<br>“好汉不撒谎！”<br>银树也向跟着跑过去，被彭尼一把抓住<br>在出山门之前，史进等人停下了脚步，黄昏的山道上，站着很多的人，大概有上千人吧，大部分是僧侣或尼姑。也有扛着佛像和法具的信徒们<br>“这些人是什么情况”<br>天穹和尚和时迁马上着手调查<br>“他们是从四川，陕西，河南，山西诸寺逃来的人。官军们在铲除抵抗废佛的寺院。试图抵抗的人们，将少林寺作为最后的堡垒”<br>山门打开后，难民们陆续逃进了少林寺<br>“大师，这边交给我们了”<br>站在佛塔上看守的僧兵喊道<br>山下已经渐变黑暗了，在这如海底一般的黑暗中，几道火把的光芒，朝着这少林寺前进，这些火光一点点的汇聚，竟成了一条火焰之河，不久，嵩山的山脚就被包围了，去侦察的僧侣匆匆赶了回来<br>“官军，官军来了，他们就在山下！”<br>包围少林寺的是挂着洛阳旗帜的大军。<br>“讨伐违反朝廷命令的少林寺！”<br>鲸浪在嵩山的群峰中轰鸣。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二章-宣和法难&quot;&gt;&lt;a href=&quot;#第二章-宣和法难&quot; class=&quot;headerlink&quot; title=&quot;第二章 宣和法难&quot;&gt;&lt;/a&gt;第二章 宣和法难&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;font color=&quot;#FF0000&quot;&gt;原文作者 森下翠和插画作者 正子公也 
      
    
    </summary>
    
      <category term="绘卷水浒传" scheme="https://www.junglezero.top/categories/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0/"/>
    
    
      <category term="绘卷水浒传 二十周年番外" scheme="https://www.junglezero.top/tags/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0-%E4%BA%8C%E5%8D%81%E5%91%A8%E5%B9%B4%E7%95%AA%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>绘卷水浒传 20周年企划 第一章 翻译</title>
    <link href="https://www.junglezero.top/2019/03/04/%E5%8D%B7%E6%B0%B4%E6%B5%92%E8%BD%AC-20%E5%91%A8%E5%B9%B4%E4%BC%81%E5%88%92-%E7%BF%BB%E8%AF%91/"/>
    <id>https://www.junglezero.top/2019/03/04/卷水浒转-20周年企划-翻译/</id>
    <published>2019-03-04T01:40:00.000Z</published>
    <updated>2019-03-19T01:02:51.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-中秋望月"><a href="#第一章-中秋望月" class="headerlink" title="第一章 中秋望月"></a>第一章 中秋望月</h3><hr><p><font color="#FF0000">原文作者 森下翠和插画作者 正子公也 版权所有<br><br>个人翻译<br><br>仅供个人娱乐及同好者欣赏<br></font><br><br><br><a href="http://suikoden.com/" target="_blank" rel="noopener">原文地址</a></p><hr><p><img src="/upload/image1.png" alt="upload successful"><br>仰视苍穹，附在黄昏的天空上小花，恰如那银色的星星<br>凉爽的秋风阵阵，引得香甜的气息扩散在暮色中<br>少女合上了双眼。<br>花的名字是银木犀，又名“七里香”。这个美丽的名字，是母亲告诉他的。<br>立于大花园一隅的银色的树，树干挺拔，树梢已经长到了屋檐那样高，在柔软的树枝上，开满了白色的花<br>少女合上眼睛，陶醉在银树所散发的香味中，在灰色的树干下，少女伫立。</p><p><img src="/upload/image2.png" alt="upload successful"><br>她容貌姣美，头饰和服装也很奢侈，不仅如此，虽然年幼，但是很有智慧<br>天空渐渐暗了下来，花园中空无一人，夕阳西下，星星开始闪烁，但是并没有人来寻找她<br>不久，少女离开树下，走了<br>闭着眼，走过树丛间的小路，走过池塘上的小桥，是她最中意的“游玩”，脚踏在土地上的触感，微波的声音，花草细微的香味，这些感觉，为她在黑暗中勾勒出一幅地图，深深的山谷，神秘的森林，波涛之测，无垠的草原——少女冷寂的嘴唇上，浮现了笑容<br>（我，一个人畅游，始终是我一个人啊）<br>可是，当脚踩在铺石路上的瞬间，少女睁开眼，敏锐的注意到了回廊那里<br>在上到回廊的台阶上，黑白的小狗在等着她，看见少女，小狗摇起了尾巴。不过它觉察到了主人的紧张，突然竖起耳朵<br>“进来吧！”<br>少女跑上石阶，穿过回廊，推开了母亲的房门，屋内很暗，床边有几个人影</p><p><img src="/upload/image3.png" alt="upload successful"><br>人影之间，有一个轻柔的声音在呼唤她<br>“——金奴”<br>是父亲，可是少女却威严的命令道<br>“把灯点亮！”<br>沉闷的空气在流动，在隐秘处的侍女碎步急行，点燃蜡烛<br>房间中亮起来了，是一间奢华的房间，屋内的人衣着也很奢华，尽管如此，房间中的空气依旧冷冷清清，让人紧张<br>少女——也就是金奴，不服的挺起胸故作滑稽的说道<br>“愿您一帆风顺，父皇，啊，应该用’陛下’称呼，因为分隔时间久了，怎样打招呼，金奴已经忘了”<br>“不必多虑，叫寡人父皇就好了”<br>父亲文雅大方的点头，对年幼的女儿藏在笑容间的讥讽，掩盖着的撒娇，他完全没有注意到，父亲，这个在帝国里最高贵的人“天子”——大宋的皇帝，全天下的主人，万民皆顺，他没有被要求“哗众取宠”<br>金奴有些失望，这时母亲看向了她<br>如果父亲是皇帝，那么作为金奴母亲的王皇后，当是母仪天下，可是她却无力的卧在床上，不安的看着丈夫，王皇后长时间卧病在床也都是因为父亲。金奴很是心疼<br>在父亲旁边，精心打扮的贵妃恰好贴近，慕容贵妃，是父亲后宫众多佳丽的一人，据说她是后宫中美女，代替病弱的母亲一手掌控后宫，慕容贵妃对金奴微笑，不过，精心化妆的眼睛却一点也没笑<br>“陛下可是为了皇后特地来看望的”<br>金奴傲慢的转过脸去<br>皇后是来自严谨官僚家的女儿，皇帝是好玩的“风流天子”，年轻时作为“浪子”——游手好闲之人广散艳闻，即位后曾经有一段时间认真的做皇帝的工作，而现在则把国家托付给大臣，尽情的置身于绘画园艺等自己的爱好中<br>“能看到父皇很高兴，是吧，母后”<br>借此机会给父母拉近关系也好，金奴的父母关系和好如初也好，在那之前，父皇亲近的宦官杨森入内<br>“杨森特向公主殿下献上玉兔和青蛙，皆由糖制成，为殿下中秋赏月助兴”<br>所谓宦官，是指在后宫服侍的阉人。杨森微胖的脸上堆满讨好的笑容，双手奉上做滑稽动作的糖工艺品，金奴看也没看一眼<br>“母后，今晚到父皇宫中参加宴会如何，有戏剧，有舞蹈的表演呢”<br>慕容贵妃的不满显露出来，王皇后轻轻的微笑了<br>“这样的话，你和哥哥一同去吧，我的身体实在是不好”<br>在床台下，作为兄长的桓王子站在柱子后面，他比金奴年长三岁，将来会被立为太子<br>可是，他软弱无能，只是装装样子罢了<br>“兄长也希望母后一同前去，恳请母后换一些别的药，改变一下心情”<br>“——说道药的话，贫道倒是从月宫得到了合适的药”<br>金奴看向那个从未见过的年轻道士，他穿着道服，手持大大的金色拂尘，留着很是别致的胡须，一脸的严肃<br>“啊，你就是那个叫做林灵素的术士，最近没少给父王奉承了不少‘好处’吧”<br>皇帝有许多的爱好，他是绘画和书法名家，又喜爱珍奇的动植物，也好收集奇石怪岩，现在又热衷于“道教”——追求着不老不死，羽化登仙的神秘仙术，为此可是没少赏赐这些道士，在这些道士中，皇帝最喜爱的，就是这个道士——“通真达灵元妙先生”林灵素。皇帝责备了女儿<br>“金奴，林先生和其他的道士可是不一样的，他是货真价实，从天上下凡的仙人，因而也是深谙医术，今天晚上特地请过来为皇后看病”<br>“正是如此，那么我们首先进行祈祷，再由我开出仙药处方”<br>金奴挡住了道士的去路<br>“母后喜爱观音经，你能读吗?”<br>“道教和佛教是不同的”<br>林道士锐利的双眼，撇了一下瞪着眼睛的金奴，这是令人恐惧的眼睛。不过，皇帝并没有察觉，为了改变话题，说道<br>“说起来，这个公主是难产所生，使得皇后信奉高僧，进行祈祷。那个高僧，曾将一句偈语给予这个孩子，不过，到了现在也不知道什么意思”<br>“什么偈语”<br>“天有三日，满月辉耀”<br>慕容贵妃皱了皱眉眉头<br>“陛下，那可不是什么吉兆啊”<br>“是这样吗，长老也没说什么不吉利啊，不过……你怎么看，林先生”<br>“那个僧人害怕引火上身吧，贫道就直说吧，’日’代表天子，三日是则是……”<br>“那月又是什么呢”<br>“月所指的是阴，满月之时是十五……说不定指的是十五岁的女子将会危及帝位，这可是大凶之兆啊”<br>皇帝不安的看着金奴，此时，王皇后立刻吩咐王子<br>“为你父皇送行，不久，就开始宴会吧”<br>慕容贵妃婉然的微笑着，扫兴的把手放在皇帝的手臂上<br>“陛下，回到御殿吧，如果登高赏月，气自然就消失了”<br>皇帝离开座位，慕容贵妃等人也随之而去<br>人们走后，金奴用小手轻轻的关上门</p><hr><p>低空之中，赤色的满月正在爬升</p><p><img src="/upload/image4.png" alt="upload successful"><br>宽广的房间中，只有金奴和王皇后，金奴伺候母亲床上休息后，静悄悄的爬上窗框，向外眺望，宫殿被高耸的围墙包围着，还看不见月亮，但耳朵可以清楚的听到远处的音乐和笑声，今晚，大家一边赏月，一边举行宴会，金奴还不曾参加过宫中的宴会<br>“很是热闹啊，但是，也没什么好羡慕的，我喜欢安静”<br>“金奴，你所说的“骗子”，还记得是在哪里吗？”<br>“当然，舅父大人”<br>皇后脸上浮现了笑容，她的哥哥是个光明磊落的人，皇帝也很亲近，现在作为巡察使巡查着各地，是母子两个能指望的人。他帮着皇后寻得有效的药，给了金奴一条小狗<br>“舅父大人，我听闻你马上要离开了，但愿一帆风顺”<br>奶妈伺候几人吃饭，皇后的饮食都是奶妈一手操办的。从外面运来的东西，也必定让狗先试毒，这也是叔父的吩咐<br>舅父说，大臣们为了得宠陪着皇帝进行各种游玩，政治被荒废，还有人上书说应另立新皇后。看着皇帝皇后不和，又有妃子谋求着皇后的位置<br>“因此说，你的母亲，处在极度的危险当中”<br>“不要紧，母后，由我来守护，我才不是什么不吉利的孩子”<br>金奴强打精神，看着很是丰盛的晚餐<br>“中秋要吃什么呢？”<br>桌子上和平时一样摆列着素食，母亲是虔诚的佛教徒，发病之后变得更加虔诚<br>“周围没有月饼啊”<br>当金奴舔着嘴唇，准备吃饭时，奶妈却用手巾抹着眼泪<br>“据说后宫其他的妃子，被陛下邀去参加宴会”<br>“哎，不管了，金奴开吃了”<br>金奴用双手抱起母亲，银木犀的香味在床帐中散布开来<br>“今年，那银树开花了，可漂亮了，明天，我陪母亲到庭院散步去吧”<br>“真是个好孩子”<br>皇后用纤细的手和善的摸着女儿的头发<br>“那棵树，是在我成为皇后时栽下的，银木犀，又叫‘七里香’，七里之外，都能闻见它的芬芳”<br>“七里，是有多远呢？”<br>“母亲我是从未出过皇宫，也不知道啊”<br>皇后的眼中泛起泪光，金奴一看情况不妙，赶紧笑了起来<br>“中秋还是要吃月饼，我去向父皇讨要”<br>金奴溜出房间。厨房中还有奶妈，其他的侍女都去宴会上帮忙了。看门的小宦官，是金奴要好的玩伴，不知什么时候金奴喜爱的红衣玩偶丢了，奶妈在小宦官的床上发现了，本来要暴揍小宦官一顿，被金奴拦下了<br>“呀，是我的错，我不小心落在这里的”<br>宦官多是穷人家的子弟，或者是孤儿，金奴有很多玩具，很是让他们羡慕<br>要求通过时，小宦官麻利的打开门，什么也不过问，小狗也跟在金奴后面<br>“你得在房间替我守护母亲大人啊”<br>小狗一听，就折返了<br>从皇后的寝宫出来，就仿佛置身于另外一个世界。外面很是华丽，树上挂着灯笼，宫殿用七色布做成的假花装饰着，音乐和宴会的气息在空气中流动，盛装打扮的人们快乐的往来着<br>在人群中，金奴看见了打扮的格外华丽的的慕容贵妃，被一群侍女环绕。</p><p><img src="/upload/image5.png" alt="upload successful"><br>七色的衣服下摆拖曳着，带着镶嵌宝石的首饰，好像cosplay月宫女神嫦娥一般，为了表示自己是晚宴的女主人，还特意在发饰上插了一朵大大的红菊，隐藏在树丛中的金奴，听到了侍女们谄媚的声音<br>“这一朵奇异的红菊，更是映衬了贵妃娘娘的美貌”<br>“就是就是，但是金色的菊花是最漂亮的”<br>金奴的得意的笑着<br>“那金色的菊花，是母仪天下的象征，能种那样菊花的，只有母亲的庭院”<br>贵妃们走后，金奴脚步轻快的到了向着父亲的御殿走去<br>“我要赶到那些妃子之前，得到最好的月饼”<br>金奴加快了脚步，突然被什么人叫住，回头一看，一个侍女站在柱子前，是“月仙”，这是父亲所赐予的一个名字，一走进，便涌起了强烈的香气<br>“公主殿下，这边”<br>“月仙”拿出装有漆器的箱子，里面装着一个刻着美丽家徽图案的月饼<br>“这是皇帝陛下赐予的，一个意义非凡的月饼，请一定要带给皇后娘娘——”<br>金奴顿露喜色<br>“父皇呢？”<br>“已经入席了，要一起来吗”<br>满月好像悬挂在御殿的屋顶一般，金奴也是非常想去，不经意间，看了向石阶上行的贵妃一行人一眼<br>“不行不行，还是要把月饼呈到母亲面前，不能去”<br>金奴稳稳的抱住箱子，飞快的返回皇后寝宫<br>“母亲大人，这是从父皇那里讨来的月饼”<br>皇后强竖起身子，看着金奴红扑扑的脸颊微笑，因为奶妈不在，金奴寻找小刀，费力的用小手切出一大块月饼。<br>“这大块的，母亲大人吃”<br>“一会，先给哥哥切一块，让奶妈他们也来吃一些吧”<br>皇后一边听金奴自言自语，一边慢慢的吃着月饼<br>“好吃？那就多吃一些，母亲大人也要打起精神”<br>金奴也为自己准备了一小块，放在碟子上，是蛋黄馅的，小狗也摇着尾巴，扑向撒在地上的残渣<br>“我去泡茶喽？有舅父大人给的桂花茶”<br>可是金奴并没有得到回应<br>盛月饼的碟子摔在地板上，皇后口吐鲜血，倒在床上</p><hr><p>皇宫，依旧像什么都没有发生一样，赏月宴依旧继续着<br>只有皇后寝宫被封锁，金奴在后宫的地下室里接受着调查<br>一群面容恐怖的官员，围着金奴，因为是公主，所以她不会被绑起来，被严刑拷打，可是，金奴握紧裙子，紧紧咬住的嘴唇上，渗着鲜红的血<br>“这月饼，是那个侍女月仙给的”<br>金奴，拼命的忍住眼泪<br>月饼有毒，就连舔了地板上豆馅的小狗也死了<br>皇后马上从房间中被抬出，永远也不能再见了<br>“母亲……!”<br>房间中一片昏暗，谁的脸也看不真切，为什么，父亲和哥哥都不在，金奴恨恨道。一个官员说了<br>“侍女月仙，今早突然患病，请假回家了”<br>调查的官员们，像玩偶一样，缄默不言<br>皇帝疏远皇后，慕容贵妃垂涎着皇后的位子，皇帝被大臣和林灵素所迷惑，被进言皇后可是个不怎么吉利的人，不管“真相”是什么，“朝廷的丑闻”是不存在的<br>要金奴为此死掉，可以说是平息事端的上上策——不过，年幼的孩子怎么可能毒杀自己的母亲<br>“那么，该怎么办”<br>官员们可不是因为寻找那个所谓的“犯人”而感到苦恼，就在这时，悄然无声的地下室门开了，走廊的明灯，好像太阳一样刺着金奴的眼睛，一个高个子的男人，就站在着光芒之中<br>“这是——王都尉王大人！”</p><p><img src="/upload/image6.png" alt="upload successful"><br>官员们都礼貌的低下了头，是母亲的哥哥，也是她唯一依靠的舅父，可是，出自那个人的言辞，更是打垮了金奴<br>“是陛下下达了秘密处理的命令，公主太年幼，她说的话不可信。皇后……是由于生病后太过悲观，自杀而死的，发丧避开佳日，不要让人们感到不安，还有，公主马上出宫，入寺为尼”<br>“舅父大人”<br>第一次，金奴叫出声来<br>“母亲，就是被谋杀的，那毒月饼，是月仙……”<br>“金奴！宫女月仙，黄昏前就在家中死了，我已经确认过了，今天晚上，不可能在宫中”<br>很快，金奴被拉入轿子中，离开皇宫。深夜，满月，在天空的最高处闪耀着。<br>金奴茫然的坐在漆黑的轿子中，叔父透过窗格，用谁也听不到的声音低声私语道<br>“你得忍耐！先保住性命再说”<br>他也不知道真相，但是他知道，只要金奴在这宫中，就会有危险<br>（今天晚上突然返回来，真的是天助啊）<br>皇帝依旧享受着慕容贵妃奉上的美酒，沉醉在林灵素的幻术中，听闻皇后突然死亡，也没做声，只是默然的将此事交给林灵素处理<br>金奴被装上小轿子后，顺着高墙掩映的小路，逃离了皇宫<br>银木犀的香味漂浮在黑暗中。她哭做泪人<br>（杀死母亲的，到底是谁）<br>马上，香味消失了，已经置身七里之外了<br>（我所看见的月仙，究竟是谁）<br>但是，另外的味道，那股傲慢的香味，飘进了轿子中<br>“这是在哪，又要去向何方”<br>“这个围墙的对面是——贵妃的花园”<br>“这样的话，应该开着那种红色的菊花，谁能帮我摘一朵”<br>不久，一支红菊从窗子间隙递入<br>这花，就是慕容贵妃头上装饰的那种红菊，有一种让人成瘾的香味，也是从那“月仙”身上散发出的味道<br>从皇宫后门出来后，天地忽然宽广了。可夜空明月依旧。小小的公主，在黑暗中消失不见</p><p><img src="/upload/image7.png" alt="overwrote existing file"><br>此后，那让人成瘾的红菊花瓣，犹如鲜血般一点点的扩散着</p><p>与此同时，满月在西边的荒野上。也一样闪耀着<br>在月下不声不响赶路的，是一个瘦削的剑客，不年轻，也不年长，那脚步，沉重但从容。<br>手中，握着一把伴随多年的剑<br><img src="/upload/image8.png" alt="upload successful"><br>他，是个逃犯，已经逃了很长时间了。<br>被青白色的月光照射在脸上，也还是面无表情。唯一的目标不过是这么一直走下去——就像这样，一种无声的意志<br>只有这一次，他仰望夜空<br>苍白的月亮，在天空中最高处放着光芒，那清澄的月光中，映射着一张无比怀念的面孔。那张坚毅的脸上，有了希望<br>继续走着<br>一群大雁穿过月光<br>热血，在剑客的胸膛里涌起<br>我还有能看这轮明月机会呢<br>一个孤独，没有希望，没有家人，没有朋友，甚至连名字也没有的“逃亡者”<br>（我真的是无罪的吗）<br>无罪，却被掌权者陷害，仍然被通缉的不幸的人<br>在这午夜的荒野上，望着明月的那个姿态，不就是我罪的姿态吗？<br>（不该停下来吗？）<br><img src="/upload/image9.png" alt="upload successful"><br>剑客止住脚步，拔出剑来<br><img src="/upload/image10.png" alt="upload successful"><br>银色的月光散在刀刃上<br>下一秒，一刀切向藏在岩石阴影中的刺客。这个刺客不是一个人。剑客又摇摆不定的走了很长一段路，无数的眼睛看着这个男人<br>“果然还是不行啊”<br>一个人说道<br>月光中，无数的剑刃反射着月光，谁的脸也看不清楚<br>“我们可是从华州一路追过来，这一带可是到处在悬赏抓拿你”<br>“谁指示你们的？”<br>每个声音都带着杀气<br>“你的项上人头值三千贯，另外，那位大人还说，还能提拔我们，闹个禁军将校当当”<br>“一个小小教头的脑袋，竟然能值那么多钱，我在东京做了什么，上了他老婆不成？”<br>剑客的脸上，依旧面无表情<br>于是，又有声音从黑暗处传来<br>“让道，垃圾们”<br>隐藏着的人们离开杂树林，为那个男人让路。那个男人敏捷的挡住剑客的去路，低声说道<br>“你可是杀了上千的要抓捕你的人，那些人的兄弟，朋友都在这，因果报应，你是跑不掉的”<br>无数刀刃闪闪发亮，在满月的照耀下，倒影在地上<br>“明天，这里就会多一座墓碑，就是你你罪人王进的墓碑”<br>剑客手拿的剑鞘，吧嗒，掉在荒野的沙地上<br>以此为号，这场月下的死斗就开始了<br>满月之光照耀着一切，在苍茫的月光下，刺客扎在一堆，是一百人，二百人，还是三百人？<br><img src="/upload/image11.png" alt="upload successful"><br>剑客向着刺客们的刀刃方向前进，手脚麻利的斩杀挡住去路的敌人，但敌人的数量并没有减少，反而像潮水一般淹没前进的路，剑客的手腕，肩膀，额头都流着血，尽管这样，剑客也没有停下前进的脚步<br>不知不觉，剑客已经杀到了河边<br>在月光照耀下泛着银光的河流，蜿蜒前行<br>月光下，河流畔，男人们在持续砍杀着，死的人倒下了，力竭的人也倒下了<br>急促的呼吸声，刀剑碰撞的声音，脚踩在沙子上的声音一直在继续着，这是永不结束的战场<br>月光在河面凌乱，波浪在银色中闪耀着<br>剑客击败敌人，开辟着前进的路——那瘦削的背影，逐渐消失在敌人身上<br>真正的静寂到来了<br>河畔横尸一片，无人生还<br>黑暗中，依旧有呼唤某人的声音，但那是风浪的声音也说不定</p><p>十年时光，如白驹过隙，转瞬即逝<br>大宋依然繁荣着，国都东京汴梁充满了烂熟的光辉，然而，政治腐败，朝纲霍乱，内忧外患不断，亡国之种，也开始萌芽<br>这十年间，光和黑暗交错前进，向着灭亡走去<br>世间叛乱不断，人们为私欲狂奔着——没人理会黑暗中消失的公主，也没人理会波浪间奔走的剑客</p><hr><p>“——史进兄弟！！”<br>听见招呼的声音吗，年轻人回过头来<br>太阳闪耀着<br>天高地广，太阳如火团刺眼的燃烧着，这是夏天</p><p><img src="/upload/image12.png" alt="upload successful"><br>“啊”<br>年轻人回应着——“九纹龙”史进举着一只手。背后，将水面淹没了的芦苇在清爽的风中摇曳着<br>招呼他的，是一个鼻子尖有伤的年轻人<br><img src="/upload/image13.png" alt="upload successful"><br>“不去吗，史进兄弟，已经开始了”<br>“拼命三郎”石秀抱着胳膊，扬起的下巴犹如山峰一般。远处传来梁山山脚下打麦的声音，年轻人训练叫喊的声音，枪棒敲击的声音<br>“林教头的棒法班吗——？”<br>史进抽出用芦苇叶子做成的小笛，轻轻的吹着<br>“我就不去了，那个对我来说根本不算‘授业’”<br>“是这样吗？”<br>“你平时的伙伴，那个脸色很不好的人怎么了”<br>“杨雄身体不太好，在房间休息了”<br>石秀愉快的享受着从湖畔吹来的清风<br>“感觉有些无聊了？”<br>史进把小笛扔向波浪间<br>“咣咣”，枪棒相互撞击的声音在山中回响着，穿过湖面在风中穿梭着<br>史进和石秀肩并肩站着<br>“一同前去的话，你就不会感到无聊了”<br>两个年轻人一起在湖边走着。今天也是“梁山泊”平和的一天</p><p>十二世纪初，北宋正是盛世<br>在中国大陆的东部，山东地区，梁山这个孤峰的山脚下，散步着茫茫的湖沼，大小水路错综复杂于期间，生长着茂盛的芦苇，好像要把外人引向不为人知的深处一般，不过，也并没有什么外人。<br>梁山山脚下的水洼——正是这“梁山泊”<br><img src="/upload/pasted-20.png" alt="upload successful"><br>在那里，聚集着在大宋繁荣的阴影之下产生的人，为首为天下人所称颂的山东“及时雨”宋江，在此领导着各路草莽英雄</p><p><img src="/upload/pasted-21.png" alt="upload successful"><br>年轻的侠客“九纹龙”史进。中秋月下，因侠义之心，烧毁家宅，逃离故土，百转周折，最终入伙梁山<br>还有挥舞那六十二斤水磨镔铁禅杖，不念经，不参禅的大“花和尚”鲁智深<br><img src="/upload/pasted-22.png" alt="upload successful"><br>曾经的八十万禁军枪棒教头“豹子头”林冲<br><img src="/upload/pasted-23.png" alt="upload successful"><br>无双的剑客“青面兽”杨志<br><img src="/upload/pasted-24.png" alt="upload successful"><br>神算鬼谋的“智多星”吴用<br><img src="/upload/pasted-25.png" alt="upload successful"><br>呼风唤雨的叛逆道士“入云龙”公孙胜<br><img src="/upload/pasted-26.png" alt="upload successful"><br>打虎壮士——武松<br><img src="/upload/pasted-27.png" alt="upload successful"><br>大宋第一神射手“小李广”花荣<br><img src="/upload/pasted-28.png" alt="upload successful"><br>手持双板斧，狂暴的“黑旋风”李逵<br><img src="/upload/pasted-29.png" alt="upload successful"><br>水之子“浪里白跳”张顺<br><img src="/upload/pasted-30.png" alt="upload successful"><br>统率连环马铁骑的“双鞭”呼延灼<br><img src="/upload/pasted-31.png" alt="upload successful"><br>在世风日下的时代，众星闪耀，豪杰辈出<br>江州战<br><img src="/upload/pasted-32.png" alt="upload successful"><br>祝家庄战<br><img src="/upload/pasted-33.png" alt="upload successful"><br>另外，青州，<br><img src="/upload/pasted-34.png" alt="upload successful"><br>华州，<br><img src="/upload/pasted-35.png" alt="upload successful"><br>在曾头市接连不断挑战强敌，愈战愈勇的河北俊雄“玉麒麟”卢俊义<br><img src="/upload/pasted-36.png" alt="upload successful"><br>武神“大刀”关胜<br><img src="/upload/pasted-37.png" alt="upload successful"><br>名震天下的英杰们接连不断的入伙梁山<br>初代头领晁盖不幸亡于征战，不过，宋江继承其遗志。因宿命而联结的人们，在战斗中相知相遇<br>“替天行道”<br>因大义而集结的豪杰们，将在这片浑浊之世开天辟地<br><img src="/upload/pasted-38.png" alt="upload successful"><br>聚集在“替天行道”杏黄大旗之下的英雄豪杰，共计一百单八<br>他们在这水泊梁山安营筑寨，兵多粮足<br>而在朝廷那边，“宋江等一百零八贼寇，在山东梁山泊横行霸道”——是大宋的“四寇”之一</p><p>“九纹龙”史进和“拼命三郎”石秀正是名列这一百零八好汉之中<br>两个人优哉游哉的去向了湖畔<br>初夏，是作为水乡的梁山泊最美的季节<br>天空湛蓝，水草丰盛，湖畔，芦苇和柳树随风摇曳。水中小鱼跳出水面，抓住小鱼的水鸟一飞而散，女人们在岸边洗洗涮涮，穿着肚兜的小孩把小鱼驱赶到水浅的地方。捕鱼归来的父亲的鱼筐里，装满了肥硕的鱼<br>他们，本是这周遭的百姓，因天灾，苛政，重税，官逼民反，最终逃向梁山泊，在这没有收黑钱的判官，没有剥削的地主<br>在金沙滩的岸边，“工作”归来的汉子们，正在从船上卸下战利品，船上，粮草堆积如山，亦有牛有猪<br>这一行人打着“清风山”的旗帜，“锦毛虎”燕顺站在船头，指挥着手下<br>石秀打了招呼<br>“大哥，这是大丰收啊”<br><img src="/upload/pasted-39.png" alt="upload successful"><br>“可不是，那石河镇的‘蒲千石’素有贪得无厌之名，今日搞了他一手，一打开仓库，你猜怎么着，那么多的物资，今晚可以大宴一场了”<br>梁山泊的田地有好收成，鱼产也很是丰饶，并且，也通过这种方式来积蓄物资<br>梁山一百单八将集结不过三年，梁山泊一片和平，保持着独立，屡次击退官军的讨伐，近来也无战事，百姓安居乐业，梁山泊也慢慢积攒着财力兵力。这“黄金三年”，每天继续着<br>大家丰衣足食，往来皆友人，没有谁能阻止这些美好日子<br>史进也想对谁打声招呼，就回过头来。一条令人清爽的水平线直到视野尽头，好生一幅美丽，宁静的景观。<br>史进也尽情的享受着着晴空的风，偶然，他感到了什么东西在嗔怪似的</p><hr><p>拂水而过的风令人身心愉悦<br>褪去上衣，史进身上那腾空而起的龙在初夏的阳光中闪耀着，这“九纹龙”的绰号正是来自他身上九条龙的刺青，这刺青是他的父亲在他十五岁母亲病故的那年专请有名的刺绣师刺出的，历时半年。史家养不起教授史进武艺的那些云游武术家，史太公也是因为史进一味专注练武感到悲观，落下了病。没几年后，史太公就去世了。<br>虽然如此，史进也并未太过悲伤，这大概是因为他与生俱来的性格和身为习武之人的气魄使然<br>“不练了，歇息一会”<br>史进在树荫的石头下坐下了<br>放眼望去，士兵们都满腔热血的挥舞着棍棒<br>“一个能打的也没有吗？”<br>史进心里，武艺是排在首位的，他追求强大，不是领军破敌的那种强大。自己武艺能高明到什么地步，谁又是最能打的，这才是史进关心的<br>入伙梁山的汉子们，那都得会两手功夫。这是梁山好汉的基本要求。因为不知道官军什么时候过来讨伐，他们来了，得干跑他们啊。这其中的一些年轻人成为梁山军队的中坚力量，第一个训练他们的，是“豹子头”林冲——曾经在大宋的禁军中担任枪棒教头的男人<br>枪棒，是大宋第一的武器，是远超其他兵器的<br>梁山的汉子们，最开始是在林冲那里学习枪棒功夫，这之后，就会到“金枪手”徐宁——曾经的禁军金枪班的教头——学习枪术。如果年轻又有些功夫，就可以接受步兵训练，成为军人，若是会弓术就会加入“小李广”花荣的部队，特意选出其中的佼佼者成为骑兵，由“病尉迟”孙立和“井木犴”郝思文来传授马上战斗的技术，然后再分配到各部队<br>虽然有很多头领带领练兵，但是士兵们最为崇敬的“师父”，只有“豹子头”林冲<br>林冲有两员副将：“病大虫”薛永和“打虎将”李忠。薛勇出身武术世家，功夫了得。李忠也是习武之人，以前还教过史进棒法，也有林冲麾下“白衣兵”的身法。所谓“白衣兵”是专挑擅使枪棒的士兵组建而成的，他们对棒的打法，手脚的位置，都很精通<br>上百士兵齐挥棍棒的场面很是壮观，史进看的也是入了神<br>林冲教授的棒法很基础，但不管是多么基本的简单招式，林冲都能表现出那种勇壮之美，几招连下来就如行云流水一样轻松自如<br>在士兵们心中，林冲那可是神一般的存在，他们都卖着力气的模仿林教头，可单是这样，还是不够的。李忠和薛永拍着士兵肩膀，把他们按照水平分成三组<br>这就算完成了士兵的“选拔考试”，二等三等的士兵们被分到各个步兵部队，在各个头领的带领下，进入实战的“最终训练”，一等的士兵是有望成为军中的小头目的，这其中很多人都是老兵，积累了不少战斗经验，他们对自己的武艺很自信<br>不知不觉，太阳倾斜下去了，黄昏的云彩开始在天空闪耀<br>“那么——”<br>薛永把大家集结在林冲面前<br>“现在开始模拟实战训练，一个接一个上前”<br>壮汉们脸上露出惊讶的表情<br>“难道林教头要出手了？”<br>汉子们兴奋的结结巴巴<br>“豹子头”林冲手持棍子站在他们面前<br><img src="/upload/pasted-40.png" alt="upload successful"><br>单是这么站着，就很彰显林教头干净利落的身段<br>首先，一个对自己有信心的后生上前，出拳要攻正面，只一下，就被打了下去，又有个人上前，只是轻碰一下，就下来了。又有个大汉上前，倒是能吃下两三棒，不过如此。没有人能坚持到最后<br>林冲认真的战斗着，淡然的取得胜利，他也试了了二等，三等班，即便败者怎么向下滚落，也没人会笑。挑战林冲，虽败犹荣<br>在炫目的晚霞中，只有木棒敲击传出的清脆声响<br>不久，金色的星星闪烁在地平线上<br>跟全体都比试过后，林冲轻轻的行了个礼，并从其中挑选几人作为自己的亲兵。林冲麾下的白衣军，是梁山泊年轻人向往的部队，向林冲讨教时，无论是谁林冲会悉心指导他们<br>就在林冲要离开时，一个男人出现在林冲面前<br>正是史进</p><p>薛永想要说什么，被李忠阻止了<br>史进举起棍子站了起来<br>然后，当和对峙的林冲对视的时候，史进突然感到背后一阵刺痛、、<br>下一瞬间，林冲的棒子猛的袭来，击中前胸，史进硬扛下了，不过，当被第二棒击中时，史进已经感觉身体轻飘飘的要倒，第三下，史进躲过去了。<br>以前，史进可是擅长十八般兵器，可以说是梁山泊数一数二的高手。那朝气蓬勃的九条龙正是他擅长多家武艺的象征，这是他融会贯通各门武艺的结果<br>且说这林冲，无论对面如何，他是一点也不乱，冷静的预判着对手的下一步行动，就这样，史进有些招架不住，，不能发挥自己所长，一直被动防守<br>李忠嘟囔道<br>“这史大郎果然有些手段”<br>薛永的表情有些奇怪<br>“那还不是正在被打压”<br>“这世上有几人能把林教头逼得如此凌厉，呀，坏了坏了，大郎出破绽了”<br>史进急于取胜，他把棒子向上甩去，用力一棒。那林冲又怎能是等闲之辈，林冲接下了他这一棒，他的动作轻快，史进完全没有突破的机会，林冲向下一踏，棒子就沉吟起来，下一步就是——刹那间，史进条件反射的使出了“那一招”<br><img src="/upload/pasted-41.png" alt="upload successful"><br>但见出手之棒，犹如箭一般袭向林冲前胸，林冲把棒子一转，史进的棒子稍微减了些气势向着林冲侧腹部袭来，林冲一点也不慌，往后一个大撤步，只见林冲向着史进鸠尾（腹部上边那一部分，亲生经历，打下去巨疼）处猛地攻了过去<br>喘不上气了<br>眼前一片金星，史进倒在地下，看着那血色一般的晚霞</p><p>史进一睁眼，发现自己在“神医”安道全的医务室<br>梁山泊的医院是一个很大的建筑，草药的气味甚至已经渗透到了柱子里。史进呆呆的望着天花板，肚子疼得厉害，呼吸也有些困难<br>在旁边的椅子上，林冲也在接受治疗<br>安道全注意到了史进醒来，盯着史进说<br>“你得谢谢林教头，要不是他，你早凉了”<br>安道全在林冲被史进打中的侧腹部贴了膏药，缠了绷带<br>“肋骨有裂痕，得静养半个月”<br>听了这话，林冲依然泰然自若，他把脸转向林冲，小声说道<br>“——‘夕阳流星’”<br>史进起身看向林冲<br>“你知道这招？”<br>“我只见过一次，在东京的禁军校场”<br>史进突然觉得很相似<br>他面前的林冲和“那个人”，不是外表，而是某种东西非常相似<br>“史进，我且问你，你是怎么会这一招”<br>对于林冲的提问，史进不禁在记忆中眩晕<br>（已经十年了吗）<br>沉浸在记忆中，史进不禁愕然<br>（怎么就忘了呢）<br><img src="/upload/pasted-42.png" alt="upload successful"><br>那个人<br>那个满月的夜晚</p><hr><p>月亮照耀着梁山<br>“王进教头曾经是我的师父，虽然时间很短，但是没有他，就不会有现在的九纹龙”<br>这是史进的真心话，林冲静静的点点头，对于“王进”之名，林冲也是无法用语言来形容<br>“王教头不是被定为罪人了吗？”<br>“我知道，我曾救下因为悬赏通缉而逃命的王师父，把他藏在家中，这已经是十年前的事情了”<br>“——是这样啊”<br>林冲把安道全煮好的药汤端到嘴边，这热气腾腾的汤药也让林冲想起了往事，他语调自然的说道<br>“王教头的棒法自成一派，由于没有接班人，我还以为王氏棒法就此断绝了，不成想今天又见到了‘夕阳流星’，你是他的继承人吗？”<br>“不是，我也不过是学到了一些技巧而已”<br>说话这档，听见门外传来了意想不到的人的声音，林冲和史进向门看去<br>“原来是这样，那可真是不可思议的缘分啊”<br>不知不觉，宋江来了，手上提着个水果篮，大概是探病的礼物<br>“那王教头，是个怎么样的人呢”<br>宋江坐在椅子上，向林冲问道<br>“他和我一样是禁军的枪棒教头，不知怎么的，惹了我们上司，也就是那禁军的太尉高俅，王教头觉得事情不妙，就逃了出来，高俅更加恨他，还故意捏造罪状，悬赏通缉他”<br>王进被高俅的爪牙严密的监视，帮着他逃跑的是林冲的师父，后来成为林冲老丈人的张澈教头，张教头很是惋惜王进的枪棒武艺<br>“在这之后……又怎么样了？”<br>几年之后，谁也没想到林冲也陷入了同样的境遇，当年他还觉得带着老母逃跑的王进很可怜，可没成想没有逃亡的自己却失去了一切<br>尽管这样，林冲还是为王进平安无事感到高兴<br>“大郎，王教头后来怎么样了？”<br>“他当时藏在我的家中，但是后来缉拿文书到了，他不想给我找来麻烦，就离开了”<br>宋江好像深受感动<br>“你去找王进先生，把他拉上我们梁山如何？”<br>宋江吩咐手下去叫“石将军”石勇，很快，石勇和吴用就到了<br><img src="/upload/pasted-43.png" alt="upload successful"><br>“石将军”石勇——位列梁山泊第九十九位，原来是个彻头彻尾的赏金猎人，为了获得高额的赏金，至今手上还有全国通缉犯的名册<br>“众所周知，王进可是很值钱的”<br>石勇是个沉默寡语的男子，但是他带来的情报却各种各样，甚是详细，史进看了看他手上拿的几张通缉令，有些写着“被捕”，有些写着“已死”<br>“怎么，你也想要抓捕我师父？”<br>“我可是从来不抓“无罪之人”的”<br>“你什么意思？”<br>“因为没人知道他为什么会被高俅记恨，还要给他捏造罪名”<br>“师父啊”<br>史进差点说不出话来，他也不知道怎么用语言来表达<br>王进瘦削的背影，就消失在荒野间，谁又清楚他背负着什么呢<br>所以史进至今没有跟任何人谈起王进<br>可是，这梁山泊，宋江，林冲，却好像知道师父的苦衷一样<br>史进想起了离别之际王进的脸孔<br>一直躲避重金悬赏的王进到底犯了什么罪，史进也没有问过，王进也没有说过，就在史进送别王进离开史家庄的时候，王进把这个“秘密”告诉了他<br>“这通缉令上的罪状就是扯淡，师父跟我说过，你们知道师父怎么说的吗？”<br>所有人都在等待史进的下一句话<br>“师父告诉我，说‘这就是被无赖盯上了’”<br>宋江似乎明白了，而林冲微微垂下双眼<br>“那个‘无赖’，就是……<br>就是当今圣上的宠臣，禁军的首领“高俅大人”，那厮本是东京的一个泼皮无赖，这个公明哥哥也是知道的，他擅长踢毬，正合着那“风流天子”心意。以前那厮还是个泼皮的时候，曾带着手下几个无赖当街欺负一个老人，被我师父撞见，为了制止，就揍了这“高毬”一顿，不成想这厮日后成了太尉，一看手下禁军官员，看见有我师父，就想着报当年的仇，报复一下，在高俅上任第一天时，那时师父身体有病，请了病假，这厮就以怠慢职务为借口要杀人，<br>就是这样”<br>宋江下了一跳<br>史进屏住呼吸，倾听着窗外的虫鸣声<br>“是的，就是这么点破事”</p><p>夜半，窗外蝉鸣<br>叫了一会，声音中断了，接着传来湖畔海浪的声音<br>石勇不仅有官员的通缉名录，还有多年来收集到的各种各样的小道消息<br>“王进的消息，在十年前就断绝了，我在当赏金猎人的那阵，也听说王进在中秋之夜和百名刺客战斗，遇害身亡”<br>“我不相信，凭借师父的能耐，他肯定还活着”<br>石勇把通缉文书放下，又拿起一个巴掌大小的小册子，这上面写的是一些未处理的事，不可思议的事，往来全国的“可疑人物”的信息<br>虽然名字和相貌都会改变，但只要把这些小情报整理好，就能发现点东西。石勇在这么多的情报中发现一个男人<br>“从几年前开始，有个人在少林寺教授武术，有传闻说他来历不明”<br>“少林寺啊——在河南，离华州很近”<br>少林寺自古以来是因武术而闻名的古刹，能在那里教僧人们武艺的，肯定不是一般人<br>“没错，那就是他了”<br>史进从床上跳起来，顺手超起旁边的棍子，这时，吴用止住了他<br>“等会，你忘了你也是个通缉犯了吗，咱们得准备准备，安排好同行的伙伴，也好有个照应”<br>“那就麻烦吴学究了”<br>那声音，被空中绽放的烟花声掩盖了<br>梁山上，凌振放起了烟花，这是最近刚刚改良的新型烟花<br><img src="/upload/pasted-44.png" alt="upload successful"><br>宋江等人靠到床边，吴用数了数空中大花的颜色<br>“凌振说要做“七彩烟花”，这才三四种颜色”<br>尽管如此，梁山的夜空不断上升，被那耀眼的光芒填满<br>烟花停罢，吴用回头一看，史进已经不见了<br>林冲看向门的方向<br>夜风，正慢慢吹着敞开的门</p><hr><p>史进驾着小船，在星空下穿过湖泊<br>岸边有个小酒肆，房檐的灯笼下，有个脸色难看的汉子正在挥着团扇<br>“张青兄弟，智深师傅在不在”<br>汉子用团扇指了指后面<br>“你悠着点，他不太高兴”<br>这湖边的酒馆，是“菜园子”张青和“母夜叉”孙二娘两人为梁山泊开的，凉风吹过的庭院中也有桌子<br>史进的好友破戒僧人鲁智深站在那里<br>旁边的桌子上放着他心爱的六十二斤大禅杖，在他的脚下，张青的宠物兔子吃下一口青菜<br>“可是很少看见师傅一个人喝闷酒”<br><img src="/upload/pasted-45.png" alt="upload successful"><br>史进一出声，鲁智深就把空酒壶放在桌上<br>“喝闷酒？哎”<br>张青又新上了一坛酒，鲁智深也没招呼史进，史进拉把椅子，随意的坐下了<br>“我说你在这喝了多少酒啊，兄弟我要远处走一遭，本想请师傅一同前去”<br>也不知道是不是听见了史进所言，鲁智深眼睛盯着桌子上的信，那是一张皱巴巴，已经脏了的信。<br>“哦？师傅也会写字？”<br>“洒家写的字还有人夸奖过呢”<br>“兄弟我服了”<br>鲁智深挠了挠，把放在桌子上的信揣进怀里<br>“真不巧，洒家也要出远门”<br>“要是西边的话，咱就一起走吧”<br>“对不住了，洒家是急事，得坐船去”<br>正要问去哪里时——史进注意到梁山那边有一只船正向酒肆驶来，是吴用和朱武派来的“追兵”吧<br>“这样吗，师傅，祝您旅途平安”<br>史进从马厩中胡乱的牵出一匹马，闪身上马，向西奔去，辽阔的天空下，道路连绵不断的展开了<br>史进的身体好似恢复青春一般，似乎感受到了十几岁时吹过的风。从家里出来的时候，为了追求更广阔的世界而离开少华山的时候<br>“师父，我来了！！”<br>史进的声音响彻云霄<br>“啊……他走了。”<br>张青拿着钱包追了过去，但史进的身影早已消失在夜道的另一边。<br>“连盘缠都没带就去了。”<br>鲁智深一把抓住了蓝色的钱包。把钱包塞进怀里，喝完剩下的酒站了起来。<br>“师傅，你去哪里?”<br>鲁智深扛着禅杖走出了店。星空染着湖水。<br>“搞事情去——到时候你们就知道了!”</p><p>跟着史进而来的是薛永和李忠。他们去探望林冲和史进时，在那里受吴用之托把史进带回来。但当他们抵达张青的店时，史进早就不在了，甚至鲁智深也走了。<br>薛永看着路的另一边，向李忠询问了他今天一直在想的事情。<br>“李忠啊，你说好的师父是什么样的师父?”<br>“为什么要问我这种事?”<br>虽然李忠没有做答，但薛永总归是有一点感觉的，李忠也曾想自己开个武馆，可是现在却成了林冲的副将，他很明白自己水平有限<br>“好的师父，会让徒弟“超越界限”，让徒弟达到自己达不到的高度”<br>李忠扶着有些疼得腰<br>梁山上繁星闪烁<br>“但是总有人会毫不犹豫的朝着自己认为是极限的地方冲去，这样的·人，会超越师父达到什么样的境界？”<br>李忠向着岸边的船走去<br>“徒弟也好，师父也好，都会很不容易吧”</p><hr><p>他睁开眼睛，又看到了陌生的天花板。<br>(这又是哪?)<br>史进揉了揉惺忪睡眼。推开吊顶，站起身来，想起来自己找了个小旅馆歇息下了。<br>(想起来了)<br>史进离开了长久居住的梁山泊，一人向西——奔着少林寺去了。<br>史进打开窗，吸入清晨的空气。<br>街边的旅馆早上开门开的早。面向的店面前，有很多游子单的身影，也是一番车水马龙的景象。房间下方的厨房里飘来一股香喷喷的油味。拉面的声音也很吵。<br>“这种风的味道，已经好久不见了。”<br>宋代的行政划分首先是“路”。史进很早就驰行在了广为人知的“京东西路”。由于西边是具有警备森严的都城东京开封的“京畿道路”，所以特地避开北边走的“西北西路”。<br>梁山泊的东西两侧风景差距很大。<br>山东有很多岩山，山清水秀。往西走，大地变得干涸，会有沙尘暴吹来。<br>由于农田中有很多建设在江边高地的梯田，人们的衣着打扮也非常朴素。还有很多村民赶着家畜。<br>这是一场自由自在的旅行。史进饿了就吃困了就睡，有时早上也和一群陌生人喝酒，也会和一些人发生争执。虽然这样，但路上一切都很愉快，但进入“京西北路”时，情况却有所不同。<br>“京西北路”是西京河南——古都洛阳所在的府。<br>虽然史进的故乡在更西边以京兆府、长安为中心的“永兴军路”，但这一代早已形成了类似的风土人情。方言的口音，吃饭的口味，甚至刮过的干燥的风都让人怀念。<br>(哎呀，遇上麻烦了。)<br>史进没盘缠了。他的钱都在梁山泊，他本来就是一个没有隔夜财的男人。盘缠都花在了一路吃喝和酒水上，又受旅馆的店家劝诱，昨天晚上还赌了两把。<br>还是在梁山泊的感觉好啊，这的浊酒喝的他脑壳疼。<br>史进洗了脸，想吃点素面，就走到饭厅<br>“过来，先把住宿费结了”<br>“多少钱”<br>史进大口大口的吃着端上来的面条<br>“我可没钱了”<br>“你说啥”<br>“没什么”<br>在店小二的招呼下，店家掌柜板着脸过来了<br>“你说你没钱，还在这吃的这么爽”<br>“还是托您的福雇了个好厨子，看您生意兴隆，挺好挺好”<br>“这几天，吃霸王餐的人可是不少，生意是真好”<br>“怎么还有这么过分的家伙！”<br>“少废话，给钱，不给钱就把马棚子里你那匹瘦马给我”<br>“那马可值钱了，你打算找我多少钱”<br>“那么瘦的马，你还敢管我要钱，你说说你，昨天晚上的餐费，住宿费，还有酒钱，再加上你打碎的盘子，毁坏的窗户，你说说得多少钱”<br>“这样啊，那我就不管你要钱了，那马便算作你的了”<br>史进吃完面，背着小包袱出了客栈，向马棚子里一看，只看见一个小和尚正在给马喂草料<br>“真是辛苦你了”<br>告别之前的马后，史进沿街向西行<br>“这么走，也挺舒服”<br><img src="/upload/pasted-46.png" alt="upload successful"><br>外面是铺满黄沙的街道。路旁种着高耸的树，形成的树荫正好保护着旅人不受阳光的侵袭。<br>史进一边扛着棒子，一边背着小包袱，走在街道上。<br>这一路上都是干涸的黄土。<br>在被太阳晒得沸沸扬扬的烈日下，道路蜿蜒曲折地向前蔓延<br>今天太阳也很刺眼，没走多久，嗓子就已经干了。虽然路上有店家，但是没有钱。也没有水井或看起来能喝口水的河。史进一边嚼着干枯的酸叶茎，一边耐心地走着。<br>(总会有办法的。)<br>在正午后，史进在远方找到了茶座。<br>绿色的小旗在风中摇晃，好像招手一般。</p><p>店面出乎意料的大，二楼的房间已经坐满了，酒馆的桌子也已经占满了一半左右，看了看，都是当地的居民，但是奇怪的是，他们大多是道士，或者打扮成“道士“的样子<br>（那么这里也开始传播“道教”了？）<br>道教以中国神仙思想为基础的神秘宗教，据说如果坚持修行就能成为长生不老的仙人，由此抓住了人心。近年来，皇帝沉溺于神仙修行，也成为了道士林灵素的信徒。所以全国各处都优待了道士，而官吏和掌权者也为了出人头地而毅然入了道教。<br>(我们的公孙先生要是知道了，不得气死)<br>史进坐在靠边的窗户的座位上。<br>由皇帝发起的道教之乱将大臣、官吏、富人一起卷入，现在扩散到了平民和乞丐当中。在路上，他亲眼目睹了道教的发展状况。成为道士就不会有温饱吃穿问题，乞丐都要扮成道士要饭，而自己置身事外。戴着黑头巾进内。这里谁都能拿钱买饭。既能喝酒，戒律也不像佛教那样严格。<br>实际上，聚集在店里的道士们也在桌子上摆满了酒肉。<br>史进自己也点了肉和酒。道士们喧哗地叙说道教是多么多么好。<br>“总之，人还是得活着的时候享福。死后到极乐世界有什么东西。是有酒，还是有美女?”<br>史进望着窗外，喝着冰镇的酒。<br>(如果真这样的话，智深师傅可是糟了罪了)<br>史进几杯酒下肚，道士们依然在那里吹嘘着。<br>“听说，已经有七个高僧拒绝改宗，拄着拐杖祭拜，大概是奔着喜庆的极乐世界去了吧。”<br>对于下流的笑声，史进冷眼旁观。<br>他不由自主地放下杯子，一个年轻的尼姑进了店。是个二十多岁的美丽尼姑，身材苗条。即使在灰色僧衣之上，也能窥见丰满的胸部。<br>就在这时，喝醉的道士缠着尼姑。<br><img src="/upload/pasted-47.png" alt="upload successful"><br>“好漂亮的尼姑啊!要是长着长发，穿着道服就更合适了。喂，咱们给她换换衣服吧。”<br>尼姑的眼睛发着锐利的寒光。史进把棒子横到道士与尼姑之间。<br>“打住，你们丢不丢人。”<br>果然不出所料，很快就吵了起来。对方仗着数量，还喝了酒。气势汹汹地向史进扑去，但胜负仅瞬时就已见分晓。史进用棒子揍昏了十几个道士。最后一个人站在尼姑旁边，呆呆地望着同伴的倒地。就在史进与尼姑的视线交汇的一瞬间，这个道士被尼姑的念珠打破额头，赶紧溜了。<br>“彼此彼此。”<br>“谢谢你的好意。”<br>尼姑拿起倒在地上道士的衣服，擦了擦念珠上的血<br>“不用客气”<br>“我对管闲事没什么兴趣，不过你要是尼姑的话，对寺院应该很了解吧，请问少林寺怎么走？”<br>“你还是问别人吧，我有些赶时间，真的对不起”<br>店里的骚乱无人理会，店家好像也找地方躲起来了，这尼姑也自顾自的走到柜台前，把手中的葫芦装满酒，自己也用大杓盛了一杯酒喝，然后打算离开<br>史进喊了一声<br>“那尼姑站住，我且问你，你多大了”<br>“谢谢你出手相助。”<br>尼姑头也没回的飘了出去。<br>“尼姑尼姑。”<br>史进也学着尼姑往葫芦里装了酒。一不下心把道士们的饭菜打翻在地。正想就这样离开的时候，柜子里传来了声音。<br>“客官，留步……”<br>打开柜子一看，只见店老板正抱装钱的箱子躲在里面。<br>“二十人份的酒钱、碎掉的碟子和这店的修理费用……”<br>“你自己承担吧。”<br>说完史进啪的一声关上柜子，上上门闩。他在店里翻了翻地上道士的口袋，但是谁也没有带钱包。<br>“原来如此，确实以‘吃霸王餐的’居多。”<br>史进拿起棍子，看了看抱着钱箱的店主人所在的柜子。<br>“还是掌柜的借我点吧。”<br>史进把手放到柜子的门上的时候，突然有个男人走了进来。<br>“不行啊，史大郎，这可是严令禁止的。”<br>回头向那熟悉声音的方向看去，门口站着一个年轻人和一条狗。<br>“薛永。”<br><img src="/upload/pasted-48.png" alt="upload successful"><br>“病大虫”薛永把主人从柜子里上放了出来，替史进付了钱。在薛永为那“二十人份的酒钱”讨价还价时，史进匆匆走出了店门。太白跟在后面。薛永也紧跟着向史进道了歉。<br>“对不起。朱军师说大郎是个执拗的人，要我悄悄跟着不要被你发现。到了“京西北路”盘缠就完了，这个时候要我出面帮忙……”<br>“真不愧是‘神机军师’。快回去替我夸夸他。”<br>“……我是洛阳人，所以也可以带路。这条路绕远。”<br>史进连头也不回地走着。<br>“你看，我这还有票据。可以在店里拿些盘缠。”<br>当梁山泊好汉在“工作”时，梁山泊在各处的“店”会供应好汉们马匹盘缠。但是，没有票据的“好汉”是不能帮助的。最近，冒充“梁山泊好汉”的人越来越多，负责此事的“扑天雕”李应的管制也变得更加严格了。即使是真正的“梁山好汉”没有票据也绝不帮忙<br>“大郎，你的路费怕是早就没了吧”<br>薛永拿出一个有分量的包裹要给史进。史进停下脚步，接下包裹，扔进附近的水井。<br>薛永连忙伸手去救，但为时已晚，那包裹掉进了深深的井底。<br>“没钱，不住店不就得了。”<br>“你这又是为何?”<br>“因为我想靠自己的力量，找到师父。”<br>“不过，今天连伙食费也没了，晚上要去露宿吗?”<br>“我说你就这么点钱吗?”<br>薛永指了指身后的井。<br>“钱包也在那里。”<br>两人一声不吭的走在荒野的街道上。薛永窥视着史进的脸。<br>“你生气了吗?”<br>“没有。”<br>“啊，那我把这个卖了。”<br>薛永从脖子上拿下翡翠护身符。这是他从小就带在身上的护符。薛永一家没落，唯一的遗物就只有这个了。<br>“你还是收起来吧。”<br>史进说完，又开始走起来了。太阳火辣辣的晒着。<br>薛永为了缓和尴尬的沉默，向走在前面的史进搭话。<br>“我很快就知道大郎的下落了……旅客名册上有你的名字，我没想到你还敢用“本名”旅行。”<br>梁山泊的好汉，在大宋朝廷看来是“通缉犯”。因工作而外出时，通常使用假名。<br>“大郎，你没写“梁山泊”吧?”<br>“我不是笨蛋。”<br>的确，旅客住宿手册上写着“华阴县史进”。<br>(真是个直率的人啊)<br>已经进入河南境内。没有人知道“史家庄的史大郎”“少华山的九纹龙”。<br>(果然，我还是跟不上)<br>薛永不能放下他不管，加快了步伐。这时，史进突然转过身来。<br>“哎，如果是坏人就好了”<br>“呃?”<br>“从坏家伙那里抢一手不就行了?”<br>说着，史进跑了起来。<br>“救人赚盘缠，一石二鸟!”</p><p>荒野上停着一辆双轮马车。<br>一个身着昂贵彩衣的女子，驾着那车，在座椅前还垂下了青紫色的纱幕。在尽是沙土和枯树的荒凉景色中，仿佛是开着的一团鲜花。另外，在马车周围还围了十多名身穿青衣的侍女。<br>“无礼之徒，退下!”<br><img src="/upload/pasted-49.png" alt="upload successful"><br>虽然所有的人都手持剑，但都是年轻而美丽的姑娘。她们的目光被定格在两个暴徒身上。他们蒙面遮住脸，高个子的手持大鉞，矮个子的手持锐剑。两人看起来有点能耐。一点一点地拉近和马车的距离。<br>此时，史进他们冲了过来。侍女们向他们求助。<br>“请救救我们!他们是劫匪啊!”<br>“交给我吧。”<br>马车里，是有钱的贵妇人吧。不知道是什么原因，粗心大意，的在荒野旅行。如果帮她们一手，还可以盼些酬谢金。<br>身材矮小的人马上就砍向了史进。他身体灵活，看来也是练过两下的。<br>(还年轻呢，看来是“第一次工作”吗?)<br>虽然练过两下子，可他还是经验不足。不过，弥补那个的，是充满执念的杀气。但他并不是史进的对手。史进拍了一下他手，剑就掉了下去，本打算再给他肚子一下。另一个暴徒从侧面迅速地跳出来，用大鉞一击将棒子断掉。虽说是木棒，但它是最坚硬的橡木制成。只是闪了一下棒子就断了，胸前也感到了冲击。他的力气真的很大。<br>“接着!”<br>那个最年轻的侍女猛地把自己的剑投了出去。史进在空中接住，身子向后一退。此时薛永也跟上了上来。<br>史进冲着薛永说。<br>“那个小的就交给你了!”<br>史进手持侍女的剑，与暴徒的鉞对峙。本以为剑是那侍女拿来装装样子的，不过纤细的外表只是装饰，那是一把很有分量的真剑。<br>身材矮小的歹徒也捡起掉落的剑，再次逼近马车。薛永在他面前挡了下来。<br>在史进他们与暴徒们战斗的时候，守着马车侍女们逃走了。把剑扔给史进的那个侍女跳上御座，狠狠地鞭打白马。马猛地跑起来。薛永挡住了追赶马车的劫匪。太白也加入主人的行列，咬着那暴徒的上衣不放。<br>“对方不是女人吗?你们不要欺负弱者。”<br>“欺负弱者? !”<br>“劫匪”大声怒吼后，拿下遮着脸的黑布。<br><img src="/upload/pasted-50.png" alt="upload successful"><br>眼前是一个看着十五六岁的少女，面容精致的好像人偶一般<br>此时，史进向那大个子劫匪的胸口斩去，被那人的钺柄挡下了，但还是划破了上衣，露出白花花的胸口<br>“是个女人？”<br>回应史进惊奇的是那个小个子劫匪<br>“够了！”<br>少女眉毛上扬，指着薛永<br>“都怪你，坏了我们大事，她们可都是极恶之人”</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=441835514&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一章-中秋望月&quot;&gt;&lt;a href=&quot;#第一章-中秋望月&quot; class=&quot;headerlink&quot; title=&quot;第一章 中秋望月&quot;&gt;&lt;/a&gt;第一章 中秋望月&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;font color=&quot;#FF0000&quot;&gt;原文作者 森下翠和插画作者 正子公也 
      
    
    </summary>
    
      <category term="绘卷水浒传" scheme="https://www.junglezero.top/categories/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0/"/>
    
    
      <category term="绘卷水浒传 二十周年番外" scheme="https://www.junglezero.top/tags/%E7%BB%98%E5%8D%B7%E6%B0%B4%E6%B5%92%E4%BC%A0-%E4%BA%8C%E5%8D%81%E5%91%A8%E5%B9%B4%E7%95%AA%E5%A4%96/"/>
    
  </entry>
  
  <entry>
    <title>查找（散列表）</title>
    <link href="https://www.junglezero.top/2018/02/17/%EF%BC%88%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%89/"/>
    <id>https://www.junglezero.top/2018/02/17/（散列表）/</id>
    <published>2018-02-17T02:31:00.000Z</published>
    <updated>2019-03-19T10:58:31.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="散列表（Hash-Table）"><a href="#散列表（Hash-Table）" class="headerlink" title="散列表（Hash Table）"></a>散列表（Hash Table）</h1><h2 id="一般思路"><a href="#一般思路" class="headerlink" title="一般思路"></a>一般思路</h2><p>前面讲的几种符号表的实现情况总结</p><p><img src="/upload/pasted-202.png" alt="upload successful"><br>是否有一种更快的方式来查找，插入键值对？<br>回答是有的，但是应当转变数据存储的思路<br>现在引入“索引”（Index）的概念，可以将键存入键-索引表当中（索引实际上和键有某种函数转换关系）<br>而这种转换关系就是哈希函数（Hash function）<br>这个过程所需要解决的问题是</p><ul><li>解决hash转换的计算问题</li><li>解决能够判定两个键值相等的方法</li><li>解决冲突情况：当两个键有相同的索引时</li></ul><h2 id="哈希的计算问题"><a href="#哈希的计算问题" class="headerlink" title="哈希的计算问题"></a>哈希的计算问题</h2><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><p>哈希计算应当满足三个条件</p><ul><li>一致性：等价的键必然产生相等的索引值</li><li>高效性：计算方便</li><li>均匀性：均匀的散列所有的键</li></ul><h3 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h3><p>实际情况中，对于不同类型的键，还要产生不同的哈希计算方法<br>java中hash的实现：所有的java类都继承一个hashcode()方法，这个方法返回一个32位的int<br>这个方法要和equals()一致，也就是说，如果x.equals(y)，x.hashcode()==y.hashcode(),也就是说，对于自定义类型，应当同时重写hashcode()和equals()。默认的实现是返回内存地址<br>几种类型的实现<br>Integer类型直接返回值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public final class Integer</span><br><span class="line">&#123;</span><br><span class="line">    private final int value;</span><br><span class="line">    ...</span><br><span class="line">    public int hashCode()</span><br><span class="line">    &#123; return value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>布尔类型，返回两个特定的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public final class Boolean</span><br><span class="line">&#123;</span><br><span class="line">   private final boolean value;</span><br><span class="line">   ...</span><br><span class="line">   public int hashCode()</span><br><span class="line">   &#123;</span><br><span class="line">   if (value) return 1231;</span><br><span class="line">   else return 1237;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>double 返回前32位和后32位的异或结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  public final class Double</span><br><span class="line">&#123;</span><br><span class="line">   private final double value;</span><br><span class="line">   ...</span><br><span class="line">   public int hashCode()</span><br><span class="line">   &#123;</span><br><span class="line">   long bits = doubleToLongBits(value);</span><br><span class="line">   return (int) (bits ^ (bits &gt;&gt;&gt; 32));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把string当成一个大数处理，每一位乘、加，采用的是Horner方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public final class String</span><br><span class="line">&#123;</span><br><span class="line">   private final char[] s;</span><br><span class="line">   ...</span><br><span class="line">   public int hashCode()</span><br><span class="line">   &#123;</span><br><span class="line">   int hash = 0;</span><br><span class="line">   for (int i = 0; i &lt; length(); i++)</span><br><span class="line">   hash = s[i] + (31 * hash);</span><br><span class="line">   return hash;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于一般的自定义类型，可以按照以下方法写hashcode()</p><ul><li>对每一个有意义的位采取31x+y的累加策略（像horner那种累加方法）</li><li>如果域是基本类型，则用其包装类的hashcode</li><li>如果为null，返回0</li><li>如果是个一般的引用类型，用它的hashcode（它本身已经定义好了）</li><li>如果是个数组，则对数组中的每个元素进行hash计算然后组合（也可以Arrays.deepHashCode()）<h3 id="将hashcode转换为一个数组索引"><a href="#将hashcode转换为一个数组索引" class="headerlink" title="将hashcode转换为一个数组索引"></a>将hashcode转换为一个数组索引</h3>对于索引，我们不可能让其在-2^31到2^31-1之间，因此，这里采用的是取余操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private int hash(Key key)</span><br><span class="line">&#123; return (key.hashCode() &amp; 0x7fffffff) % M; &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="冲突处理问题"><a href="#冲突处理问题" class="headerlink" title="冲突处理问题"></a>冲突处理问题</h2><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><h4 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h4><p>对于每个索引位置，我们“绑定”一个链表<br>hash：把键和在0到M-1之间的数字i绑定（数组索引）<br>插入：在第i个链表头插入新数据<br>搜索：遍历第i个链表</p><p><img src="/upload/pasted-203.png" alt="upload successful"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>假设我们使用的散列函数能够均匀并独立的将所有键分摊于0到M-1之间，，在一张含有 M个链表和N个键的散列表中，任意一条链表中的的键的数量在N/M的常数因子范围内的概率无限趋近于1</li><li>在一张含有M条链表和N个键的散列表中，未命中查找和插入的操作所需的比较次数为~N/M</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">public class SeparateChainingHashST&lt;Key, Value&gt; &#123;</span><br><span class="line">    private static final int INIT_CAPACITY = 4;</span><br><span class="line"></span><br><span class="line">    private int n; //键值对的个数</span><br><span class="line">    private int m; //哈希表的大小</span><br><span class="line">    private SequentialSearchST&lt;Key, Value&gt;[] st;  //链表的数组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initializes an empty symbol table.</span><br><span class="line">     */</span><br><span class="line">    public SeparateChainingHashST() &#123;</span><br><span class="line">        this(INIT_CAPACITY);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initializes an empty symbol table with &#123;@code m&#125; chains.</span><br><span class="line">     * @param m the initial number of chains</span><br><span class="line">     */</span><br><span class="line">    public SeparateChainingHashST(int m) &#123;</span><br><span class="line">        this.m = m;</span><br><span class="line">        st = (SequentialSearchST&lt;Key, Value&gt;[]) new SequentialSearchST[m];</span><br><span class="line">        for (int i = 0; i &lt; m; i++)</span><br><span class="line">            st[i] = new SequentialSearchST&lt;Key, Value&gt;();</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    // resize the hash table to have the given number of chains,</span><br><span class="line">    // rehashing all of the keys</span><br><span class="line">    private void resize(int chains) &#123;</span><br><span class="line">        SeparateChainingHashST&lt;Key, Value&gt; temp = new SeparateChainingHashST&lt;Key, Value&gt;(chains);</span><br><span class="line">        for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">            for (Key key : st[i].keys()) &#123;</span><br><span class="line">                temp.put(key, st[i].get(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.m  = temp.m;</span><br><span class="line">        this.n  = temp.n;</span><br><span class="line">        this.st = temp.st;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // hash value between 0 and m-1</span><br><span class="line">    private int hash(Key key) &#123;</span><br><span class="line">        return (key.hashCode() &amp; 0x7fffffff) % m;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns the number of key-value pairs in this symbol table.</span><br><span class="line">     *</span><br><span class="line">     * @return the number of key-value pairs in this symbol table</span><br><span class="line">     */</span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return n;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns true if this symbol table is empty.</span><br><span class="line">     *</span><br><span class="line">     * @return &#123;@code true&#125; if this symbol table is empty;</span><br><span class="line">     *         &#123;@code false&#125; otherwise</span><br><span class="line">     */</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        return size() == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns true if this symbol table contains the specified key.</span><br><span class="line">     *</span><br><span class="line">     * @param  key the key</span><br><span class="line">     * @return &#123;@code true&#125; if this symbol table contains &#123;@code key&#125;;</span><br><span class="line">     *         &#123;@code false&#125; otherwise</span><br><span class="line">     * @throws IllegalArgumentException if &#123;@code key&#125; is &#123;@code null&#125;</span><br><span class="line">     */</span><br><span class="line">    public boolean contains(Key key) &#123;</span><br><span class="line">        if (key == null) throw new IllegalArgumentException(&quot;argument to contains() is null&quot;);</span><br><span class="line">        return get(key) != null;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns the value associated with the specified key in this symbol table.</span><br><span class="line">     *</span><br><span class="line">     * @param  key the key</span><br><span class="line">     * @return the value associated with &#123;@code key&#125; in the symbol table;</span><br><span class="line">     *         &#123;@code null&#125; if no such value</span><br><span class="line">     * @throws IllegalArgumentException if &#123;@code key&#125; is &#123;@code null&#125;</span><br><span class="line">     */</span><br><span class="line">    public Value get(Key key) &#123;</span><br><span class="line">        if (key == null) throw new IllegalArgumentException(&quot;argument to get() is null&quot;);</span><br><span class="line">        int i = hash(key);</span><br><span class="line">        return st[i].get(key);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Inserts the specified key-value pair into the symbol table, overwriting the old </span><br><span class="line">     * value with the new value if the symbol table already contains the specified key.</span><br><span class="line">     * Deletes the specified key (and its associated value) from this symbol table</span><br><span class="line">     * if the specified value is &#123;@code null&#125;.</span><br><span class="line">     *</span><br><span class="line">     * @param  key the key</span><br><span class="line">     * @param  val the value</span><br><span class="line">     * @throws IllegalArgumentException if &#123;@code key&#125; is &#123;@code null&#125;</span><br><span class="line">     */</span><br><span class="line">    public void put(Key key, Value val) &#123;</span><br><span class="line">        if (key == null) throw new IllegalArgumentException(&quot;first argument to put() is null&quot;);</span><br><span class="line">        if (val == null) &#123;</span><br><span class="line">            delete(key);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // double table size if average length of list &gt;= 10</span><br><span class="line">        if (n &gt;= 10*m) resize(2*m);</span><br><span class="line"></span><br><span class="line">        int i = hash(key);</span><br><span class="line">        if (!st[i].contains(key)) n++;</span><br><span class="line">        st[i].put(key, val);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Removes the specified key and its associated value from this symbol table     </span><br><span class="line">     * (if the key is in this symbol table).    </span><br><span class="line">     *</span><br><span class="line">     * @param  key the key</span><br><span class="line">     * @throws IllegalArgumentException if &#123;@code key&#125; is &#123;@code null&#125;</span><br><span class="line">     */</span><br><span class="line">    public void delete(Key key) &#123;</span><br><span class="line">        if (key == null) throw new IllegalArgumentException(&quot;argument to delete() is null&quot;);</span><br><span class="line"></span><br><span class="line">        int i = hash(key);</span><br><span class="line">        if (st[i].contains(key)) n--;</span><br><span class="line">        st[i].delete(key);</span><br><span class="line"></span><br><span class="line">        // halve table size if average length of list &lt;= 2</span><br><span class="line">        if (m &gt; INIT_CAPACITY &amp;&amp; n &lt;= 2*m) resize(m/2);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    // return keys in symbol table as an Iterable</span><br><span class="line">    public Iterable&lt;Key&gt; keys() &#123;</span><br><span class="line">        Queue&lt;Key&gt; queue = new Queue&lt;Key&gt;();</span><br><span class="line">        for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">            for (Key key : st[i].keys())</span><br><span class="line">                queue.enqueue(key);</span><br><span class="line">        &#125;</span><br><span class="line">        return queue;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性探测法的散列表"><a href="#线性探测法的散列表" class="headerlink" title="线性探测法的散列表"></a>线性探测法的散列表</h3><h4 id="一般概念"><a href="#一般概念" class="headerlink" title="一般概念"></a>一般概念</h4><p>实现散列表的另一种方式就是用大小为M的数组直接保存N个键值对，其中M&gt;N，我们利用数组中的空位解决冲突问题，这种方式叫做开放地址散列表<br>开放地址方式中最简单的方式是线性探测法，当发生冲突（一个键的散列值已经被另一个键站了）时，我们就在下一个位置放置（索引+1）<br>哈希方法：把键和在0到M-1之间的数字i绑定（数组索引）<br>插入方法：如果index i为空的话，放置，如果不为空，则放置i+1,i+2……</p><p><img src="/upload/5.gif" alt="upload successful"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;散列表（Hash-Table）&quot;&gt;&lt;a href=&quot;#散列表（Hash-Table）&quot; class=&quot;headerlink&quot; title=&quot;散列表（Hash Table）&quot;&gt;&lt;/a&gt;散列表（Hash Table）&lt;/h1&gt;&lt;h2 id=&quot;一般思路&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="从零开始的算法征程" scheme="https://www.junglezero.top/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E5%BE%81%E7%A8%8B/"/>
    
    
      <category term="查找算法" scheme="https://www.junglezero.top/tags/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>查找（B树）</title>
    <link href="https://www.junglezero.top/2018/02/16/%EF%BC%88B%E6%A0%91%EF%BC%89/"/>
    <id>https://www.junglezero.top/2018/02/16/（B树）/</id>
    <published>2018-02-16T05:20:00.000Z</published>
    <updated>2019-03-18T08:49:12.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="B树（B-树）"><a href="#B树（B-树）" class="headerlink" title="B树（B-树）"></a>B树（B-树）</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在实际应用的场景中，为了查找一个数据，我们可能需要处理连续的数据存储块。可能是4千或者更多的数据，甚至是整个文件系统，对于外部系统，不同于内部系统，我们需要需要尽快的定位数据所在的页</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>对于一般的二叉平衡树，可能每个结点只有两三个键，但是对于B树，每个结点可以有很多键，比如一页（操作系统中的概念），B-树是一种特殊的2-3树，每个结点允许有M-1个键<br>几条基本要求：</p><ul><li>根节点至少有两个子节点</li><li>每个节点有M-1个key，并且以升序排列</li><li>位于M-1和M key的子节点的值位于M-1 和M key对应的Value之间</li><li>其它节点至少有M/2个子节点<br>在实际应用时，一般在外部结点（叶子结点）存数据，而内部结点是外部结点的索引，用以进行搜索<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2>同一般的平衡二叉树查找是一样的逐层查找<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2>同2-3树的插入，一旦结点中的键的数量超过预定数量，则将键进行分开，分成两个键</li></ul><p><img src="/upload/btreebuild.gif" alt="upload successful"></p><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><p>一次查找或者插入需要logm-1N到logm/2N<br>在实际情况中，假设M=1024,N=62000000000<br>则所需次不超过4</p><h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><p>B+树是对B树的一种变形树，它与B树的差异在于：</p><ul><li>有k个子结点的结点必然有k个关键码； </li><li>非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。</li><li>树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录。</li></ul><p><img src="/upload/Bplustreebuild.gif" alt="upload successful"><br>B和B+树的区别在于，B+树的非叶子结点只包含导航信息，不包含实际的值，所有的叶子结点和相连的节点使用链表相连，便于区间查找和遍历。</p><p>B+ 树的优点在于：</p><ul><li>由于B+树在内部节点上不包含数据信息，因此在内存页中能够存放更多的key。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子节点上关联的数据也具有更好的缓存命中率。</li><li>B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。</li></ul><p>但是B树也有优点，其优点在于，由于B树的每一个节点都包含key和value，因此经常访问的元素可能离根节点更近，因此访问也更迅速。下面是B 树和B+树的区别图：</p><p><img src="/upload/pasted-195.png" alt="upload successful"></p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>他通过对每个节点存储个数的扩展，使得对连续的数据能够进行较快的定位和访问，能够有效减少查找时间，提高存储的空间局部性从而减少IO操作。他广泛用于文件系统及数据库中，如：</p><ul><li>Windows：HPFS文件系统</li><li>Mac：HFS，HFS+文件系统</li><li>Linux：ResiserFS，XFS，Ext3FS，JFS文件系统</li><li>数据库：ORACLE，MYSQL，SQLSERVER等中</li></ul><p>附： <a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;B树（B-树）&quot;&gt;&lt;a href=&quot;#B树（B-树）&quot; class=&quot;headerlink&quot; title=&quot;B树（B-树）&quot;&gt;&lt;/a&gt;B树（B-树）&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背
      
    
    </summary>
    
      <category term="从零开始的算法征程" scheme="https://www.junglezero.top/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AE%97%E6%B3%95%E5%BE%81%E7%A8%8B/"/>
    
    
      <category term="查找算法" scheme="https://www.junglezero.top/tags/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
